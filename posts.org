#+hugo_base_dir: .
#+hugo_level_offset: 0
#+seq_todo: DRAFT DONE
#+startup: indent

* Content
** DONE A PineNote only 5-day weekend           :pinenote:linux:openhardware:
CLOSED: [2025-04-07 Mon 00:00]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250406_a-pinenote-only-5-day-weekend
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/f50d4418
:EXPORT_HUGO_IMAGES: /posts/20250406_a-pinenote-only-5-day-weekend/hanami.jpeg
:EXPORT_HUGO_MENU:
:END:
I went away this weekend to visit a friend and to experience _hanami_ (experience the transient beauty of cherry blossoms, a cherish memory from living in Japan). Perfect scenario to only bring only the PineNote for five days. TL;DR: PineNote was exactly the right device for this and I have no complaints.

#+hugo: more
#+begin_export hugo
{{< fig src="hanami.jpeg" width= "600px" title="Sakura Hanami" alt="Pink cherry blossoms in full bloom taking most of the frame with some branches are sticking out against the blidning warm golden sunlight to the right edge of the frame. It's very glowy, warm, and fuzzy feel." align="center" >}}
#+end_export


This was a non-work trip and as such I didn't need to bring a laptop and I am only shooting film so no need to back-up photos from a SD card. So the only time I would "need a computer" would be if I need to type a lot for any reason. The biggest reason I ended up needing to type for was chatting with folks on IRC, which is a great reason I suppose. The other reason was typing this blog post at the airprot, while also chatting on IRC.

I brought along my wireless Corne keyboard which is what I use at home as well. The total weight of the setup was 903 grams, for contrast my laptop is 1347 grams. Aside from graphical and processor intensive workloads the PineNote has the edge as a travel device, especially since I get a great e-reader and a writing tablet. The lag in typing is not a real concern for the amount and reasons I would use for it for, but I also don't think I would want to use this if I had a laptop or deskptop available. However, it is excellent on the road.
#+begin_export hugo
{{< fig src="pinenote-dca.jpeg" width= "600px" title="PineNote with Corne" alt="The PineNote e-ink tablet is in landcape mode on a table at an airport with the Corne split-ergo 42 key keyboard." align="center" >}}
#+end_export

I read on the device on average about 1.5 hours a day, most of that on Airplane mode. In addition to that I typed on it (with WiFi and Bluetooth) for an additional 3 hours or so, and I had the warm backlight halfway up for about half the time. So roughly 10 hours of active use and on standby the rest of the time, the total battery usage usage was about 75%. This is super non-scientific but point is that I did not have battery anxiety and I only charged it once during the trip.

Another thing that I intended to do but didn't need/get around to is getting tailscale setup. I want to think through that a bit more to see if that is something that is a good idea on a portable device that is most convenient when there's no passcode involved. But if I keep using it more like a Linux device than an e-reader I really need to reconsider how to secure it better. More on that another time.

So, I'll declare this a success for my needs.
** DONE How I accidentally got better at self-hosting and FOSS contributing :foss:selfhosting:fun:
CLOSED: [2025-04-02 Wed 00:00]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250401_how-i-accidentally-got-better-at-self-hosting-and-foss-contributing
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/a2242e57
:EXPORT_HUGO_IMAGES: /posts/20250401_how-i-accidentally-got-better-at-self-hosting-and-foss-contributing/nodes.jpg
:EXPORT_HUGO_MENU:
:END:

A year ago (April 3rd, 2024) [[../20240417_starting-a-webring-in-2024/][I started a webring]] with the System Crafters Community, building the web I wanted to see instead of lamenting its absence. [[https://craftering.systemcrafters.net/][Craftering]] has motivated others to write and share more, which in itself is very rewarding, but what I didn't anticipate is how it improved my self-hosting and FOSS contributions.
#+hugo: more

#+begin_export hugo
{{< fig src="nodes.jpg" width= "600px" title="Let's pretend these are rings not nodes, same idea." alt="Black and white photo of a square divided into triangles and the edges each then split off into other triangles. A reflection is visible in the right and bottom central triangles cluing-in the viewer into it being a glass window (it's a glass ceiling actually)." align="center" >}}
#+end_export

*** Build the thing you want to see
Craftering started because I was nostalgic for a web of yore where people had their own quirky sites and each of them had their own personality — alright fair, a lot of them had the personality of a "red text on black background with under-construction-gifs". But the thing I really liked was being recommended another interesting personal site via blog rolls or webrings. It's organic, word of mouth, "haaaaave you met..." kind of "algo". So I built the webring with encouragement and active participation from the community, it was really fun.

[[https://github.com/k3rs3d/ringfairy][Ringfairy]] was and remains the perfect solution for what I was looking for (static, simple linking, shuffles sites,built-in link audit). But it didn't have a mechanism to add all the sites (with RSS feeds) of a ring into a feed reader in one go through an OPML file. So I finally put some of that rudimentary Rust I had tried learning into actual use and [[https://github.com/k3rs3d/ringfairy/pull/3][upstreamed an OPML support feature]]. The developer (Kern) was also super encouraging and kind.

*** Creating opportunities for FOSS workflow
One of the hardest things about getting started with contributing to FOSS projects is that very first contribution. There is a HUGE hill to climb if you're not already steeped in a PR driven workflow. One of my unstated goals was to help get over that hump. Craftering onboards members in Coderberg through PRs or issues. We had a few first timers using git PR workflow and it felt great to be able to provide that learning experience and I learned a lot about being a maintainer. Whether we like to admit it or not, it's really nice to a see a clean merge from your PR... I had to learn how to clean up the PR through communication (while still being inviting and not coming across as gate-keepy) instead of just fixing it in the merge, that was also good growth.

The other FOSS win was learning more about Nix packaging from the ever helpful and excellent mentor [[https://blog.benoitj.ca/][Benoit J]]. He got Ringfairy packaged up for Nixpkgs and made the entire build process trivial. Building it with Cargo was a bear (a tame but slow bear) and without Craftering that wouldn't have come about either. And that whole experience made me comfortable to rev the version of the [[https://halloy.chat][Halloy]] IRC client in [[https://github.com/NixOS/nixpkgs/pull/341510][Nixpkgs]], a real scratch-your-itch FOSS win.

The other part of the workflow that I wanted to make "easier" for an Emacs crowd (a not insignificant contingent of System Crafters) was a [[https://codeberg.org/shom/ox-hugo-nix][Emacs+OrgMode+Hugo+Nix]] CI/CD blog. This is a clean "reference implementation" of my current blogging setup if I knew what I know now back when I started. I know it has been helpful as a reference for a few people.

*** Nothing's more permanent than a temporary solution
When all of this started the goal was to use Codeberg pages to host the static site after it is built with Codeberg's Woodpecker CLI. But instead of waiting around to get all the Cargo based (back then) CI/CD figured out (it's a lot more straightforward for repos you own, less so for organization repos and coordinating secrets management), I decided to host it on my VPS via Caddy. I did NOT appreciate what I had just signed up for... I signed up to be a Site Reliability Engineer (SRE) / System Administrator (SysAdmin) and really had to take the responsibility seriously.

Until that point in time, I had only hosted for myself and only things I was fine with being down for up to a few weeks at a time. But hosting a site where I had rallied people to link up to, couldn't be down for weeks. So I did a few things that I had been meaning to for years:
- Moved from Docker to Podman and using systemd to manage containers in order to be rootless by default and make automated system bring-up more robust.
- Monitoring with [[https://github.com/louislam/uptime-kuma][Uptime-Kuma]].
- Notifications with [[https://ntfy.sh/][Ntfy]].
- Discovered a great systemd tool: [[https://isd-project.github.io/isd/][isd]]

What's really interesting and cool is that this all actually works! I had an issue just yesterday as I was deploying Craftering for our *20th!* member and accidentally knocked down the site and I kept getting yelled at by the notifications. What even cooler is that this is an isolated incident, even more impressive because I'm always trying things on that VPS and serve a lot of other services out of it. (no whammy/no jinx/no curse)

The long-term plan is to still get CI/CD figured out and deployed on Codeberg Pages so I'm not a single point of failure. But I'm grateful for having the opportunity and impetus to learn/improve where/when it counted.

*** Community
The best part of this whole experience without a doubt is the community we have built together. I wanted to learn and do these things but I needed motivation, encouragement, support, and more fundamentally — a reason. That's what I have found in the System Crafters community, the FOSS community, and the Fediverse writ large. There are a lot of great, kind, and patient people who want to collaborate to build something together. Two special shout-outs to [[https://systemcrafters.net/][daviwil]] for bringing us together and to [[https://glenneth.org/][glenneth]] for being an embodiment of the spirit I described.

Sometimes you don't have to wait for someone else, you can be a catalyst. Happy Birthday Craftering!

** DONE Slimming the site slightly                         :hugo:selfhosting:
CLOSED: [2025-03-26 Wed 23:00]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250326_slimming-the-site-slightly
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/274e28bb
:EXPORT_HUGO_IMAGES: /posts/20250326_slimming-the-site-slightly/ArticleLoadPre.png
:EXPORT_HUGO_MENU:
:END:
I was looking into how Caddy serves pre-compressed files (html/css/js), it's pretty straightforward, I just need to generate the compressed files after Hugo builds the site. However, that is small fraction of the total payload since a lot of my posts have images. So I'm tackling that first.

#+HUGO: more
So why this and why now? I will eventually be moving this blog/site to own VPS and serve it via Caddy. I have really enjoyed the convenience of [[https://srht.site/][Sourcehut Pages]] and being able to utilize their build system for CI/CD, but I would like to do so with Forgejo instance fully on my VPS. Still, why? Why not, it's all for fun and learning.

The [[../20250308_pinenote-day-one/][previous post]] seemed like a good one to optimize since the payload was actually quite hefty at 5.67 MB (mostly due to the three images). While this is not "bad" by modern web standards, it is non-value-add heavy. The images were inserted as ~figure~ and even though the max-width was 800px, it is loading the full size image. I'm a lot more mindful of this in the [[../../film][Film]] section of this site since it is all images but I had not taken the time to optimize the image experience for regular posts.
#+begin_export hugo
{{< fig src="ArticleLoadPre.png" title="Pre Optimization" alt="Showing 5.67 MB transferred" >}}
#+end_export

So how much bandwidth is saved on a cold-cache load? 12x! That is more than an order of magnitude savings for an arguably better experience (now the images can be clicked to open the original). *12x!!*    
#+begin_export hugo
{{< fig src="ArticleLoadPost.png" title="Post Optimization" alt="Showing 449.66 kB transferred" >}}
#+end_export

It's a real shame because it didn't take long and I already had most of the shortcode from when I implemented the exif display for photos. I added a new shortcode =fig= in ~/layouts/shortcodes/fig.html~:
#+begin_src hugo
{{ $srcUrl := .Get "src" | safeURL }}
{{ $originalImage := .Page.Resources.GetMatch (printf "%s" $srcUrl) }}
{{- $alt := .Get "alt" -}}
{{- $title := .Get "title" -}}
{{- $width := default "600px" (.Get "width") -}}

{{- $resize := default "800x" (.Get "resize") -}}

{{- /* generate thumbnail */ -}}
{{ .Scratch.Set "image" ($originalImage.Resize $resize) }}
{{ $resizedImage := .Scratch.Get "image" }}

<figure class="align-center">
	<a href="{{ $originalImage.RelPermalink }}"> <img loading="lazy" style="display: block; margin-left:auto; margin-right:auto;" src="{{ $resizedImage.RelPermalink }}" alt="{{ $alt }}" width="{{ $width }}" /></a>
	<figcaption>{{ $title }}</figcaption>
</figure>
#+end_src
=note:= /~width~ and ~resize~ are optional so I can easily control the viewing experience./

And updated my Hugo Image Yasnippet template from using the HTML default =figure= to my custom =fig=. So now whenever I insert an image, I don't do anything differently, the shortcode takes care of it all. 
#+begin_src html
{{ < fig src="${1:SOURCE}" width= "${2:6}00px" title="${3:TITLE}" alt="${4:ALT-TEXT}" align="center" >}}
#+end_src
=note:= /there's a space between ~{{~ and ~<~ when Hugo templating should _not_ have that, I can't get Hugo to not render that even though it's in a code fence. I'll take any advice anyone has. Yes, it's a Hugo thing, not a ox-hugo export issue, I tried with the generated Markdown file as well./

Oh, and how much would compressing the HTML save? 3.5x, between raw html and serving =zstd= which is what Sourcehut serves by default. But the difference there is 35 kB vs 10 kB. My plan now is still to pre-compress the text files after the Hugo build process and configure Caddy to offer =zstd= (and =br=?) but also eventually go back and update all images to use this new =fig= shortcode.

** DONE PineNote - Day One                       :foss:pinenote:openhardware:
CLOSED: [2025-03-08 Sat 21:55]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250308_pinenote-day-one
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/69a9f84e
:EXPORT_HUGO_IMAGES: /posts/20250308_pinenote-day-one/PineNote_Overview.jpeg
:EXPORT_HUGO_MENU:
:END:
I've been eye'ing the [[https://pine64.org/devices/pinenote/][PineNote]] for years and recently decided to check up on it. The community has been hard at work it starting to look ready for prime now. I would LOVE an ebook reader and note taker but do not want to be tied into proprietary walled gardens (tempted most by the [[https://remarkable.com/store/remarkable-2][Remarkable 2]] / [[https://remarkable.com/store/remarkable-paper/pro][Paper Pro]]). I didn't find much review type information on the PineNote since it's original developer edition release several years ago. So I decided to be the change I wanted to see and bought one. It's Open-Hardware, Free Open Source Software (FOSS), and the main distro is purely community built, the purchase justifications just write themselves!
#+hugo: more
#+begin_export hugo
{{< fig src="PineNote_Overview.jpeg" width= "800px" title="PineNote" alt="A PineNote e-ink tablet with a pen on it is placed on a black mat with white grids along a collection of various coins down the side for a size comparison. The coins are (top to bottom): Canadian 2 dollars, Mexican 10 pesos, Japanese 500 yen, UK 1 pound, US 25 cents" align="center" >}}
#+end_export
*** First impressions
#+begin_export html
<style>
aside {
  padding-left: 0.5rem;
  margin-left: 40%;
  float: block-end;
  box-shadow: inset 5px 0 5px -5px #29627e;
  font-style: italic;
  font-size: medium;
  text-align: right;
  color: #29627e;
}
</style>
#+end_export
#+begin_aside
I made a [[https://makertube.net/w/cSDcWZVjFksZsxpPx5yo8j][first impressions video]], showing the device in action, covering most of the information here and more.
#+end_aside
It arrived from Hong Kong within a week via DHL, conveniently on a Friday afternoon so I was able to get into it last evening. I shared my experience on the Fediverse and what follows is mostly capturing and organizing those thoughts. 

My first impression was: feels like a quality and sturdy device. Feels good in the hand, the texture is a kinda soft grippy plastic. Pen felt good, the writing friction seems ok, I don't want to make any software qualifications until I update the device but still happy with the out-of-box experience. The wake from sleep time is essentially instant.

#+begin_export hugo
{{< fig src="PineNote_WarmFrontLight.jpeg" title="The warm glow is delightful" alt="PineNote in a dark room with its warm front light which is a gentle glow. There's a Garmin watch on top of the screen blasting out harsh blue light. The PineNote is open to the Foreword of Terry Pratchett's The Color of Magic." align="center" >}}
#+end_export
I have been really hoping the warm front light was decent, and it is fantastic! That's about halfway up the brightness scale. The regular (white/blue) and warm front lights are separate sliders both in the quick access menu (white is totally off). Garmin watch is still showing a bit more blue than white. I adjusted the color balance to correct for the camera and get it to a close as what I see in a pitch black room.

*** A bit of Q&A driven review
I had solicited questions from the Fedifolks so I could answer questions people might have. There seems to be some interest and I got a few great questions. I then compiled them into an initial review by section.

**** Linux Experience
This is a first-class Linux device, full on Debian Trixie with a full Gnome desktop with Pine specific packages that are pinned so they're not overridden by generic packages. The on-screen keyboard has been the only source of frustration. The display runs at 200% and the keyboard isn't optimized for that. 

**** Display Rendering Modes
There's a handy widget to change the current display rendering modes based on what you're doing.
- *Grayscale*: 16 levels of gray for best quality, slowest refresh, good for graphics.
- *DU4*: 4 levels of grey, great for reading (text is very crisp).
- *B&W + Dither*: best for fast refresh needs, writing, terminal, etc. still easy to read but display will feel lower res.
*B&W and B&W invert*: these exist but I haven't found them to be that useful for me yet.

**** Backlight
Wonderfully configurable from very dim to burn your retina. The white and the warm backlights can be controlled individually from the quick access, so you can create your own perfect color temperature. Genuinely delighted by this!

**** Applications
- *Terminal*: Gnome Terminal, everything works great, touch typing hampered by on-screen keyboard but entirely good experience as a terminal with B&W + Dither mode.
- *Browser*: Firefox, full install, works with plugins (only tried uBlock Origin).
- *Reader*: KO Reader (more utilitarian) and Foliate (more UX polish) but both work great with epub and mobi, didn't try pdf much but it works. I will test annotation, marking, etc. later. It's a good eBook experience, I'm happy to say but as long you realize that it's not that small but definitely not heavy for its size and build quality. 
- *Note-taking*: Xournal++, works fine out of the box but can be improved with some community config. Haven't used the writing much, more on that in the future. Without config, totally usable but not a dream.
- *App Sources*: Anything available in Debian Trixie and Flatpaks cab be enabled. I plan to test and use Flatpaks, will report back.
- *Sync*: Syncthing built-in but I read people are also using NextCloud with it. Will test both in the future, might need a test NextCloud instance (if you want answers sooner).

**** Battery
Definitely not enough data to say. I've been poking and prodding the device most of the day and it has used about 30% of charge so that is very encouraging. Closing the folio case and opening it up again is almost instant response, which I love (was a big fear).
*Speculation*: The device must be doing  some good battery management  it seems since first launch of app after inactivity takes a bit to startup but is responsive after launch.

**** Peripherals
I have not connected Bluetooth devices yet, I plan to test it with Bluetooth mouse, keyboard, and headphones and report back in the utnext couple days. 
*Disclaimer* based on very quick research: There's no USB-C dock functionality, the chip supports USB 3 PCIe,but the actual circuit out to USB-C connector is USB 2.0. There is no physical way for display mirroring (as in act as a  external display) or multi-monitor support (as in extend/duplicate screen). But there are Gnome tools to achieve this, I'll play with them at some point.

**** Rough Edges
As generally impressed as I am, this is *not* consumer device and Pine64 are very upfront about it. They actually caution is much less usable than it actually is. I've experienced a couple of freezes, specific to window dragging (my guess is dragging + gesture conflict + Xournal++ interaction). I had to run a few (documented) commands to get the boot environment fixed and remove a symlink to get ~apt~ to update properly. Honestly, these aren't even papercuts based on my expectations but I want to be fair about it.

**** Resources
- [[https://pndeb.github.io/pinenote-tweaks/][On-device documentation shown on startup]].
- [[https://domistyle.gitlab.io/pinenote-2024][Great blog post with device overview and links to resources]].
- [[https://fosstodon.org/@carbonatedcaffeine][@carbonatedcaffeine]] [[https://www.youtube.com/playlist?list=PLdVTsU3z511czt6WO_w5_MpOW52KkhQCB][YouTube Channel]] with demos and tutorials.
- [[https://github.com/PNDeb/pinenote-debian-image][Community developed Debian image]] that is shipping on device.
 
*** Up next
My plan is to make an initial hands-on video and then add some feature/function focused videos. I don't plan to get very technical in any testing but I'm open to collaborating. So if you have an idea and want to try something out (given its within my capability, time availability, and risk appetite) please get in touch and let's chat.

One of the other objectives of buying an early device is to contribute to the community both by writing reviews but also contributing to documentation (maybe code?). I already made my first PR to the on-device documentation and I hope to do some more. And finally, I'll be writing at least three more posts in this series: Week one, Month one, Year one.

#+begin_export hugo
{{< fig src="PineNote_Sideview.jpg"  title="PineNote portable thin client (no backlight at all)" alt="The PineNote is shown from a sideview resting on a table with black cutting mat. The folio is folded to prop the tablet up like a laptop screen and a wireless keyboard is in front of the screen. The screen is showing a small browser window and a terminal window with uname -a output" align="center" >}}
#+end_export

** DRAFT GPG Keys and Signing Git Commits
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250302_gpg-keys-and-signing-git-commits
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/af7407ee
:EXPORT_HUGO_IMAGES: /posts/20250302_gpg-keys-and-signing-git-commits/GoldLock_FischerFotos_Flickr.jpg
:EXPORT_HUGO_MENU:
:END:
It started with me adding a claim to my [[https://id.shom.dev][Keyoxide identity]] to link my new [[https://gts.shom.dev][GoToSocial fediverse]] home. That led to me making a minor edit to [[https://codeberg.org/shom/keyoxidizer][Keyoxidizer]] and then remembering that I meant to update my GPG key from RSA to ed25519. So that's the lovely path I walked to fall into this rabbit hole...

#+hugo: more
#+begin_export hugo
{{< figure src="GoldLock_FischerFotos_Flickr.jpg" width= "600px" title="The G in GPG is for Gold(i)locks¹" alt="A brass lock hangs brightly in front of a blue wall made of wooden slats" align="center" >}}
#+end_export

Let's just collect the ideas:
- PGP keys can't be upgraded unlike SSH keys
- Gotta do a full generate
- Keys and subkeys: separate signing from encryption
  - This post about [[https://dev.to/benjaminblack/signing-git-commits-with-modern-encryption-1koh][signing git commits]] was very helpful
#+begin_src conf
[user]
	name = Shom Bandopadhaya
	email = shom@bandopadhaya.com
	signingkey = 2231A3331BA5DF5B!
[commit]
	gpgsign = true
#+end_src
- Forgejo (Codeberg) and Github only need the signing keys
- Getting signing keys extracted out after lot of trial and error
  - ~gpg --list-keys --keyid-format short~
  - ~gpg --armor --export 1BA5DF5B! > signingkey.asc~ (it's the same key, just truncated, read from the back)
- Forgejo will use the main key as the default
  - ~gpg -a --default-key CFFF15E945DF1157 --detach-sig \ gpg: using "CFFF15E945DF1157" as default secret key for signing~
  - need to change it to the key you specified (not sure if this matters though because both are present) ~gpg -a --default-key 1BA5DF5B --detach-sig \ gpg: using "1BA5DF5B" as default secret key for signing~
- Sourcehut needs the encryption and the signing key (they encrpyt email with GPG before sending)
- The reward for all this? Little lock icon and verified badge! Not enough? Another layer of authenticity. 

#+begin_export html
<p class="attribution">¹"<a target="_blank" rel="noopener noreferrer" href="https://www.flickr.com/photos/80854685@N08/7454996046">Gold Lock</a>" by <a target="_blank" rel="noopener noreferrer" href="https://www.flickr.com/photos/fischerfotos/">Mark Fischer</a> is licensed under <a target="_blank" rel="noopener noreferrer" href="https://creativecommons.org/licenses/by-sa/2.0/?ref=openverse">CC BY-SA 2.0 <img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg" alt="CC icon" style="height: 1em; margin-right: 0.125em; display: inline;"></img><img src="https://mirrors.creativecommons.org/presskit/icons/by.svg" alt="By icon, stick figure person"style="height: 1em; margin-right: 0.125em; display: inline;"></img><img src="https://mirrors.creativecommons.org/presskit/icons/sa.svg" alt="SA icon" style="height: 1em; margin-right: 0.125em; display: inline;"></img></a>. </p>
#+end_export

** DONE Python, FastHTML, and Yak-shaving :rant:mastodon:containers:selfhosting:
CLOSED: [2025-03-02 Sun 01:12]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20250302_python-fasthtml-and-yak-shaving
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/6c578fb5
:EXPORT_HUGO_IMAGES: /posts/20250302_python-fasthtml-and-yak-shaving/prototype.png
:EXPORT_HUGO_MENU:
:END:
I wanted to save my barely passable Python scripting from total extinction and write something quick/useful. So what had happened was...

#+hugo: more
#+begin_export hugo
{{< figure src="prototype.png" width= "600px" title="FastHTML web app prototype" alt="Single webpage titled 'Systemd config generator for Podman' with form fields 'App Name', 'Port number mapping', and 'Volume name' with a 'Generate .service file' button. The table underneath shows the same fields as above plus a Delete column with the example data being Caddy with ports 80, 443, and volumes being ./data and ./site" align="center" >}}
#+end_export

Instead of writing a quick script I decided to learn a bit of FastHTML to create a web app to generate systemd service files for Podman, so a total yak-shave (I used podman generate last week but wanted "cleaner" files).

FastHTML is a really neat approach to "templating" HTML and seems to scale nicely with your needs, which means it's easy to get started. The fact that Pico.css and sqlite are built-in is really nice for out-of-box experience (can be disabled and extended). I'll keep working on my toy app and maybe actually make it useful (I'm posting publicly for accountability, I hope).

I posted the above on my single-user GoToSocial instance (having migrated away from Mastodon in late January). I have been meaning to document my journey with that and revamping my infrastructure on the VPS but I have been more in a doing mode and connecting with people on Fedi mode than actually writing mode. But I want to avoid falling into my perpetual really-nice-post™ trap so I'm adding some color here.

I have been pretty happy with how things are set up at the VPS now. There's a separate user that runs all the containers in podman through ~systemd~ user service. The data for the various containers are served out of a single data folder that is Syncthing'ed over to various machines (and there are backup snapshots), and I have monitoring via Uptime Kuman and Ntfy (which I plan to move to a different VPS on a different provider). Taking ownership of my Fedi presence with GoToSocial elevated my personal SLA and recovery needs quite a bit.

Well, I do still plan to write more about the VPS setup and crate a Start guide but the more I learn, the more I'm not sure where I would want someone else to start. Finding that balance between "best practice" / "I wish I had known when I started" / "this is way too complicated to start with" is a hard one to find. But it's nice to be doing things, learning, and now sharing (a bit).

** DONE 2024 in review                                             :fun:film:
CLOSED: [2024-12-31 Tue 22:08]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20241231_2024-in-review
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/8e634aea
:EXPORT_HUGO_IMAGES: /posts/20241231_2024-in-review/vibes.jpg
:EXPORT_HUGO_MENU:
:END:
I'm not that big on marking milestones but I'm also realizing that I don't always remember, appreciate, and am grateful for the seasons of life. So a little retrospection is in order.

#+hugo: more
#+begin_export hugo
{{< figure src="./vibes.jpg" width= "600px" title="2024 vibes" alt="Photo of a large green tree behind a field of yellow black-eyed susan flowers in full bloom, the foreground is a bright red-orange light bleed emanating from the bottom right almost making the field look like it's on fire." align="center" >}}
#+end_export

The first thing that surprised me as I sit down to take stock the year that was, is how much I actually did. That was definitely not my gut feel, I didn't do a lot of things that I had vague notions about and unfortunately that's that sticks out without this explicit retrospection. This isn't chronological...

*** Just trying things
I wrote an article about [[../20240119_tech-debt-for-personal-projects/]["Tech debt for personal projects"]] and that was a good kick off for the year. It allowed me to just make and do things without trying to have grand plan, something I need to periodically revisit. I added a new section to the site for [[../../start][Getting Started Guides]] and while it still feels pretty empty I've had some great feedback from people who have found both the current guides helpful. I do want to add more to the series, I have a couple ideas in mind but I'm trying to lean into seasons of interests and hobbies and not worrying about "unfinished work".

The biggest thing in this area of just diving into something was starting up a webring for the [[https://systemcrafters.net/][System Crafters Community]]: [[https://craftering.systemcrafters.net/][Craftering]] and that was wild to get several people adding their blogs and posting more. A few of my craftermates made their first site and started blogging from all the hype. Looking back, I'm quite proud of that and grateful for all the help and support from the community (especially [[https://blog.benoitj.ca/][Benoit]] for always being willing to help and encourage). It was a very concrete example of build the internet you want to see and small federated personal sites is exactly what I want to see. A bit more of that journey is [[../20240417_starting-a-webring-in-2024/][documented in this post]].

Based on all this, I also created a getting started template site that is fully integrated with Nix and CI/CD for sourcehut: [[https://git.sr.ht/~shom/ox-hugo-nix][ox-hugo-nix]]. Which was both fun to make and got me another step closer towards a [[https://git.sr.ht/~shom/dotfiles][fully declarative tech stack based on Nix]], I want to get back to it and move of the Nix VM onto bare metal.

Craftering was also a great excuse for me to learn a tiny bit of Rust and contribute to the project that builds the ring: [[https://github.com/k3rs3d/ringfairy][Ringfairy]]. Rust has been on my wish list for years and while I still know next to nothing, I'm grateful to [[https://kersed.net/][Kern]] for being so encouraging and merging my changes.

I've wanted to make videos for fun/helpful instruction, I tried some streaming to get a setup figured out. I finally made a video about the [[https://makertube.net/w/14PXvXsCGAMPPvCNXGGGxA][Mamiya Six folder camera]] that I am totally enamored with, which brings us to...

*** Film Photography (give me all the mechanical cameras)
The biggest focus for me from a hobby/creative outlet perspective this year has been Film Photography and the whole analog experience has been good for the soul. I find myself to be the happiest when I'm looking through and optical view/range finder. I've been developing film at home, both B&W and as of a few months ago, C-41 color and it has been a rewarding experience. I also realized that the highest friction and least enjoyable parts were the digital parts so after a bit of a journey I'm now camera scanning and while that feels ironic it's fast and I'm actually developing and scanning, so a big win!

Speaking of digital friction, have wanted to revamp my [[https://photos.shom.dev][Photos]] site for a long time because the cobbled together Wordpress workflow was too much friction for posting frequently so instead of boiling the ocean I added a [[../../film][Film]] photography section to the site so I could document/share the photos I am taking. I have finally found a route forward for the new site in the last week and am playing a hugo test site, I'll include a photo since the test link is not meant to be permanent.
#+begin_export hugo
{{< figure src="hugogallery.png" width= "600px" title="Hugo Gallery theme with mods" alt="Home page screenshot showing Featured album and three folders: Nature, Film, Scuba; all of them have relevant cover art (automatically picked or can be specified in index.md)" align="center" >}}
#+end_export

*** Life experiences
I have found that I have really embraced being connected with online friends and that has been very rewarding. It is still a privacy/sharing struggle for me (not the people but putting stuff online) but I have found great community in System Crafters and the Fediverse as a whole and the Film Photography community specifically. Trying to balance between finding my voice / not self-censoring / digital privacy, it's an evolution but I have been a lot more active on [[https://phanpy.social/#/fosstodon.org/a/243697][Mastodon]] and so far I'm glad for it.

Aside from that, there have been a lot of personally significant things but the most incredible experience of the year has to be experiencing the total solar eclipse. I'm glad [[../20240407_2024-total-eclipse-prep/][I planned for it]] and had some contingencies mapped out, I was down to plan C but had a transformative experience.
#+begin_export hugo
{{< figure src="./eclipse.jpg" width= "600px" title="Total Solar Eclipse" alt="Two side by side photos of the total solar eclipse. First one has the entire sun covered with only the prominence streaming off and the second one is the diamond ring breaking through at the 4o'clock position." align="center" >}}
#+end_export

Here's to just trying more things in 2025!

** DONE Hosting a Valheim Plus server on a VPS with Podman and docker-compose :linux:containers:selfhosting:
CLOSED: [2024-08-18 Sun 22:28]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240818_hosting-a-valheim-plus-server-on-a-vps-with-podman-and-docker-compose
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/6a32ef7b
:EXPORT_HUGO_IMAGES: /posts/20240818_hosting-a-valheim-plus-server-on-a-vps-with-podman-and-docker-compose/gameplayscreenshot.png
:EXPORT_HUGO_MENU:
:END:
One of the best parts of being a self-hoster is being able to host a game server for your friends, right? Well, yes but also it can go sideways and not only because you're a system admin for more than yourself. There are many ways but Podman, docker-compose, and Syncthing can help!

#+hugo: more
#+begin_export hugo
{{< figure src="gameplayscreenshot.png" width= "600px" title="Valheim Gameplay Screenshot" alt="A videogame character holding a bow is standing on some rocks with a wooden building and garden behind. It has a low-poly look but with beautiful lighting." align="center" >}}
#+end_export

*** Unwarranted exposition
I plan to write a [[../../start][getting started]] guide at some point but after doing a bit of maintenance to get everything working again I wanted to share some quick thoughts. I did not want to expose Docker to the external web because running Docker as root is easier but also dangerous since root inside the container is root on host -- took a bit to really understand that. There are (involved) ways to run [[https://docs.docker.com/engine/security/rootless/][Docker rootless]] and other security measures but after [[https://blog.alexellis.io/docker-is-deleting-open-source-images/][Docker pulled some shenanigans]] and Podman being almost fully API compatible, it was an easy choice to just switch to [[https://podman.io/][Podman]].
**** Valheim
#+begin_quote
Valheim is a game where you explore, build, craft and conquer in a procedurally generated world inspired by Norse mythology.
#+end_quote
[[https://www.valheimgame.com/][Valheim]] is stunning game that really captured my attention and was an excellent escape during a long winter a few years ago, I describe it as Viking Minecraft. The game supports multiplayer and people have figured out how to run it headless so there's a persistent world on a server allowing people to play and build asynchronously. It's quite fun to play with some friends when a simple resource gathering trip turns into a harrowing boondoggle.
However, there are a lot of small quality of life improvements that could make the game more enjoyable. These (and many more) things have coalesced into a mod-pack called Valheim Plus.
**** Valheim Plus
[[https://www.nexusmods.com/valheim/mods/2323][Valheim Plus]] can live alongside the game and I first used it locally for my solo game. But when a group of friends wanted to play I suggested we keep our options open to enable Valheim Plus and selectively tweak the game. All of that finally led me to this [[https://github.com/Grantapher/ValheimPlus][excellent container stack]].
*** The Setup
I went through a couple of different approaches but I'm happy with a =docker-compose.yaml=, a =valheim.env= file, and the =valheim_plus.cfg= file to fully define the "server". It is a bit annoying that all three files in are their separate file types but that's just modern development.
**** Documentation and Version Control
I use a private git forge, [[https://forgejo.org/][Forgejo]], for my self-hosted infrastructure so I can commit secrets in .env files and not worry about leaking them accidentally. I wrote up a readme file, screenshot included to show how nice self-hosted Forgejo is and how it pays to do documentation for your own sake.
#+begin_export hugo
{{< figure src="valheimreadme.png" width= "600px" title="Readme Screenshot" alt="Screenshot of a readme file showing from a Forgejo instance with sections for Server, Server Staus, Valheim Plus, and Podman" align="center" >}}
#+end_export
Quick points on each piece of the tech stack, I hope to expound in a planned article on "self-hosting on an affordable VPS", feedback and topics to cover are very welcome.
**** Podman
[[https://podman.io/][Podman]] installation is pretty straight forward. I suggest creating a separate user on the server who owns all the containers. If you're familiar with docker, you can replace all ~docker~ commands with ~podman~ and it'll work a treat, [[https://www.redhat.com/sysadmin/compose-podman-pods][Redhat also has a nice article]].
**** Docker Compose
Podman uses an equivalent... [[https://github.com/containers/podman-compose][podman-compose]], I appreciate them not being cute about it and going with a familiar setup. I can share the docker-compose file as is, since I'm using the .env file to store all secrets.
#+begin_src yaml
  version: "3.1"

services:
  valheim-mod-prod:
    image: ghcr.io/lloesche/valheim-server
    cap_add:
      - sys_nice
    volumes:
      - ./config:/config
      - ./data:/opt/valheim
      - ./valheim_plus.cfg:/opt/valheim/plus/BepInEx/config/valheim_plus.cfg:ro
    ports:
      - "2456-2458:2456-2458/udp"
      - "9001:9001/tcp"
    env_file:
      - ./valheim.env
    restart: always
    stop_grace_period: 2m
    networks:
      - reverse_proxy

networks:
  reverse_proxy:
    name: reverse_proxy
    external: true
#+end_src
A couple things to point out:
- The Valheim Plus documentation will tell you to place the =valheim_plus.cfg= file in the =BepInEx= folder (after downloading the and unzipping the mod) but that made version controlling it a bit janky so I map it directly into the location inside the container where it's expected.
- Also note the ":ro" at the end, it's mounted internally as a read-only file. You will see messages in the log stating it's read-only, that's not an error and it works just fine. The game will download a fresh config from GitHub if there's no file present so it's best to make it read-only so it doesn't get overwritten accidentally.
- ~networks: reverse-proxy~ refers to Caddy that is proxying the requests coming to the Supervisor (running on port =9001=), which is a small web-app that allows control of the pieces of the tech stack.
#+begin_export hugo
  {{< figure src="supervisor.png" width= "600px" title="Supervisor Status web app" alt="Web app screenshot showing control options: Restart, Stop, Clear Log, Tail -f Stdout, Tail -f Stderr for the following services: crond, syslogd, valheim-backup, valheim-bootstrap, valheim-server, valheim-updater" align="center" >}}
#+end_export
**** Version Control
With this setup you only have to version control the three files mentioned before: =docker-compose.yaml=, =valheim.env= (don't share publicly), and =valheim_plus.cfg= (I also suggest creating a =README.md= with details of your specific setup and version controlling that too).
**** Syncthing
[[https://syncthing.net/][Syncthing]] is probably the odd-ball part here, it's basically the easiest way for me to create an "on-site backup" for my "off-site server" (VPS). This really isn't in scope but wanted to throw it out there as a cheaper place to backup those frequent and bulky (by cloud storage standards but light for home) backups that the container stack creates.
*** Takeaway
There are great tools out there to self-host things for fun and to be in control of your data (more on that in the future too). But being able to recreate, reproduce, with reliability requires a little planning and some documenting.

This blog doesn't have comments but happy to discuss further on [[https://phanpy.social/#/fosstodon.org/a/243697][Mastodon]].

** DONE To our own detriment                            :rant:foss:mastodon:
CLOSED: [2024-05-27 Mon 08:33]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240527_to-our-own-detriment
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/22b248b7
:EXPORT_HUGO_IMAGES: /posts/20240527_to-our-own-detriment/image.jpg
:EXPORT_HUGO_MENU:
:END:
This post [[https://robindev.substack.com/p/cloudflare-took-down-our-website][alleging extortion from CloudFlare]]  is plausible/cautionary. Market monopolies/tech mono-cultures suck so it's tempting to just be outraged at CF.

#+hugo: more
However, we allow this when we cede control to third parties (not just cloud) without mitigation plans, by NOT:
- using open standards/formats
- separating concerns
- staffing expertise in-house/independent long-term partners
- balancing risk with cost

Let's have that bigger talk!

=Note=: Originally posted on [[https://fosstodon.org/@shom/112513200445089689][Mastodon]], any conversation will be there.

** DONE Enshittification protests beget more enshittification     :rant:foss:
CLOSED: [2024-05-07 Tue 21:42]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240507_enshittification-protests-beget-more-enshittification
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/b0ef9631
:EXPORT_HUGO_IMAGES: /posts/20240507_enshittification-protests-beget-more-enshittification/bad-luck-brian.jpg
:EXPORT_HUGO_MENU:
:END:
Like many others, I am frustrated by corporations that have ingested immense amounts of user generated content and are using/selling it to train LLMs[fn:2]. However, deleting the content now is counter productive, let's protest more effectively by building a better web.

#+hugo: more
#+begin_export hugo
{{< figure src="./bad-luck-brian.jpg" width= "500px" title="Bad Luck Brian answers important questions (via quickmeme.com)" alt="Bad luck Brian meme format with 'When does a narwhal bacon?' on top and '*Comment has been deleted*' at the bottom" align="center" >}}
#+end_export
*** Context and Concern
I'm seeing many influential people on the Fediverse urging others to go register their displeasure by deleting the knowledge they contributed via answers and comments. This is especially puzzling in the case of the current [[https://stackoverflow.co/company/press/archive/openai-partnership][Stack Overflow and OpenAI partnership]] announcement that has caused [[https://mastodon.social/tags/StackOverflow][blowback on Mastodon]][fn:1] because these folks are tech savvy and should understand that deleting their contribution from showing up on the front-end does not delete the data. It's a bit crazy making because I feel like I'm missing something here, am I?

Please don't advise people to delete their existing answers. Not contributing new answers and not logging in/deleting your account are great ways to register protest but deleting data is self-defeating. These companies already have the data backed up and will use it anyway, deleting answers only hurts humans who are searching for the answers through traditional searches. Removing the information by deleting it or issuing GDPR requests only locks up the knowledge and makes it exclusive to the "AI".

*** Potential Solutions
A dramatic analogy before we get to solutions... If a marauding force is razing your city and driving you away, you absolutely shouldn't come back to help them rebuild the city where you can't live anymore. But you also don't burn your books in the fire on the way out. You take your books with and build a better city with fortified libraries!

Just in case it's not clear, I'm not siding with the platforms here. Even if they have a legal right to the use the data as they see fit, they're violating trust with the community by going against its wishes. And in the case of Stack Overflow all contributions are [[https://creativecommons.org/licenses/by-nc-sa/4.0/][CC-BY-SA]] so anyone can use the data provided they follow the attribution requirement[fn:3].

Instead of letting a good crisis go to waste, let's use this (as yet another) impetus to leave walled gardens and join community spaces. Instead of encouraging others to delete answers, direct them to [[https://forum.systemcrafters.net/][community forums]], write the answer on your own website and post a link to the platform ([[https://indieweb.org/POSSE][POSSE style]]), stop contributing further to closed platforms and liberate existing data by using export tools where available.

I hope we can learn these lessons from the on-going Enshittification and start taking back the web instead of furthering Enshittification by protesting it ineffectively.

=Discussion=: This site doesn't have comments but happy to chat via this [[https://fosstodon.org/@shom/112403736338407818][Mastodon post]].

*** Footnotes

[fn:3] Citing attribution would be difficult at best and while I'm not a lawyer I can't see how [[https://mastodon.social/@trisweb@m.trisweb.com/112402123151382239][their response]] could help legally.
[fn:2] Large Language Model, falls under the umbrella of the colloquial Artificial Intelligence (AI) terminology.
[fn:1] As of 2024-05-07, I don't want to single out individual posters.

** DONE In appreciation of podcasts                                   :rant:
CLOSED: [2024-04-30 Tue 23:54]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240430_in-appreciation-of-podcasts
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/cfab88dc
:EXPORT_HUGO_IMAGES: /posts/20240430_in-appreciation-of-podcasts/image.jpg
:EXPORT_HUGO_MENU:
:END:
I've seen several posts and threads lately on the fediverse that take a rather pessimistic view of podcasts and advocate for written media instead. I guess here's my hot take about it because no one asked!

#+hugo: more
You know what? Transcripts would be great and having them integrated into the podcast app like synchronized lyrics, even better. Being able to quickly refer to the part that I didn't catch or copy a piece of information to save as a note, would be fantastic. I'm excited for all these types of features coming to podcast apps. Multi-track media, like video with subtitles is great for everyone and helps with accessibility.

However, there's a lot of "this could have been an email" energy in a lot of these conversations. And a lot of straight up hate about tech bro podcasts... it makes me question why these folks are listening to that content, I don't want to read the crap content I wouldn't want to listen to either. I'm sure there must be a lot of atrocious podcasts out there for people to have such strong opinions. Luckily I'm not familiar with them and even if I were, I would just move on instead of crapping on the medium as a whole. There's a lot of equivalence of audio and text and I would rather have text because that's easier to skim. Sure, no argument about the skimming part. But audio is a different (and richer) medium than text and good podcasts lean into the strengths of the medium; tone, tamber, pacing, ambiance, relative loudness, etc. I'm not just talking about radio drama, I'm also talking about news, conversational, and reporting podcasts.

There's no substitute for good content (I mean that in the definition of the word not content-creator sense) but audio is a great medium so I'm defending that in text form so it might actually reach folks that will not listen to a podcast about it. I would love for podcasts to have transcripts and make all media more accessible. But hey Podcasters, please keep making great podcasts with excellent audio mixing and production, I appreciate your craft!

** DONE Starting a webring in 2024                                     :foss:
CLOSED: [2024-04-17 Wed 21:56]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240417_starting-a-webring-in-2024
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/18a9a25f
:EXPORT_HUGO_IMAGES: /posts/20240417_starting-a-webring-in-2024/posse.jpeg
:EXPORT_HUGO_MENU:
:END:
I'm happy to see that a lot of people, both regular and "content creators", are relying less solely on commercial social platforms. But discoverability is still an issue, maybe taking back the web requires using ancient tools like webrings.
#+hugo: more
#+begin_export hugo
{{< figure src="./posse.jpeg" width= "400px" title="Publish on Own Site Syndicate Everywhere" alt="Hand drawn sketch of a hub and spoke arrangement with 'Your site' as the hub and other sites like Mastodon, Instagram, Github, etc. as spokes" align="center" >}}
#+end_export

The idea of [[https://indieweb.org/POSSE][POSSE]] is very appealing from a data sovereignty perspective but you're still relying on third-party platforms for discoverability. If only there was a way to discover others from each other... well there used to be: webrings. The basic premise was, you land on a site(D) and you were pointed to the previous(C) and next(E) sites in the ring. A random site button was also common.
#+begin_src sh :exports none :noeval
  echo "flowchart LR
  A((A))<-->B((B))
  B((B))<-->C((C))
  C((C))<-->D((D))
  D((D))<-->E((E))
  E((E))<-->A((A))" > flow1.mmd
  mmdc -s 5 -b transparent -t 'neutral' -i flow1.mmd -o flow1.png
#+end_src
#+begin_export hugo
{{< figure src="flow1.png" width= "600px" title="Webring" alt="A flow chart showing five nodes, A through E, pointing to each other in a circle" align="center" >}}
#+end_export

#+begin_export html
<style>
aside {
  padding-left: 0.5rem;
  margin-left: 40%;
  float: block-end;
  box-shadow: inset 5px 0 5px -5px #29627e;
  font-style: italic;
  font-size: medium;
  text-align: right;
  color: #29627e;
}
</style>
#+end_export
#+begin_aside
Diagrams generated with mermaid-cli but workflow is poor now, mermaid.js payload is too large (3MB) to use a shortcode and render on web and it doesn't work for RSS feeds. I might need to update/maintain ob-mermaid to get seamless results, that'll definitely be another post.
#+end_aside

An easier and older(?) concept is a "blog roll", where you just list the other sites you find cool/interesting on your site somewhere (typically in the side-navigation bar which was as common design pattern). However, the downside with blog rolls is that you have to maintain it manually and it could grow quite long. As a reader, it's hard to choose which site to visit; it's a real judging a book by it's cover dilemma.

The previous/next links in a webring kind of solve both those problems, especially if there is an index page that one can visit to see all the sites. But the biggest downside is that it typically requires an active server running "code" to route the traffic (because manually linking to sites would require constant upkeep) and if a site(C) ceases to exist or removes the previous/next links then it breaks the ring. The other issue is that if there's a popular site in the ring(B) then only the adjacent sites (A & C) benefit from the additional 👀.
#+begin_src sh :exports none :noeval
  echo "flowchart LR
  A((A))<-->B((B))
  B((B)) -- x --> C((C))
  C((C)) -- x --> D((D))
  D((D))<-->E((E))
  E((E))<-->A((A))
  style C fill:#a33
  style B fill:#3a3" > flow2.mmd
  mmdc -s 5 -b transparent -t 'neutral' -i flow2.mmd -o flow2.png
#+end_src
#+begin_export hugo
{{< figure src="flow2.png" width= "600px" title="Broken webring" alt="Same ring as before by C is colored red and there are x on it's connections to A&C, B is colored green." align="center" >}}
#+end_export

So what are some mitigations we can apply to this webring model?
1. Don't run "code" on each site or a central server
2. Give sites an easy way to link previous/next sites (minimal technical ability required)
3. Make sure that all sites actually exist and link correctly to their adjacent positions
4. Change the order of the sites that link to each other to facilitate more discoverability
#+begin_src sh :exports none :noeval
  echo "flowchart LR
  C((C))<-->A((A))
  A((A))<-->E((E))
  E((E))<-->B((B))
  B((B))<-->D((D))
  D((D))<-->C((C))
  style B fill:#3a3" > flow3.mmd
  mmdc -s 5 -b transparent -t 'neutral' -i flow3.mmd -o flow3.png
#+end_src
#+begin_export hugo
{{< figure src="flow3.png" width= "600px" title="Shuffled ring gives better exposure" alt="Same as first image but B is green and the order is CAEBD" align="center" >}}
#+end_export

Well, turns out that [[https://github.com/k3rs3d/ringfairy][Ringfairy]] actually address all of these:
1. It uses statically generated redirect pages for each node in the ring
2. Individual sites only need to insert three (previous/index/nextg) regular url links
3. It audits sites and excludes missing/malformed sites during build to preserve ring integrity
4. It can shuffle the site order each time it builds the ring

In my quest to just do things and learn from them instead of wishing it existed and with encouragement from the [[https://systemcrafters.net/community/][System Crafters Community]], I started [[https://craftering.systemcrafters.net/][Craftering]]. Of course this site is a part of the ring and you can explore others with the previous/next links in the footer. I can say for certain that my site is not (B) but it's been fun to bring others into the fold. We're collaborating via a [[https://codeberg.org/SystemCrafters/craftering][Codeberg]] repo and we've had a few people who made their first contribution to an open source repo and/or their first Pull Request(PR), it's rewarding to be a part of that milestone. A couple first times for me as well: this is first community project that I'm maintaining; and I've submitted [[https://github.com/k3rs3d/ringfairy/pull/3][my first Rust-lang PR]] to Ringfairy (more on that in a future post).
#+begin_src sh :exports none :noeval
  echo "flowchart LR
  a((C))<-->b((R))
  b((R))<-->c((A))
  c((A))<-->d((F))
  d((F))<-->e((T))
  e((T))<-->a((C))
  style a fill:#9ab
  style b fill:#abc
  style c fill:#bcd
  style d fill:#cde
  style e fill:#def" > flow4.mmd
  mmdc -s 5 -b transparent -t 'neutral' -i flow4.mmd -o flow4.png
#+end_src
#+begin_export hugo
{{< figure src="flow4.png" width= "600px" title="Craftering be Crafting" alt="Same 5 nodes as first image but the letters spell CRAFT" align="center" >}}
#+end_export

** DONE 2024 Total Eclipse Prep                                         :fun:
CLOSED: [2024-04-07 Sun 20:40]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240407_2024-total-eclipse-prep
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/b702c920
:EXPORT_HUGO_IMAGES: /posts/20240407_2024-total-eclipse-prep/Solar-Eclipse.jpg
:EXPORT_HUGO_MENU:
:END:
#+begin_export hugo
{{< figure src="Solar-Eclipse.jpg" width= "500px" title="Partial eclipse from SFO 2017" alt="Fluffy white clouds with a pitch black band in the middle where a crescent sun is visible in the center of the band." align="center" >}}
#+end_export
The total eclipse is tomorrow, I've known about it since the last one [[https://photos.shom.dev/solar-eclipse/][I missed in 2017]], so of course I started preparing (earlier today). Here's some handy information for myself and it might help you too.

#+hugo: more
*** Why is this one special
Well the next total eclipse on the continental USA is in 2044 and not in driving distance for me. Besides that, there are other reasons as well, and this is the [[https://youtu.be/0fgbMTC30F8][best explanation with (good) animations]] that I've come across. I highly recommend it, it's approachable and kid friendly.
*** Path planning
I have created myself a list of pins on a map and identified roads that I can use if I need to shift my location based on the weather. Here are some resources:
- [[https://www.timeanddate.com/eclipse/map/2024-april-8#@38.07404145941957,-87.82470703125001,6][Path of eclipse]]: click on a city to find details about: when the eclipse starts, how long totality is, what's the total duration.
- [[https://radar.weather.gov/?settings=v1_eyJhZ2VuZGEiOnsiaWQiOiJuYXRpb25hbCIsImNlbnRlciI6Wy04OC4zNDgsNDAuNjEzXSwibG9jYXRpb24iOlstOTAuMzA5LDQyLjY0M10sInpvb20iOjYuNjY1MjAyNzM5NTk4MjIyLCJsYXllciI6ImNyZWZfcWNkIn0sImFuaW1hdGluZyI6ZmFsc2UsImJhc2UiOiJzdGFuZGFyZCIsImFydGNjIjpmYWxzZSwiY291bnR5IjpmYWxzZSwiY3dhIjpmYWxzZSwicmZjIjpmYWxzZSwic3RhdGUiOmZhbHNlLCJtZW51Ijp0cnVlLCJzaG9ydEZ1c2VkT25seSI6dHJ1ZSwib3BhY2l0eSI6eyJhbGVydHMiOjAuOCwibG9jYWwiOjAuNiwibG9jYWxTdGF0aW9ucyI6MC44LCJuYXRpb25hbCI6MC42fX0%3D][Radar view for Eclipse path]]: it's the same view area as the map above, so I plan to move about based on weather.
- [[https://maps.app.goo.gl/4ASJvH9rHhuobYBg8][My path targets]]: potential target locations based on weather.
- Edit: More hot tips! Download a local copy of the map area on Google maps so you can find alternate routes during peak traffic congestion when the internet by the main roads also crawling.
*** Safety Tips
*DO NOT* look at the sun unless you're actually on the line of totality and it's in the middle of the totality period. I'll very much be in doubt about whether I can guarantee both of those conditions are true, so I will not be looking directly at the sun.
**** Photography safety tips
- If you're looking at the sun with any optics (camera lens / binoculars) put the filter on the outside of the glass not on your eyes.
- Basically don't put on goggles and look through binoculars, it's essentially 'a magnifying glass to burn paper' situation. You want to cut the light before magnifying.
- Same deal with cell phones, put the googles on the phone camera and look through the screen.
- =Reminder to self=: photo effort is limited to 15 seconds for each minute, enjoy and look around.
**** Road safety tips
- Give yourself 150% time margin to get where you're going.
- If you pull off to the side of the road, don't stand next to your car. Other people will not be invested in the eclipse until it's happening and they'll rubber-neck.
- =Reminder to self=: Bring snacks, chair, and patience
**** This is NOT a comprehensive list.
- =Reminder to self=: hydrate and sunscreen.
*** Good luck and have a safe eclipse
If the weather is bad, just remind yourself that on any sunny day you can eclipse the sun with your head and create a magical and terrifying experience for small creatures.

** DONE Joy is free and comes in small packages                         :fun:
CLOSED: [2024-04-07 Sun 01:02]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240407_joy-is-free-and-comes-in-small-packages
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/820055e1
:EXPORT_HUGO_IMAGES: /posts/20240407_joy-is-free-and-comes-in-small-packages/image.jpg
:EXPORT_HUGO_MENU:
:END:
Two little neighborhood kids MADE my day!
I'm rolling in my small Subaru hatchback and these kids run to the edge of their yard and give me the trucker/train conductor honk fist pump hand signal! I tapped out a festive sequence of mini honks and everyone was happy. Joy is free and comes in small packages!

I shared this on [[https://fosstodon.org/@shom/112225988844681892][Mastodon]] but wanted to remember it, it was awesome!

#+hugo: more
** DONE When open source goes source available                   :foss:rant:
CLOSED: [2024-03-27 Wed 17:16]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240327_when-open-source-goes-source-available
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/cee0f88b
:EXPORT_HUGO_IMAGES: /posts/20240327_when-open-source-goes-source-available/redis.png
:EXPORT_HUGO_MENU:
:END:
Redis went from an open [[https://techcrunch.com/2024/03/21/redis-switches-licenses-acquires-speedb-to-go-beyond-its-core-in-memory-database/][source license to a source available license]]. This is [[https://www.elastic.co/blog/licensing-change][not a new pattern]] of trying to protect share-holder value against large cloud providers extracting value they didn't create. Corporate finance discussion aside (since that's a really sad can of worms), it's interesting to see what the FOSS community did about it.

#+hugo: more
I posted my thoughts on Mastodon:

#+begin_export html
  <blockquote lang="en" cite="https://fosstodon.org/@shom/112167859283706451">
  <p>It was wise of <span class="h-card" translate="no"><a href="https://fosstodon.org/@drewdevault" class="u-url mention">@<span>drewdevault</span></a></span> to host redict (redis fork) on <span class="h-card" translate="no"><a href="https://social.anoxinon.de/@Codeberg" class="u-url mention">@<span>Codeberg</span></a></span> to maintain workflow parity with github and avoid any perceived conflicts of interest¹.</p><p>I wondered why LGPL and not of AGPL², which is also explained nicely: &quot;but we want to make it as easy as possible for users to comply with the Redict license and we do not see any reason to discourage cloud providers from making use of Redict.&quot;</p><p>Hope other marquee projects follow suite. </p><p>¹<a href="https://fosstodon.org/@drewdevault/112167165399257154" target="_blank" rel="nofollow noopener noreferrer" translate="no"><span class="invisible">https://</span><span class="ellipsis">fosstodon.org/@drewdevault/112</span><span class="invisible">167165399257154</span></a><br />² <a href="https://redict.io/posts/2024-03-22-redict-is-an-independent-fork/#why-lgpl" target="_blank" rel="nofollow noopener noreferrer" translate="no"><span class="invisible">https://</span><span class="ellipsis">redict.io/posts/2024-03-22-red</span><span class="invisible">ict-is-an-independent-fork/#why-lgpl</span></a></p>
  <blockquote lang="en" cite="https://fosstodon.org/@drewdevault/112167165399257154">
    <p>Why isn&#39;t Redict on GitHub?</p><p>Answered here:</p><p><a href="https://github.com/redis/redis/pull/13157#issuecomment-2022380438" target="_blank" rel="nofollow noopener noreferrer" translate="no"><span class="invisible">https://</span><span class="ellipsis">github.com/redis/redis/pull/13</span><span class="invisible">157#issuecomment-2022380438</span></a></p>
    <footer>
       — Drew DeVault (@drewdevault) <a href="https://fosstodon.org/@drewdevault/112167165399257154"><time datetime="2024-03-27T10:25:16.565Z">3/27/2024, 5:25:16 AM</time></a>
    </footer>
  </blockquote>
  <footer>
     — shom 🐧📷🤿🏔️🪚 (@shom) <a href="https://fosstodon.org/@shom/112167859283706451"><time datetime="2024-03-27T13:21:44.408Z">3/27/2024, 8:21:44 AM</time></a>
  </footer>
</blockquote>
#+end_export

This lead to some interesting discussion and Drew DeVault chimed in with some interesting comments and [[https://discourse.writefreesoftware.org/t/what-is-your-current-go-to-license/60][posted a link]] to why he sometimes prefers the MPL license over a GPL license, it's worth the short read and I plan to think/write about it more.

So here's my semi-informed rant: AGPL might not always be the best license to police the poor behavior of corporate users. Licenses can only dictate what is legal, and just because it's legal doesn't mean it's ethical. But there-in also lies the problem: unethical entities will always look for the legal loophole or hope to not get caught, assuming laws are equitably enforced in the first place. Whether the community likes it or not a lot of commercial enterprises have contributed significant portions of the FOSS stack. Leaving the door open to contributions but finding better models to compensate developers is more fruitful use of time and effort than subjecting each other to purity tests.

** DONE Face lift
CLOSED: [2024-02-16 Fri 23:19]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240216_face-lift
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/6933cf4d
:EXPORT_HUGO_IMAGES: /posts/20240216_face-lift/shom-avatar-highres.png
:EXPORT_HUGO_MENU:
:END:
I created my online Avatar in the early 2000s using a Flash tool that someone made and I really wish I could remember more about it. It's been my online presence for over 20 years and it's almost like my real face. Fun fact: One of my co-worker's husband recognized me at a company social event solely from having seen my avatar on caller ID.

#+hugo: more
I've always wanted a higher resolution version and my friend just made one for me! He's getting started with a drawing application on his iPad and did such an excellent job and I'm delighted, thank you!!!

=BEFORE=
#+begin_export hugo
{{< figure src="/posts/20240216_face-lift/shomavatar.png" title="OG Avatar" alt="cartoon face with big eyes, offset toothy grin, mole on right cheek, and black hair, pixelated" align="center" width="" >}}
#+end_export

=AFTER=
#+begin_export hugo
{{< figure src="/posts/20240216_face-lift/shom-avatar-highres.png" title="High Resolution Avatar" alt="cartoon face with big eyes, offset toothy grin, mole on right cheek, and black hair" align="center" width="400px" >}}
#+end_export

** DONE Alacritty Auto Theme Switcher                  :linux:foss:alacritty:
CLOSED: [2024-02-13 Tue 21:28]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240213_alacritty-auto-theme-switcher
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/201f1274
:EXPORT_HUGO_IMAGES: /posts/20240213_alacritty-auto-theme-switcher/header.jpg
:EXPORT_HUGO_MENU:
:END:
I like and use the Alacritty terminal emulator, but it does not automatically follow the system theme. The issue tracker discussion made it clear this feature won't be supported, fair enough. And after switching to =TOML= and [[/posts/20240124_alacritty-toml-and-partial-imports][discovering partial imports]], I knew I could scratch my own itch. Someone [[https://www.christianfosli.com/posts/2024-on-colorscheme-changed/][wrote a rust tool]] which was helpful as a guide but I wanted something with low dependency. So I made a =bash= script and a =systemd= service and it was fun(?) to learn more about =dbus=.

So, =alacritty-auto-theme= was born which automatically switches themes with manual override possible, repo on [[https://github.com/shombando/alacritty-auto-theme][Github]] and [[https://git.sr.ht/~shom/alacritty-auto-theme][Sourcehut]].

#+hugo: more
Originally this was a long blog post but I moved the breakdown on [[/start/writing-system-automation-script-and-service][how to make a small script and write a systemd service]] with it. That article is more instructional and is written for an audience that might be interested in tweaking their system but does not necessarily have a technical background so explaining what is happening and why is going to be the focus.

** DONE Firefox scrollbar size                                 :foss:firefox:
CLOSED: [2024-02-08 Thu 12:48]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240208_firefox-scrollbar-size
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/dee21477
:EXPORT_HUGO_IMAGES: /posts/20240208_firefox-scrollbar-size/config-screenshot.jpg
:EXPORT_HUGO_MENU:
:END:
I don't like seeing the scrollbar until I want to see it. I want to see it when:
- I'm scrolling with an indication of how big the page is
- I want to grab the scrollbar with the mouse to move it to specific location
When I want to grab the scrollbar, I want it to be a big target to hit, not something I'm chasing around trying to click accurately on a 4K monitor.
#+attr_html: :caption Firefox about:config settings :alt Firefox settings showing widget.non-native-theme.scrollbar.override set to 50
[[./config-screenshot.jpg]]

Firefox allows you to customize this by going to ~about:config~ and then modifying =widget.non-native-theme.scrollbar.override=, you can also change the style. It only shows up when you scroll and only becomes chonky when you mouse over it. You can control how chonky it is, to your liking. You can also change the style if you would like a non-native style.
#+attr_html: :caption Firefox with chonky scrollbar :alt Firefox is shown with a chonky scrollbar with the mouse hovering over it and a snippet of a previous blog post is visible showing relatibe position in viewport
[[./chonky-scrollbar.jpg]]

** DONE filmPoster with Gum Hugo photo post bliss?                :hugo:foss:
CLOSED: [2024-02-04 Sun 18:49]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240204_filmposter-with-gum-hugo-photo-post-bliss
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/a6b91110
:EXPORT_HUGO_IMAGES: /posts/20240204_filmposter-with-gum-hugo-photo-post-bliss/header.jpg
:EXPORT_HUGO_MENU:
:END:
I didn't have a good process to add film photos to my Hugo static site with consistent tags to serve as metadata for camera, film, developer, format, etc. so I cobbled together a small Bash script to collect some input and create a folder as a Hugo `page bundle` but it was a very manual process still and the tag template soon became tedious to maintain.

I discovered [[https://github.com/charmbracelet/gum][Gum]] and decided to play with it to see if it would improve my post creation experience and it has been pretty good during my brief testing.

That's what lead to the creation of [[https://github.com/shombando/filmPoster][filmPoster]]: A Gum powered interactive Bash script to create Hugo film photo posts.
#+begin_export html
<video controls width="800">
  <source src="./filmPosterDemo.webm" type="video/webm" />
  <track kind="subtitles" src="alt_video_en.vtt" srclang="en" />
</video>
#+end_export
#+begin_src org :exports none :tangle content/posts/20240204_filmposter-with-gum-hugo-photo-post-bliss/alt_video_en.vtt
WEBVTT

1
00:00:00.000 --> 00:00:05.000
- Sorry, this is a poor solution to provide alt-text. Description of video follows:

2
00:00:05.000 --> 00:00:30.000
- Screencapture of a terminal window side by side with a browser window. The terminal is demonstrating an application that enters information about at photo like title, film, camera, etc. and then selects the file from a file picker. Once the process is completed the browser auto refreshes to show the new photo has been added to the grid and then the photo page is loaded showing the different tags via clicking a few tags it is demonstrated that they were generated and linked with other posts.
#+end_src
=Note:Alt-text provided as closed-caption=

** DONE How to get Started                                            :start:
CLOSED: [2024-02-02 Fri 02:37]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240202_how-to-get-started
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/8aae4e73
:EXPORT_HUGO_IMAGES: /posts/20240202_how-to-get-started/image.jpg
:EXPORT_HUGO_MENU:
:END:
Sometimes it's hard to get started with something new. Sure there are so many resources, almost too many resources, distilling just the essential information is difficult. Here I'm collecting the things I've learned over time, so if I were starting from scratch today, I could just jump in and get started.

These are not blog posts fixed in time so if something changes I hope to change the information inline without clarifying edits.

👆🏽 That's the new section I'm adding to the website. I have benefited immensely from people that have shared their knowledge so I want to capture and share things I've learned/am learning that's a bit more methodical than a drive by note just explaining a specific issue. I hope this also helps me write blog posts more freely because those are not guides and can be more 'footloose and care-free' (just like me saying that as an inside joke to myself).

I struggled with what to call the new section, since it's not really a step-by-step for every minute detail but it's also not skipping over the hurdles in trying to present a polished demo. It's just about getting started, but "getting started" doesn't fit with the single word menu structure so I asked a friend for some ideas:
- =Genesis=
- =Preamble=
- =Prologue=
That made me think of =Bootstrap= but ultimately I decided I'm really just going for jumping in to start something so a simple =Start= $XYZ made the most sense?

I did a lot of yak-shaving on this Hugo site, refactoring my org-mode file structure for ox-hugo, and finally my org-capture templates to make the process smoother. So much so, that I didn't get farther than the first paragraph of the first Start article/guide. However, I am pretty impressed with how flexible Hugo yet how simple Hugo is (and how well it's supported by ox-hugo). I keep replacing more pieces of the layout (now each section has it's own RSS feed) and edging closer to creating my own theme (if I do, I'll write a Start guide)!

** DONE Alacritty: TOML and partial imports                      :linux:foss:alacritty:
CLOSED: [2024-01-25 Thu 00:06]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240124_alacritty-toml-and-partial-imports
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/c72325dc
:EXPORT_HUGO_IMAGES: /posts/20240124_alacritty-toml-and-partial-imports/meme.jpg
:EXPORT_HUGO_MENU:
:END:
I have written before about using [[/posts/20220514_from-fish-on-gnome-terminal-to-zsh-with-starship-on-alacritty][Alacritty]] as my terminal and I've configured it using YAML. I've been a general fan of YAML, I like the way the syntax looks and there aren't too many brackets of any kind, if it had a line terminator, that'd be great. The downside is that it is indent dependent. But for the most part I'm comfortable with YAML and wherever an option is provided for using YAML, I pick it over TOML.

However, as of version 13 Alacritty is deprecating YAML in favor of TOML (they're providing a ~alacritty migrate~ command that works very well). So I decided to just get with the program instead of delay adoption. This comes with the unexpected side benefit of being able to do imports of one configuration file into another. I discovered this because [[https://sunny.garden/@benmo/111814384857896783][@benmo]] got me wondering how to change the theme of the terminal while in a remote SSH session.

The solution that TOML enable is to create a new configuration file which imports the standard configuration and then just overwrites (and/or adds) to the existing configuration. So I just made a new config file called alacritty-remote.toml:
#+begin_src toml
import=["~/.config/alacritty/alacritty.toml"]

[colors.primary]
background = "0x333333"
foreground = "0xD8DEE9"
#+end_src

Then I created a function in zsh called ~remoteshh~ to start a new Alacritty shell window with this new config file:
#+begin_src sh
function sshremote() {
	  alacritty --config-file ~/.config/alacritty/alacritty-remote.toml -e ssh $1 & disown
}
#+end_src

Now when I connect to a remote server over SSH instead of typing ~ssh server~ I type ~sshremote server~ and I get window with a different background color (I'll probably theme is more later).

After I told my friend about this whole YAML to TOML saga, he made this...
#+begin_export hugo
{{< exif src="meme.jpg" caption="I feel like we've both unlocked a new level of nerd." alt="Distracted boyfriend meme format with girl in red dress labeled TOML, boyfriend labeled SHOM, and girlfriend labeld YAML" showexif="false" >}}
#+end_export

** DONE URL shortening for blog links natively in Hugo      :foss:hugo:emacs:
CLOSED: [2024-01-21 Sun 00:36]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240121_url-shortening-for-blog-links-natively-in-hugo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/1ba87346
:EXPORT_HUGO_IMAGES: /posts/20240121_url-shortening-for-blog-links-natively-in-hugo/3D-strongest-link.jpg
:EXPORT_HUGO_MENU:
:END:
This blog post can also be found at [[/s/1ba87346][1ba87346]]. This short URL is designed to make sharing online more compact without having to use an external URL shortening service. The permalink for this post is 62 characters (plus base URL, everything following discounts the base URL), while the short URL is 11 characters. Every post will predictably be 11 characters since I'm using CRC32 hash of the permalink to generate the short link. My base domain is 8 characters including the dot so a fully qualified link will be 27 characters, which is acceptable. All the while resolving to a fully informative URL (date + topic).

Hugo provides an [[https://gohugo.io/content-management/urls/#aliases][alias functionality]] to add one or more alias to every page through the front matter. There's no built-in automation around this and I also use [[https://ox-hugo.scripter.co/][ox-hugo]] to generate my Hugo files from a single org file so I decided to add the functionality to the org-capture template that I have already customized to generate Hugo slugs for posts.

Generating a CRC32 hash is really straight-forward in Ubuntu (my build OS due to Emacs version requirement, yes it's heavy for CI/CD), it's just ~crc32 file.txt~ so a naive implementation would be:
#+BEGIN_SRC sh
echo "20240121_url-shortening-for-blog-links-natively-in-hugo" > slug.txt
crc32 slug.txt

ad734a45
#+END_SRC
But I didn't want transient files being created so I found this [[https://stackoverflow.com/questions/44804668/how-to-calculate-crc32-checksum-from-a-string-on-linux-bash#49446525][super hacky and delightful way]] of doing it:
#+BEGIN_SRC sh
echo -n "20240121_url-shortening-for-blog-links-natively-in-hugo" | gzip -1 -c | tail -c8 | hexdump -n4 -e ' '"%08x"'
1ba87346%
#+END_SRC
#+begin_export html
<style>
aside {
  padding-left: 0.5rem;
  margin-left: 20%;
  float: block-end;
  box-shadow: inset 5px 0 5px -5px #29627e;
  font-style: italic;
  font-size: medium;
  text-align: right;
  color: #29627e;
}
</style>
#+end_export
#+begin_aside
The file CRC32 is different from just the string, which totally makes sense but threw me off. I think the CRC for just the text makes more sense but either method would mitigate collisions if you stick to the same method for all links.
#+end_aside
So I made that into a script and glued it up with my org-capture template for Hugo.
#+BEGIN_SRC elisp
(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/"
							  (shell-command-to-string
							   (concat "~/dev/shom.dev/crc32Janky.sh " fname)))
#+END_SRC

As I mentioned in my previous post, my oldest draft is on that topic but since that's never getting published, most of it is the capture template.
#+begin_details :trim-post nil
#+begin_summary
Here's the full configuration for ox-hugo (click arrow to expand):
#+end_summary
#+BEGIN_SRC elisp
(use-package ox-hugo
  :straight t
  :config
  ;; Org capture template for Hugo posts
  ;; https://ox-hugo.scripter.co/doc/org-capture-setup/
  (with-eval-after-load 'org-capture
	(defun org-hugo-new-subtree-post-capture-template ()
	  "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
	  (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
			 (fname (concat (format-time-string "%Y%m%d_") (org-hugo-slug title))))
		(mapconcat #'identity
				   `(
					 ,(concat "\n* DRAFT " title)
					 ":PROPERTIES:\n:EXPORT_FILE_NAME: index"
					 ,(concat ":EXPORT_HUGO_BUNDLE: " fname)
					 ,(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases /s/"
							  (shell-command-to-string
							   (concat "~/dev/shom.dev/crc32Janky.sh " fname)))
					 ,(concat ":EXPORT_HUGO_IMAGES: /posts/" fname "/image.jpg")
					 ":EXPORT_HUGO_MENU:\n:END:"
					 "%?\n")          ;Place the cursor here finally
				   "\n")))

	(add-to-list 'org-capture-templates
				 '("h"                ;`org-capture' binding + h
				   "Hugo post"
				   entry
				   ;; It is assumed that below file is present in `org-directory'
				   ;; and that it has a "Blog Ideas" heading. It can even be a
				   ;; symlink pointing to the actual location of all-posts.org!
				   (file+olp "~/dev/shom.dev/content.org" "Content")
				   (function org-hugo-new-subtree-post-capture-template)
				   :prepend t))))
#+END_SRC
#+end_details
#+begin_export html
<br />
#+end_export

Now I need to make a nice fancy little sharing link and icon that is rendered on every page and go back and update the old posts. The downside of this approach is that it doesn't generate all shortened links on build only at capture, which is generally better for not breaking links.

I don't know much about theme-templating (have a few overrides and shortcodes) or using page data to create new elements so I'll appreciate pointers and help in making my aliases as nice share-links automatically rendered by Hugo.

#+begin_export html
<p class="attribution">Share card image: "<a target="_blank" rel="noopener noreferrer" href="https://www.flickr.com/photos/86530412@N02/8253443979">3D Strongest Link</a>" by <a target="_blank" rel="noopener noreferrer" href="https://www.flickr.com/photos/86530412@N02">ccPixs.com</a> is licensed under <a target="_blank" rel="noopener noreferrer" href="https://creativecommons.org/licenses/by/2.0/?ref=openverse">CC BY 2.0 <img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg" style="height: 1em; margin-right: 0.125em; display: inline;" alt="CC icon"></img><img src="https://mirrors.creativecommons.org/presskit/icons/by.svg" style="height: 1em; margin-right: 0.125em; display: inline;" alt="By icon of a stick figure person"></img></a>. </p>
#+end_export
** DONE Tech debt for personal projects                           :foss:rant:
CLOSED: [2024-01-20 Sat 01:16]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20240119_tech-debt-for-personal-projects
:EXPORT_HUGO_IMAGES: /posts/20240119_tech-debt-for-personal-projects/Deal-with-the-tech-debt_by_psd-on-Flickr_CCbySA.jpg
:EXPORT_HUGO_MENU:
:END:
A great thing about Free and Open Source Software (FOSS) is that anyone can create a thing, share it with others, and anyone else can contribute and make it better. It's also great to solve a problem for yourself and just share it with the world just in case it helps someone else. I know I have benefited from both those modalities, so I have tried to share a few tools and knowledge on this blog and through my repos. So that's the ideal scenario, but there is a downside that I hadn't quite grasped before I fell into it... personal tech debt.

*** Scratch your own itch "software"
It's one thing to write a janky script to solve your problem but a whole different ball-game to share it with the world. This is after you've overcome the first hurdle: the notion that others would have done it better and smarter, fully embracing the benefits and vulnerability of working in the open. Sharing with the world means that you have to fix things properly and shimming a problem isn't always an option. Getting great input from others is awesome but also overwhelming because I don't want to just implement something without understanding what it is. The genesis of some of these "projects" was to "scratch your own itch" but once I put it out there, I have a strong desire to not put out crap, which means finding the time and motivation to learn nuances and do it right. Ultimately that means the project quickly becomes unmaintained.

*** A really-nice-post™
The same goes for writing blog posts, "ohhh, I had to read a bunch of old forum threads which are all just a little outdated but I figured it out so I'll make a really-nice-post™ to help others". Well, finding time and motivation to write that post is even scarcer. Now the itch has been scratched and unless it's a really-nice-post™ then there's really no point in writing it at all since the information is technically out there. Such a post has a high bar for quality, it must:
- Provide clear context and describe the problem
- Layout out potential solutions
- Describe the chosen solution
- Provide detailed steps
  - Code snippets in fences so they're rendered with highlighting
  - Screenshots where applicable
- Links and credit to all the sources
So it's not much of a surprise that such a post is just as well-intentioned as it is non-existent.

*** The three mes
There's a past-me, the now-me, and the future-me and they're almost never happy with each other. The now-me always expected more of past-me and has high ambition for future-me. Given that the only me that has agency now is now-me, I've decided to... rant. To be fair to past-me, the only reason I'm ranting now is because I finally updated [[https://github.com/shombando/keyoxidizer][Keyoxidizer]][^fn:1], hopefully future-me is happy that there was an update and this post was published (and hopefully, that there was a shift in attitude, but let's not jump ahead).

*** Keyoxidizer
I made Keyoxidizer to scratch my own itch, sharing it with the world was exciting as it looked like some people got some use out of it. GPG identity management isn't that straight forward and I was learning by doing. Sharing with the world paid-off because I got great feedback and a couple of contributions. But some of the feedback about best practices was a bit over my head. I understood enough to know that what I had implemented (RSA) was fine but neither modern nor performant. But I didn't understand the feedback enough to directly translate that to the GPG unattended key generation config format (it's not straight-forward, or so I thought because it's complicated)! Also I wanted to learn and make other improvements on handling this, like giving users choice of algo... so predictably it didn't get done. It fell into the really-nice-post™ black-hole.

Ultimately, what helped was to just narrow my focus on a specific implementation[^fn:2]. Something that I would have easily done in a work context, but doing it for a personal project is difficult because there are so many competing goals[^fn:3].

*** Personal tech-debt
So why did it take 700+ words to get to the titular point? Because I'm still fighting against past-me's desire to have a really-nice-post™[^fn:4] and future-me's concern that this is all rubbish anyway.

I have been doing an increasingly better job of keeping personal notes on hobbies, highlights from articles, archiving links and documents that have reference potential, etc.[^fn:5] for months. I'm trying to build on that habit to decrease my personal tech-debt. Capturing information when I think of it and do a quick search so I can come back to it more easily later. Biting off smaller chunks and getting it running; basically, everything I would do at work but for hobbies? I don't want to make my hobbies a chore but it is nice to see progress and completion. I'm still uncomfortable with the idea that my personal tech-debt can become someone's problem if I share what I'm doing and they decide to use it. But the alternative might be [[https://xkcd.com/979/][DenverCoder9]], so doing work out in the open and not producing a really-nice-post™ might be okay?

#+begin_export hugo
{{< exif src="Deal-with-the-tech-debt_by_psd-on-Flickr_CCbySA.jpg" caption="Deal with the tech debt" alt="Pen drawing on a post-it note of a grim reaper with the text above reading DEAL WITH THE TECH DEBT" showexif="false" >}}
#+end_export
#+begin_export html
<p class="attribution">"<a target="_blank" rel="noopener noreferrer" href="https://www.flickr.com/photos/25996369@N07/8627787038">Deal with the tech debt</a>" by <a target="_blank" rel="noopener noreferrer" href="https://www.flickr.com/photos/25996369@N07">dafyddbach</a> is licensed under <a target="_blank" rel="noopener noreferrer" href="https://creativecommons.org/licenses/by-sa/2.0/?ref=openverse">CC BY-SA 2.0 <img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg" alt="CC icon" style="height: 1em; margin-right: 0.125em; display: inline;"></img><img src="https://mirrors.creativecommons.org/presskit/icons/by.svg" alt="By icon, stick figure person"style="height: 1em; margin-right: 0.125em; display: inline;"></img><img src="https://mirrors.creativecommons.org/presskit/icons/sa.svg" alt="SA icon" style="height: 1em; margin-right: 0.125em; display: inline;"></img></a>. </p>
#+end_export
[^fn:1]: Linking to Github mirror because [[https://codeberg.org/shom/keyoxidizer][Codeberg]] and [[https://git.sr.ht/~shom/keyoxidizer][Sourcehut]] have been dealing with DDoS attacks.
[^fn:2]: changing the ~Key-Type: EDDSA~ and specify the ~Key-Curve: ed25519~.
[^fn:3]: I want to learn, yak-shave, experiment, be present instead of being results oriented and enjoy the experience.
[^fn:4]: Fun fact - the oldest incomplete draft on this blog is from 2021-10-25 about org-capture template for Hugo, it wasn't nice enough to finish and post but would have helped a more recent past-me had I finished writing it.
[^fn:5]: I've been using [[https://logseq.com/][Logseq]] for it (org data format) but just using the `#` notation to create pages and links using the journal as a front-end for note capture.
** DONE Film Photography                   :film:
CLOSED: [2023-12-07 Thu 03:06]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20231207_film-photography
:EXPORT_HUGO_IMAGES: /posts/20231207_film-photography/cameras.jpg
:EXPORT_HUGO_MENU:
:END:
There's a new section on the website for [[/film][Film Photography]] that is being built by Hugo but independent of the blogging workflow. I'll create a new entry documenting how that is setup in a follow-up post.

I'm not sure if the film photos should be a on the main blog feed but without realizing it I have flooded the RSS feed, perhaps it should be on it's own feed (don't want to inconvenience the non-existent readership of this blog!). The other thing that might require some thinking/restructuring is whether to use categories to get a better handle on taxonomies. Hugo does not do hierarchical tags but posts tagged with ~camera~ and ~camera/canonQL17Giii~ will show up under the ~camera~ tag, which is nice but a drill down would be preferable (without extensive JavaScript magic). Categories could serve as the drill down but I don't know if that added convolution has any practical benefits.

For now, I'll just leave a family portrait of the range finders: Olympus 35 SP, Canon QL17 Giii, and Olympus 35RC.

#+begin_export hugo
{{< exif src="cameras.jpg" caption="Family photo" alt="Three range finder cameras all with silver tops and black bodies are lined up left to right, larger to smaller on a wooden table top with great walnut figure. The cameras left to right are: Olympus 35 SP, Canon QL17 Giii, and Olympus 35RC" showexif="false" >}}
#+end_export

** DONE More eagles                                                  :camera:
CLOSED: [2023-02-05 Sun 17:28]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20230205_more-eagles
:EXPORT_HUGO_IMAGES: /posts/20230205_more-eagles/Swoop.jpg
:EXPORT_HUGO_MENU:
:END:

I went back to look for eagles again and found that the lake/pond/ditch had frozen over but there were still a couple of eagles milling about and several black birds.

Lessons learned:
- 1/1600 of second still pretty slow for capturing even a big bird in flight.
- ISO 400 is pretty reliable on my camera and darktable matches the noise profile, doing a decent job of noise removal.
- Busy backgrounds are hard to work with but they aren't show stoppers.
- JPEG is a terrible image format and makes the photos look much worse.

#+begin_export hugo
{{< exif src="Flight.jpg" caption="Late afternoon flight" alt="A bald eagle is gliding against a backdrop of leafless trees. The eagle's wings are out stretched and the head is in almost profile view and well lit" showexif="true" >}}
#+end_export

#+begin_export hugo
{{< exif src="Swoop.jpg" caption="Make way!" alt="A bald eagle is swooping down over a frozen body of water and has its wings out stretched and talons forward. Several blackbirds are scattering due to the arrival of the eagle captured in various poses of flight tyring to vacate the area." showexif="true" >}}
#+end_export

** DONE Eagles in the "backyard"                                     :camera:
CLOSED: [2023-01-20 Fri 13:11]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20230120_eagles-in-the-backyard
:EXPORT_HUGO_IMAGES: /posts/20230120_eagles-in-the-backyard/EagleInFlight.jpg
:EXPORT_HUGO_MENU:
:END:
Took some photos of bald eagles fairly close to my house, thanks to a tip from a friend. I never think to go exploring around home whereas I would have hiked miles on vacation to see wildlife. This is a great proof and reminder to see your "backyard" with fresh eyes.

Photos captured with a Sony A7C with a Sigma 100-400.
#+begin_export hugo
{{< exif src="EagleInFlight.jpg" caption="" alt="A bald eagle is flying low on a harvested field with brown straw and dirt, trees and yellow grass are in the background. It's winter so the trees don't have any foliage and their limbs are dark and light streaks. The eagle's wings are on a downstroke and it is flying towards two pigeons moving so fast that they're blurry." showexif="true" >}}
#+end_export

#+begin_export hugo
{{< exif src="EagleAndCrow.jpg" caption="" alt="A juvenile eagle is perched on some fallen branches next to shallow water. A crow is flying away from the spot with it's wings spread midstroke, appears to have been chased away by the eagle who is 4 times as large." showexif="true" >}}
#+end_export

#+begin_export hugo
{{< exif src="EaglesInTree.jpg" caption="" alt="A tree without any leaves in front of a similarly treeless forest has three bald eagles on it. The most clearly visible one is on the top with a gray sky as the backdrop with its head tilted such that one eye is looking towards the camera. The second eagle is on the bottom right with more trees as a backdrop facing to the right with its head turned away from the camera. The third eagle is on the bottom left against an even busier background, it's a juvenile quite dark and does not have the characteristic white head of an adult." showexif="true" >}}
#+end_export

** DONE Trigger site rebuild to update copyright
CLOSED: [2023-01-01 Sun 00:37]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20230101_trigger-site-rebuild-to-update-copyright
:EXPORT_HUGO_IMAGES: /posts/20230101_trigger-site-rebuild-to-update-copyright/image.jpg
:EXPORT_HUGO_MENU:
:END:
I just saw [[https://mspsocial.net/@vkc/109612388794875976][this post from VKC]] about updating the footer of your website, meaning the copyright section. It occurred to me that it's a manual process for my fully auto-generated blog, so I never think about the copyright info in the footer. Static sites do kind of have a shortcoming of sort.

I still have my photos on a WordPress blog and it automatically updates the copyright, which came up, very recently, in a conversation with a friend and yet I never thought about my Hugo site (this one). I wonder if I need a build pipeline that triggers at midnight UTC every year just to update the footer!? No.

I wanted to scribble this thought quickly to first, trigger a rebuild and secondly, to put a commitment to finally investigate the Creative Commons licenses and choose an appropriate license site-wide. I would like for any information/photo/art to be usable for non-commercial use with attribution and maintaining an equivalent license.
=======

** DONE Let's Encrypt with acme.sh behind CPanel           :linux:foss:
CLOSED: [2022-11-09 Wed 23:43]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20221109_let-s-encrypt-with-acme-dot-sh-behind-cpanel
:EXPORT_HUGO_MENU:
:END:
I have access to webhosting through the generosity of a friend and his hosting provider used CPanel and offers paid SSL certificates but does allow for SSH access. So, the best and free way to get SSL certificates is getting certificates from [[https://letsencrypt.org/][Let's Encrypt]] using [[https://github.com/acmesh-official/acme.sh][acme.sh]].

While I've had this setup for years and it works great, it's a real issue if it breaks because I do the sad thing of hitting up in the terminal history #somuchshame. So I'm documenting it for myself and anyone else that might find this useful.

1. Clone acme.sh from Github and cd into folder.
2. Issue the certificate with:

   ~./acme.sh --issue --webroot /home/USERNAME/public_html/ --domain example.org --deploy-hook cpanel_uapi~
3. Deploy the certificate if the deploy hook doesn't do its job properly

   ~./acme.sh --deploy --domain example.org --deploy-hook cpanel_uapi~
4. Setup the cron job so it will renew automatically

   ~./acme.sh --cron~

Another win for FOSS and SSH access on a Linux box.

In dire situations, you can actually go to CPanel and manually enter the certificate information that acme.sh generates. The acme.sh folder will contain a sub-directory named example.org (whatever your domain name is), inside that you'll need to map the contents of the following files to the following fields:

| File Name       | CPanel Field                             |
| example.org.cer | Certificate: (CRT)                       |
| example.org.key | Private Key (KEY)                        |
| ca.cer          | Certificate Authority Bundle: (CABUNDLE) |

=NOTE=: If you're having issues with the ZeroSSL.com CA that acme.sh now defaults to, you can edit =example.org.conf= and specify the api using:

~Le_API='https://acme-v02.api.letsencrypt.org/directory'~

=Editorial note=: The API isn't French, it's Le for Let's Encrypt... capitalizing acronyms in variable names is always contentious, snake case should makes it easier. But mixing usage seems like the worst of all choices. Le but not Api? Why not LE_API or le_api.

=Update=: [[https://fosstodon.org/@benoitj/109319882279718334][@benoitj makes another great point]], LE is not providing any additonal context, acme or api (regardless of capitalization) would make the variable name better.

** DONE FOSS Woodworking                                   :foss:woodworking:
CLOSED: [2022-10-19 Wed 01:50]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20221019_foss-woodworking
:EXPORT_HUGO_IMAGES: /posts/20221019_foss-woodworking/3Dmodel.png
:EXPORT_HUGO_MENU:
:END:
I built a small table this weekend and realized that the thing I desperately need if I'm going to build more stuff is a workbench. There are a TON of workbench options to pick from, which is great. But, I didn't want to get into picking and choosing dimensions and features on the fly, that was asking for a disaster. So I decided to take the plunge and learn [[https://www.freecadweb.org/][FreeCAD]]. There are excellent YouTube videos targeted at [[https://www.youtube.com/watch?v=jfNBfdIpzDQ&list=PL9VmYdF0sBykAJiMAqIxzTTti3i-kvarx]["FreeCAD for Woodworkers"]] which was a delightful surprise. Being a novice at woodworking and CAD is not the best combination, but you gotta start somewhere.

I decided to start backwards by doing the build first and the design later. Just like I built a small table physically, it seemed like a good idea to model something simpler. I was able to learn enough FreeCAD in one evening to make this model:
#+begin_export hugo
{{< exif src="3Dmodel.png" caption="Simple table modeled in FreeCAD" alt="A 3D render of a small table with two boards joined lengthwise to make a top with rectangular legs and a bottom shelf with two smaller boards" showexif="false" >}}
#+end_export

Had I made the model before the bottom shelf might have turned out better, just maybe, but something else would have provided "an opportunity for improvement"... there are many ways to get better, exciting!
#+begin_export hugo
{{< exif src="PineTable.jpg" caption="Small pine table" alt="A small table made of light colored pinewood construction lumber with a table top and a bottom shelf made from similar colored thin boards. You can see several fastening screws and not everything is quite plumb but functional" showexif="false" >}}

I'm looking forward to learning more tricks in FreeCAD like creating/exporting cutlists, 3D renders with wood texture and lighting effects. The ecosystem is quite rich!
#+end_export

** DONE Fiddly Fig                                           :art:watercolor:
CLOSED: [2022-10-09 Sun 23:40]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20221009_fiddly-fig
:EXPORT_HUGO_IMAGES: /posts/20221009_fiddly-fig/fiddlyfig.jpg
:EXPORT_HUGO_MENU:
:END:
Haven't done any water coloring in months and this fiddly fig wasn't the easiest one to start with. My friend had a book of botanical watercolors and the fiddly fig was one of the choices. Turns out I have a hard time drawing non standard leaves🍃 that overlap. I hadn't originally planned to sketch the outline but after I finished (messing up) coloring the leaves, it all looked like blobs in need of structure. The actual instructions were a bit confusing but after doing it poorly I now understand a better way to approach it: paint a lighter base layer of green, wet on dry, and then at the base of the leaf inject some darker green, wet on wet.

#+begin_export hugo
{{< exif src="fiddlyfig.jpg" caption="Fiddly fig water color" alt="Water color of a fiddly fig plant, deeper green thickish leafy leaves on a brown stem potted in a light brown vessel with the date noted as 20221009" showexif="false" >}}
#+end_export

It was a fun way to spend an evening with friends and reminded me to paint more. Only the drawing/sketching is stressful the painting part is fun!

** DONE Fun with pipes                                                :linux:
CLOSED: [2022-09-19 Mon 19:15]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20220919_fun-with-pipes
:EXPORT_HUGO_IMAGES: /posts/20220919_fun-with-pipes/mindmap.png/
:EXPORT_HUGO_MENU:
:END:

Just came across this excellent post: [[https://unixsheikh.com/tutorials/poor-mans-mind-mapping-tool-with-just-the-terminal.html][Poor mans mind mapping tool with just the terminal]] from @fullstackthaumaturge (account no longer exists) toot on Fosstodon. The whole premise is that you can do a lot things with the UNIX philosophy of using files for everything and manipulating them with simple tools that do one thing but do it well. So if you wanted a mindmap then just ~touch~ files in a folder hierarchy and then print it out with ~tree~.

I found that amusing and thought, "well what if you don't want to clutter your file-system and wanted to zip up your mindmap?" Would you be able to get a nice ~tree~ output without unzipping the archive? Well turns out you can do just that by piping from ~zipinfo~ to ~tree~, which supports reading from a file (instead of reading a file-system) using the =--fromfile= argument.

So you end up with this command:
#+begin_src shell
  zipinfo -1 mindmap.zip | tree --fromfile $1 -C -r
#+end_src
and this output:
#+begin_src shell
.
`-- mindmap
    |-- top
    |-- first
    |   |-- second
    |   `-- first
    `-- 2
        |-- 2
        `-- 1

3 directories, 5 files
#+end_src
#+begin_export hugo
{{< exif src="mindmap.png" caption="Pretty terminal output with colors from the '-C' flag" alt="Screenshot of the same output as the preceding code block above with terminal colors." showexif="false" >}}
#+end_export

I'm not suggesting anyone do this, but it's a fun example of UNIX principles and pipes.

** DONE Markdown anchor linking on Github                        :emacs:foss:
CLOSED: [2022-09-18 Sun 02:11]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20220917_markdown-anchor-linking-on-github
:EXPORT_HUGO_IMAGES: /posts/20220917_markdown-anchor-linking-on-github/user-anchors-as-p.jpg
:EXPORT_HUGO_MENU:
:END:
I've been using =org-transclusion= for an [[../20211230_inverse-literate-config-via-org-transclusion/]["inverse literate"]] Emacs config and tangling all the config chunks on save and exporting it as a markdown file. This has worked fairly well except for the fact that org-export creates =org-export= regenerates ids for all the headings which creates noise in the git commit history and also in-page anchors can't be reliably linked to a specific part of the document (independent of the git forge's markdown parsing implementation).

In order to remedy that without relying on a full-featured package without additional capabilities, I decided to adapt a snippet of [[https://github.com/alphapapa][@alphapapa]]'s [[https://github.com/alphapapa/unpackaged.el][unpackaged configuration]], which advices the export to create unique anchors that won't change between exports (unless the headings themselves have been changed). However, this is ended being the beginning of the solution and how I discovered GitHub renders markdown internal links to HTML is not consistent with how Sourcehut does it.

#+begin_details
#+begin_summary
I added the following snippet into my =config.org= file's ~after-save-hook~:
#+end_summary
#+begin_src emacs-lisp
  ;;usefulanchors_begin
;; From @alphapapa's unpackaged repo https://github.com/alphapapa/unpackaged.el#export-to-html-with-useful-anchors
(use-package ox
  :config
  (define-minor-mode unpackaged/org-export-html-with-useful-ids-mode
    "Attempt to export Org as HTML with useful link IDs.
Instead of random IDs like \"#orga1b2c3\", use heading titles,
made unique when necessary."
    :global t
    (if unpackaged/org-export-html-with-useful-ids-mode
        (advice-add #'org-export-get-reference :override #'unpackaged/org-export-get-reference)
      (advice-remove #'org-export-get-reference #'unpackaged/org-export-get-reference)))

  (defun unpackaged/org-export-get-reference (datum info)
    "Like `org-export-get-reference', except uses heading titles instead of random numbers."
    (let ((cache (plist-get info :internal-references)))
      (or (car (rassq datum cache))
          (let* ((crossrefs (plist-get info :crossrefs))
                 (cells (org-export-search-cells datum))
                 ;; Preserve any pre-existing association between
                 ;; a search cell and a reference, i.e., when some
                 ;; previously published document referenced a location
                 ;; within current file (see
                 ;; `org-publish-resolve-external-link').
                 ;;
                 ;; However, there is no guarantee that search cells are
                 ;; unique, e.g., there might be duplicate custom ID or
                 ;; two headings with the same title in the file.
                 ;;
                 ;; As a consequence, before re-using any reference to
                 ;; an element or object, we check that it doesn't refer
                 ;; to a previous element or object.
                 (new (or (cl-some
                           (lambda (cell)
                             (let ((stored (cdr (assoc cell crossrefs))))
                               (when stored
                                 (let ((old (org-export-format-reference stored)))
                                   (and (not (assoc old cache)) stored)))))
                           cells)
                          (when (org-element-property :raw-value datum)
                            ;; Heading with a title
                            (unpackaged/org-export-new-title-reference datum cache))
                          ;; NOTE: This probably breaks some Org Export
                          ;; feature, but if it does what I need, fine.
                          (org-export-format-reference
                           (org-export-new-reference cache))))
                 (reference-string new))
            ;; Cache contains both data already associated to
            ;; a reference and in-use internal references, so as to make
            ;; unique references.
            (dolist (cell cells) (push (cons cell new) cache))
            ;; Retain a direct association between reference string and
            ;; DATUM since (1) not every object or element can be given
            ;; a search cell (2) it permits quick lookup.
            (push (cons reference-string datum) cache)
            (plist-put info :internal-references cache)
            reference-string))))

  (defun unpackaged/org-export-new-title-reference (datum cache)
    "Return new reference for DATUM that is unique in CACHE."
    (cl-macrolet ((inc-suffixf (place)
                               `(progn
                                  (string-match (rx bos
                                                    (minimal-match (group (1+ anything)))
                                                    (optional "--" (group (1+ digit)))
                                                    eos)
                                                ,place)
                                  ;; HACK: `s1' instead of a gensym.
                                  (-let* (((s1 suffix) (list (match-string 1 ,place)
                                                             (match-string 2 ,place)))
                                          (suffix (if suffix
                                                      (string-to-number suffix)
                                                    0)))
                                    (setf ,place (format "%s--%s" s1 (cl-incf suffix)))))))
      (let* ((title (org-element-property :raw-value datum))
             (ref (replace-regexp-in-string "%.." "-" (url-hexify-string (substring-no-properties title)))) ;replace all encoded characters with dashes
             (parent (org-element-property :parent datum)))
        (while (--any (equal ref (car it))
                      cache)
          ;; Title not unique: make it so.
          (if parent
              ;; Append ancestor title.
              (setf title (concat (org-element-property :raw-value parent)
                                  "--" title)
                    ref (url-hexify-string (substring-no-properties title))
                    parent (org-element-property :parent parent))
            ;; No more ancestors: add and increment a number.
            (inc-suffixf ref)))
        ref))))
;;usefulanchors_end
#+end_src
#+end_details

#+begin_export hugo
{{< exif src="github-not-linking-hexcoded.png" caption="GitHub's internal linking works but hex coded does not" alt="Screenshot of Readme.md file with source insepctor open in Firefox showing the actual header anchor is GitHub's internal linking and there's separate <p> with the user exported anchor from markdown." showexif="false" >}}
#+end_export
=NOTE:= actual header anchor is GitHub's internal linking and there's separate <p> with the user exported anchor from markdown, just interesting.

Turns out that GitHub won't do anchors with any non-alphanumeric links even if they're properly hex-coded. I had to modify the function which creates the unique slugs because by default it hex encodes the url, which is the "correct/smart" thing to do and Sourcehut happily renders that. But GitHub generates its own slugs which removes all non-alphanumeric characters (which makes the slug less readable, I prefer more readable urls).
#+begin_src emacs-lisp
  (replace-regexp-in-string "%.." "-" (url-hexify-string (substring-no-properties title)))
#+end_src

#+begin_export hugo
{{< exif src="user-anchors-as-p.png" caption="All non-alphanumeric replaced with dashes" alt="Similiar to other screenshot except anchor words are dash separated. Screenshot of Readme.md file with source insepctor open in Firefox showing the actual header anchor is GitHub's internal linking and there's separate <p> with the user exported anchor from markdown." showexif="false" >}}
#+end_export

Another excellent example of how [[/tags/foss][#foss]] enables these customizations by empowering the user.

** DONE Bonaire Art                                              :art:travel:
CLOSED: [2022-05-30 Mon 11:26]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220530_bonaire-art
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:EXPORT_HUGO_IMAGES: "/posts/20220530_bonaire-art/bonaire.jpg"
:END:
I was privileged to visit Bonaire in the Dutch Caribbean last week. While the whole reason for the trip was scuba diving (the entire island is essentially a dive site, just walk out into ocean in any direction), I also enjoyed the downtown area and found the art very charming. Here are a few pieces that caught my eye:

#+begin_export hugo
{{< exif src="bonaire.jpg" caption="Bonaire" alt="A sign painted on a wall reading Bonaire with a red heart painted between bon and aire. The red heart has the shape of the island inlayed in white." showexif="false" >}}
#+end_export

My favorite mural was definitely this whimsical scene of this mural of a guy vibin' with some chill goats and playing his ukulele. The island has a lot of wild/stray goats and they're definitely quite chill and the baby goats are super cute, kid you not! The [[https://dodiciartproject.com/][artist is Dodici]] and has a very unique style.
#+begin_export hugo
{{< exif src="goats.jpg" caption="Dodici's goats" alt="Street mural of a man wearing a straw hat, red shirt, blue shorts, reclining while playing a ukuele while three goats surround him chewing leaves with funky expressions." showexif="false" >}}
#+end_export

The island is also famous for its flamingos grazing in the salt flats. Bonaire is a sea-salt producing island and there are huge mounds of salt that are stacked before shipping, all of that area is a good hang for flamingos. I was lucky to get to see some flamingos up close while at the Washington Slagbaai National Park. But I think I saw a lot more flamingo art, which was also great.
#+begin_export hugo
{{< exif src="flamingos.jpg" caption="Colony of Flamingos" alt="Wall mural of a flock of flamingos standing and grazing in the salt flats. Only one of them is standing on one leg, the classic pose." showexif="false" >}}
#+end_export

#+begin_export hugo
{{< exif src="saltmounds.jpg" caption="Flamingos take flight over the salt mounds" alt="Wall mural of four flamingos at different distances away from the observer take flight with the salt mounts in the background and the pink salt flats in the foreground." showexif="false" >}}
#+end_export

I enjoyed the simple style of this mermaid and the paint colors effectively capture all the hues of the waters around Bonaire.
#+begin_export hugo
{{< exif src="mermaid.jpg" caption="Mermaid" alt="Outline of a mermaid with the middle filled with shades of blue and green paint." showexif="false" >}}
#+end_export

Dushi means all the things in life that are good and sweet. The artist tag is @kayakorsou but I wasn't able to find an online presence.
#+begin_export hugo
{{< exif src="hummingbird.jpg" caption="Life is dushi in Bonaire" alt="Wall mural of an underwater scene with corals and fish with a mermaid floating and taking the scene in. On the right side there's a layer of stripes with a massive hummingbird seeming to hold up a sign reading 'dushi Bonaire @kaya korsou'" showexif="false" >}}
#+end_export

We can't end without yet another cute flamingo!
#+begin_export hugo
{{< exif src="flamingo.jpg" caption="Cute cartoony flamingo" alt="A flamingo painted on a wall with more of a cartoony style with big pretty eyes and the classic standing on one leg pose." showexif="false" >}}
#+end_export

** DONE From fish on Gnome Terminal to zsh with Starship on Alacritty :foss:linux:alacritty:
CLOSED: [2022-05-14 Sat 17:01]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220514_from-fish-on-gnome-terminal-to-zsh-with-starship-on-alacritty
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:END:
*** Gnome Terminal and fish
I have been using the default Gnome Terminal with the [[https://fishshell.com/][fish shell]] for a long time and it has served me well. Since =fish= provides a lot of functionality out of the box (including meta information about git repos in the prompt), I have stuck with it for the convenience. However, there is ONE major downside to fish; it is not POSIX compliant.

*** Why ditch fish?
See what had happened was... Non-POSIX compliant wasn't a big problem until I found myself writing a couple helper functions with =fish= syntax. This was a proverbial red-flag since =fish= becomes a hard dependency for all my systems going forward. This coupled with the how =fish= saves aliases (as separate functions when you call ~funcsave aliasname~) which I always found a bit tedious led me to finally think about moving to =zsh=.

*** What would I miss most from fish and Gnome Terminal?
The baseline against which I'm making this list is default =bash= on Ubuntu based systems, which is what I've had the most exposure to. So compared to that experience:
- Right off the bat, I like =fish='s default prompt and never felt the need to customize it because it showed the current path and for git repos shows the current branch.
- Completions! The fish completions are great and the history sub-string search is excellent.
- Syntax highlighting of commands as you type so you can easily spot typos as they happen.
- As for Gnome Terminal, I wouldn't really miss anything assuming I could theme the terminal a bit. What I wouldn't miss is the lack of a configuration file that could be added to my other dotfiles.

While this list serves as the basis for the requirements of the new tool-chain, the top requirement was plain-text based configuration management, which can be placed under version control. The other very soft requirement was tools developed using [[https://www.rust-lang.org/][Rust]]. I've done a few "hello world" things in Rust and want to continue learning more and figured that using more Rust based tools is a good path to learning and contributing. With all that in mind, I landed on [[Prompt: starship]], [[Terminal: Alacritty]], and [[Shell: zsh]].

*** Prompt: starship
I decided to separate the prompt from the shell with [[https://starship.rs/][Starship]]. =starship= is highly customizable but it does everything I want from it out of the box; which is, cleanly and minimally replicate features of the =fish= prompt. There are a lot of "themes" and configurations which I'm sure I'd love to tweak and [[https://www.youtube.com/watch?v=AbSehcT19u0][yak-shave]] someday, but I enjoy the out of box experience. To fully take advantage of the default configuration, you need a nerd font (a font that has been patched with icons that are often used to represent software tools/concepts/applications). I'm a fan of the JetBrains Mono and there is a [[https://github.com/ryanoasis/nerd-fonts?tab=readme-ov-file#patched-fonts][patched nerd font variant]].

*** Terminal: Alacritty
I have seen =Alacritty= getting praised for being fast, functional, configurable, and it being cross-platform tool written in Rust was all I needed to land on it. Some of the speed tests are pretty impressive, the configuration is very straight forward, and there are tons of resources so I won't delve into things that have been covered very well everywhere.

One big advantage of Alacritty that I don't see touted often is a very keyboard focused workflow. I especially enjoy the vim-like visual mode (bound to =CTRL= + =SPACE= by default) which allows navigating within the buffer, searching the output, and making text selections and copying from anywhere in the buffer all with the familiar vim keybindings.

Here's my minimal =Alacritty= configuration:

#+begin_src yaml
  # Configuration for Alacritty, the GPU enhanced terminal emulator.
  window:
    # Window dimensions (changes require restart)
    padding:
      x: 10
      y: 5
    decorations: none
    opacity: 0.85

  # Font configuration
  font:
    size: 14.0
    normal:
      family: JetBrains Mono Nerd Font
      style: Regular

  # Colors (Nord)
  colors:
    # Default colors
    primary:
      background: '0x2E3440'
      foreground: '0xD8DEE9'

    # Normal colors
    normal:
      black:   '0x3B4252'
      red:     '0xBF616A'
      green:   '0xA3BE8C'
      yellow:  '0xEBCB8B'
      blue:    '0x81A1C1'
      magenta: '0xB48EAD'
      cyan:    '0x88C0D0'
      white:   '0xE5E9F0'

  cursor:
    style:
      shape: Beam
    vi_mode_style: Underline
    thickness: 0.25

  # Live config reload (changes require restart)
  live_config_reload: true

  key_bindings:
    - { key: N,              mods: Shift|Control,                action: SpawnNewInstance      }
    - { key: Space,          mods: Control, mode: ~Search,       action: ToggleViMode          }
    - { key: Return,         mods: Alt,                          action: ToggleFullScreen      }
#+end_src

*** Shell: zsh
This post is getting to be quite long and there's a lot to discuss with =zsh=. I'll hit the highlights here and do a more detailed write-up in the future when I've lived in it for a few weeks/months. I have seen lots of helpful posts on =zsh= and even =fish= to =zsh= migrations but all of the ones I came across use the [[https://ohmyz.sh/][Oh my zsh]] "framework". While =oh my zsh= is great, I wanted to stick to a smaller/leaner configuration that I could understand myself. The great thing is that since =oh my zsh= is a collection of scripts that marshaled, the underlying functionality is available as independent repos which I added as git submodules to my dotfiles repo and got a fairly streamlined experience on my laptop and phone (via Termux).

#+begin_src sh
# Minimal zsh configuration

# Personal functions
fpath=(~/.config/zsh/functions "${fpath[@]}")
autoload -Uz vi
autoload -Uz cat
autoload -Uz ls
autoload -Uz lst

# Aliases
alias gs="git status"
alias ga="git add --all"
alias gd="git diff"
alias gc="git commit -m"
alias gf="git fetch"
alias gF="git pull"
alias gp="git push"

# History
export HISTFILE=~/.config/.zsh_history
export HISTSIZE=100
export SAVEHIST=1000

# Command prompt using starship
eval "$(starship init zsh)"

# All zsh "plugins" are git submodules symlinked to ~/.config/zsh
# Sourced from: https://github.com/orgs/zsh-users/
source ~/.config/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.config/zsh/zsh-ssh-agent/ssh-agent.zsh
source ~/.config/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# History substring matching like fish, load after syntax-highlighting
source ~/.config/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh
#requires keybinds for up and down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

#+end_src
*** Before and After
Yeah, I get it: just show the screenshots.

#+begin_export hugo
{{< exif src="fish-on-gnome-terminal.png" caption="fish shell running on the Gnome Terminal" alt="fish shell shown running in a Gnome Terminal window displaying the output of neofetch" >}}
#+end_export

#+begin_export hugo
{{<exif src="zsh-with-starship-on-alacritty.png" caption="zsh shell running on Alacritty with the starship prompt" alt="Alacritty screenshot with default startship prompt running zsh displaying the output of neofetch">}}
#+end_export

So far I'm pretty happy and comfortable with the new system. The thing I still miss from fish is expanding the commands and sub-commands of CLI apps. I'm sure there are zsh packages for that and I look forward to learning more. If you have [[mailto:fish-to-zsh@shom.dev][any suggestions]], I would love to learn from you.

** DONE QMK caps word                                        :foss:keyboard:
CLOSED: [2022-04-14 Thu 20:59]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220414_qmk-caps-word
:EXPORT_HUGO_MENU:
:END:

I use a [[https://github.com/foostan/crkbd][Corne]] low profile keyboard running the [[https://qmk.fm/][QMK firmware]]. It is a 42 key layout and although it has a sixth column where a lot of folks put the traditional SHIFT and CTRL modifier keys, I've opted to go with the [[https://precondition.github.io/home-row-mods][home row mods]] so that I'm not stretching my fingers and negating some of the ergonomic advantages. The downside is that it is difficult to type full words/phrases in capital letters without switching which hand is holding the modifier. Also, it's not as convenient to  press the capslock button since it's on a layer and most things that I'm typing aren't very long in ALL CAPS, I don't do a lot of yelling online.

This is where the very interesting and awesome [[https://getreuer.info/posts/keyboards/caps-word/index.html#using-caps-word][Caps Word]] feature that I just discovered comes in handy. It temporarily sends out capital letters from the keyboard (importantly, it doesn't turn on CAPSLOCK since it might be mapped to something else. Here's how it works:
#+begin_quote
- Caps Word is activated by pressing the left and right shift keys at the same time.
- Caps Word automatically disables itself at the end of the word.
#+end_quote

I was able to set it up pretty easily on the keyboard, well, once I realized that I had ~MOD_LSFT~ on both halves accidentally and fixed it. It's going to take a bit of getting used to but awkwardly typing in ALL CAPS is a good reminder to use the proper feature.

** DONE Seahorse                                             :art:watercolor:
CLOSED: [2022-03-08 Tue 21:53]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220308_seahorse
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:END:
I still need to figure out how to get ox-hugo to process images that are within shortcodes. Might be a good opportunity to learn the code base a bit and maybe contribute.
#+begin_export html
<img src="20220308_seahorse.jpg" width= "600px" title="TITLE" alt="Watercolor painting of a seahorse in yellows browns and reds floating above slight green and pink vegetation" align="center">
#+end_export
=Note=: I did wrap this in a proper img tag to support alt-text but the rendered effect is the same as just putting a raw file in.

Here's the ~figure~ shortcode.
#+begin_export hugo
{{< figure src="20220308_seahorse.jpg" caption="Seahorse" alt="Watercolor painting of a seahorse in yellows browns and reds floating above slight green and pink vegetation" >}}
#+end_export

** DONE Hugo photos with EXIF data                                :foss:hugo:
CLOSED: [2022-01-29 Sat 01:42]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220128_hugo-photos-with-exif-data
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:END:
I have been wanting to transition my photography site to Hugo as well but have not investigated how to utilize Hugo's image processing capabilities. Yesterday I came across [[https://fosstodon.org/@Wivik][Wivik's]] [[https://github.com/Wivik/hugo-shortcodes/tree/master/exif][helpful shortcodes]] that display EXIF information and presents the photo with a frame and a caption. I'm experimenting with it now and might modify it and eventually migrate my photography content.

I ran into =nil pointer evaluating resource.Resource.Resize= error when running the shortcode and tried out the built-in =figure= shortcode with the same path to verify that it wasn't an actual path issue. The answer lies in Hugo's use of *Page Bundles*, essentially standalone directory per post which /bundles/ the text and images in a single folder. Many thanks to [[https://snowgoons.ro/posts/2020-06-04-hugo-automated-image-processing/][Tim Walls' post explicitly helping future sufferers]] of the same error and DuckDuckGo for indexing the page keywords well.

I still have to smooth out the edges for making the page bundle play nice with the short-code within ox-hugo. Kudos to [[https://fosstodon.org/web/@kaushalmodi@mastodon.technology][Kaushal Modi]] for already [[https://ox-hugo.scripter.co/doc/hugo-bundle/][supporting page bundles elegantly]] in ox-hugo. But for this post, I can "cheat" because I need to show the old style rendering anyway for a comparison. By inserting the image directly, ox-hugo will copy the image to the right location so Hugo can do image processing on that page bundle.

The "old" method is just the original image linked directly with no captions or EXIF metadata:
#+begin_export html
<img src="20191016-Howe-Lake.jpg" width= "800px" alt="Howe Lake in Glacier National Park reflecting the yellow larch and pink alpine glow of sunset kissing the top of the snow-capped peaks on a perfectly still mirror surface " align="center">
#+end_export
=Note=: I did wrap this in a proper img tag to support alt-text but the rendered effect is the same as just putting a raw file in.

And the "new" method which uses the shortcode to resize the image to save bandwidth (the original image can be viewed at full resolution by clicking it... I'm not thrilled with the compression quality but it's decent) and also shows the EXIF metadata. I plan to do a bit more with the EXIF info but this is a great start thanks to the shortcode, the caption parameter I added (to provide descriptive alts for accessibility independent of the caption) and icons from the [[https://github.com/Remix-Design/remixicon][Remixicon project]] who provide high-quality FOSS icons.

=Update:= Shortcode appears to be working locally when testing with ~hugo server -D~ but failing on sourcehut ci/cd, I'll investigate with fresh eyes tomorrow.

#+begin_export hugo
{{<exif src="20191016-Howe-Lake.jpg" caption="Howe Lake at Glacier National Park" alt="Howe Lake in Glacier National Park reflecting the yellow larch and pink alpine glow of sunset kissing the top of the snow-capped peaks on a perfectly still mirror surface">}}
#+end_export
=Update 2:= Kaushal happened to see my toot and quickly provided a work-around, I'll sing his praises more preemptively so he can do troubleshooting for me without even asking :), more later.

** DONE Corne LP                                              :foss:keyboard:
CLOSED: [2022-01-16 Sun 14:48]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220116_corne-lp
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:END:
I fell down the split ergo mechanical keyboard rabbit hole thanks to a dear friend who was kind enough to loan me his [[https://kowodo.github.io/HardwareTools/gergoPlex.html][Gergoplex]] (despite my incessant teasing about his hipster keyboard). The Gergoplex is on the deeper end of the rabbit-hole with only 36 keys and 12g switches but it demonstrated the value to me. I ended up getting a pre-built [[https://github.com/foostan/crkbd][Corne]] and added the lightest switches I could find at the time: [[https://mechanicalkeyboards.com/shop/index.php?l=product_detail&p=1638][Gateron MX 35g switches]]. I've been pretty happy with the Corne (and it's 3x6 +3 layout) but I very much enjoyed the lower profile and light action of the Gergoplex and wanted to chase it...

So, I got a [[https://boardsource.xyz/store/5f2efc462902de7151495057][Corne LP]] kit but went with an acrylic case (the aluminum case looks really nice but it's quite rich) and got the 25g [[https://boardsource.xyz/store/5fff705f03db380da20f1014][Purpz]] Choc switches.
#+begin_export hugo
{{< exif src="20220126_corne-1.jpg" caption="Corne parts" alt="Split ergonomic keyboard parts, pcb, switches, keycaps" showexif="false">}}
#+end_export

It was fun to assemble the kit and the board looks great:
#+begin_export hugo
{{< exif src="20220126_corne-2.jpg" caption="Corne with purpz" alt="Split ergonomic keyboard with switches installed but no keycaps" showexif="false">}}
#+end_export

I didn't have any Choc keycaps so I had to wait a bit for the MK Ultra MBK Choc (vendor may be defunct) keycaps. I'm very impressed with the keycaps and the homing keys feel great. I'm a big fan of the look and feel and quite happy with the low profile and light touch which I was looking for.

#+begin_export hugo
{{< exif src="20220126_corne-3.jpg" caption="Fully assembled Corne" alt="Split ergonomic keyboard with black and white keys" showexif="false">}}
#+end_export

The keyboard worked "out of the box" but I was able to flash my custom [[https://qmk.fm/][QMK firmware]] and was able to get up and going with my keymap. Now, maybe I'll look into making the kit [[https://nicekeyboards.com/nice-nano/][wireless]]? It never ends.

** DONE OBS, virtual camera, guix                                 :foss:guix:linux:
CLOSED: [2022-01-11 Tue 16:47]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220111_obs-virtual-camera-guix
:EXPORT_HUGO_MENU:
:END:
I've used OBS as a virtual camera input for various reasons (to compose scenes, to control field of view, etc.). I was setting it up on my desktop (Pop_Os! 20.04 with Guix as the package manager) today because Microsoft Teams recognizes my El Gato CamLink 4K but won't show any video. Since I had successfully used virtual camera before I tried setting it up, but ran into some issues.

OBS needs the =v4l2loopback= driver in order to enable the virtual camera functionality.
#+begin_src bash
  guix install obs-studio v4l2loopback-linux-module
#+end_src
Installing OBS and the loopback driver worked but even after a restart OBS would not show the virtual camera option. I decided to see if it was a package/path issue and tried using =apt= but even after restart that didn't work, turns out apt's version of OBS is too old.
#+begin_src bash
  apt install -y obs v4l2loopback-dkms
#+end_src
=NOTE= package names are different

Ultimately, I had to get OBS from guix and the loopback from apt. This mismatch makes me uneasy since it goes directly against a declarative config, so I'm documenting the discrepancy for when it bites me in the future.

** DONE Found Nemo!                                          :art:watercolor:
CLOSED: [2022-01-09 Sun 21:05]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220109_found-nemo
:EXPORT_HUGO_MENU:
:END:
First painting with the new paint set. Good paper (140 lbs) and paint make a big difference.
#+begin_export hugo
{{< figure src="../../20220109_foundnemo.jpg" width= "600px" title="Found Nemo in very clear water(color)" alt="Watercolor painting of a clowfish like Nemo on white paper with some grass tufts along the bottom" align="center" >}}
#+end_export


** DONE Water color paint key/legend                         :art:watercolor:
CLOSED: [2022-01-08 Sat 17:48]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220108_water-color-paint-key-legend
:EXPORT_HUGO_MENU:
:END:
I got a new water color paint set. Turns out I like painting enough and I was encouraged by a friend with a generous gift of brushes and a marine life water color book. The same friend also clued me in to making a paint key/legend. Well, first I made a poor design decision on how to structure the key and then failed to follow the design (further indicating poor design). I also had to reconcile  my desire for perfection with lack of a ruler, lack of patience, and lack of necessity for the outcome to be perfect. So what I intended to be a relaxing afternoon activity turned out to be a bit frustrating. BUT, I'm glad I persevered and now I have this legend to guide me on what colors to pick when I paint. Now that it's done, it looks pretty to me, not surprising that I also love opera warming up cacophonous sound.

#+begin_export hugo
{{< figure src="../../20220108_paintkey.jpg" width= "600px" title="Watercolor swatch" alt="4x6 grid of water color swatches with the color drawn across and the name of the color written above in black ink." align="center" >}}
#+end_export

** DONE Setting up Protonmail in Emacs :emacs:linux:
CLOSED: [2022-01-08 Sat 12:04]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220108_setting-up-protonmail-in-emacs
:EXPORT_HUGO_MENU:
:END:
I've used [[https://protonmail.com][Protonmail]] for several years and use the web interface for the most part and used Thunderbird on the desktop to keep offline copies of email. Since Protnmail takes care of the encryption it requires a [[https://protonmail.com/bridge/install][local bridge]] to provide a standard interface like IMAP. Essentially, it is running an IMAP server on the local machine that any compatible client can connect to. Technically, the bridge can be made accessible on a local network so many clients from many machines can connect to it. I might eventually set this up when I have had a chance to get a better handle on vlans and access control.

*** Installing packages
In order to use connect to the local IMAP bridge locally, I will be using =mbsync=. I'm using =guix= for package management, guix (and other package  managers) refer to =mbsync= as =isync=. The =mu= package also includes =mu4e= (at least in version 1.6+ and it's not recommended to mix/match versions).
#+begin_src sh
  guix install isync mu
#+end_src

*** Configuring mbsync
=mbsync= expects a configuration in =~/.mbsyncrc= (does anyone know how to move this to =~/.config=? I'm disheartened by all the home directory clutter). Ideally one would GPG encrypt the password but since Proton Bridge generates it locally and it's is available as clear text to the local machine anyway, I didn't bother. Instead I just put the password from the ProtonBridge application into a text file (ensure no extra characters exist like space or return) and cat that into the ~PassCmd~.
#+begin_src conf
  IMAPAccount proton
  Host 127.0.0.1
  User user@protonmail.com
  PassCmd "cat ~/.protonBridgePass"
  SSLType NONE
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore proton-remote
  Account proton

  MaildirStore proton-local
  Subfolders Verbatim
  Path ~/mail/proton
  Inbox ~/mail/proton/inbox

  Channel proton
  Far :proton-remote:
  Near :proton-local:
  Patterns *
  Create Both
  SyncState *
#+end_src
Running the sync command gave me an error that sent me on a goose chase:
#+begin_src sh
mbsync -a
#+end_src
=Socket error: secure connect to 127.0.0.1 (127.0.0.1:1143): error:1408F10B:SSL routines:ssl3_get_record:wrong version number=
The issue was the =SSLType NONE= is the proper config as shown above, I originally had it set to =IMAPS=. Once the sync starts it will take a long time depending upon how many emails you have.

*** Configuring mu4e
Configure the ~mu4e-maildir~ location to wherever you want to store the mail directory (remember mail in this folder is stored in clear-text). The ~mu4e-****-folder~ variables need to include the sub-directory in the relative path, in my case =proton=.

#+begin_src emacs-lisp
  (use-package mu4e
    :straight nil
    :defer 20 ; Wait until 20 seconds after startup
    :config

    (setq mu4e-change-filenames-when-moving t ; avoid sync conflicts
	  mu4e-update-interval (* 10 60) ; check mail 10 minutes
	  mu4e-compose-format-flowed t ; re-flow mail so it's not hard wrapped
	  mu4e-get-mail-command "mbsync -a"
	  mu4e-maildir "~/mail/proton")

    (setq mu4e-drafts-folder "/proton/Drafts"
	  mu4e-sent-folder   "/proton/Sent"
	  mu4e-refile-folder "/proton/All Mail"
	  mu4e-trash-folder  "/proton/Trash")

    (setq mu4e-maildir-shortcuts
	  '(("/proton/inbox"     . ?i)
	    ("/proton/Sent"      . ?s)
	    ("/proton/Trash"     . ?t)
	    ("/proton/Drafts"    . ?d)
	    ("/proton/All Mail"  . ?a)))

    (setq message-send-mail-function 'smtpmail-send-it
	  auth-sources '("~/.authinfo") ;need to use gpg version but only local smtp stored for now
	  smtpmail-smtp-server "127.0.0.1"
	  smtpmail-smtp-service 1025
	  smtpmail-stream-type  'ssl))
#+end_src

I'm also configuring ~smtpmail~ in the config section of =mu4e= just to keep mail config together, ~smtpmail~ is part of Emacs core. I'm adding SMTP authentication info to the un-encrypted ~.authinfo~ for the same reason as =.mbsyncrc= explanation above.

#+begin_src conf
machine 127.0.0.1 login user@protonmail.com password ProtonBridgeGeneratedPassword port 1025
#+end_src

*** Using org-mode to compose HTML emails
At this stage plain-text email will work just fine, in order to send email with formatting I'm using =org-msg= which lets you compose with org markup and sends it out as HTML (including in-lining images, tables, etc.)
#+begin_src emacs-lisp
  (use-package org-msg
    :straight t
    :after mu4e
    :config
    (setq mail-user-agent 'mu4e-user-agent)
    (require 'org-msg)
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
	  org-msg-startup "hidestars indent inlineimages"
	  org-msg-default-alternatives '((new		. (text html))
					 (reply-to-html	. (text html))
					 (reply-to-text	. (text)))
	  org-msg-convert-citation t)
    (org-msg-mode))
#+end_src

*** References
Here are a list of references I used to get everything setup and configured:
- https://systemcrafters.net/emacs-mail/
- [[https://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and/][https://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and/]]
- https://jherrlin.github.io/posts/emacs-mu4e/

** DONE "Inverse literate" config via org-transclusion                :emacs:
CLOSED: [2021-12-30 Thu 17:32]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211230_inverse-literate-config-via-org-transclusion
:EXPORT_HUGO_MENU:
:END:
I am very intrigued by the whole concept of literate programming. There is a lot of opinions and lots of valid points for and against comments, but ultimately it's always a good idea to understand intent. I wanted to create a literate config but did not want slow down startup with tangling.

I came across an interesting package today called [[https://github.com/nobiot/org-transclusion][org-transclusion]] by @nobiot. The package is very interesting, being able to bring in arbitrary lines of text from multiple documents into a single document (while those documents remain the source of truth) is quite powerful. The package also allows extracting sections based on tags (string match) which makes it a good contender to make an "inverse literate" configuration which I've been curious about ever since David Wilson did a [[https://www.youtube.com/watch?v=50Vsh4qw-E4][System Crafters live stream]].

So I decided to give it a shot and got started with my custom configuration. I added some text comments to divide the configuration into sections:
#+begin_src emacs-lisp
;directory_begin
(setq user-emacs-directory "~/.emacs/.custom/")
;directory_end
#+end_src

Then I'm able to include it in an org file:
#+begin_src emacs-lisp
This line live in my org file, but the content below lives in my init.el file:
#+transclude: [[./init.el::;directory_begin]] :lines 2- :src emacs-lisp :end "directory_end"
#+end_src
Where =org-transclusion= looks for a file =./init.el= and searching for the begin string ~;directory_begin~ and includes everything until it encounters the end string ~;directory_end~ (both strings are arbitrary, I just picked that convention) but doesn't include the actual line containing "directory_end" as specified by the ~:line 2-~ parameter. All of that would produce:
#+begin_src emacs-lisp
This line live in my org file, but the content below lives in my init.el file:
(setq user-emacs-directory "~/.emacs/.custom/")
#+end_src
And in the future if I added anything in =init.el= between the ~;directory_begin~ and ~;directory_end~ comment lines, then it would get included in the org file.

Here's what all of this looks like [[https://git.sr.ht/~shom/.emacs.custom][in my actual configuration repo]] (I haven't finished writing up all the sections yet, but plan to soon™.

Overall, this has worked pretty well. The file =config.org= in my repo contains the "source" and =org-transclusion= directives and is rendered out to =README.md= (markdown is better supported for auto-rendering by more forges currently). I'll eventually automate this process, likely through a git-hook. However, the rendered output is never guaranteed to include all of my config, just the sections that have been manually commented, =init.el= and includes will remain the source of truth.

** DONE Doom Emacs config (deprecated) :emacs:
CLOSED: [2021-12-01 Wed 21:57]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211201_doom-emacs-config--deprecated
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases '(20211201_doom-emacs-config-deprecated)
:EXPORT_HUGO_MENU:
:END:
I was asked about my Doom config by [[https://fosstodon.org/@Runlevelrobot/107374760764898864][someone on fosstodon]] but it's not a clean repo where I'm not confident that I didn't accidentally commit private information in the past, so I wasn't sure how to share. But this is a good time to put a pin in the config and capture a snapshot here, for reference.

This is quite messy and mixes idioms at random as I learned more about configuration. I also used this config to transition over to my custom config so I disabled some Doom functionality as I went down that path, in short, I was using a lot more packages in =init.el= that the current state below.

*** init.el
#+begin_src emacs-lisp
(doom! :input
       ;;chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ;;ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;pretty-code       ; ligatures or substitute text with pretty symbols
       ;tabs              ; an tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       ;;vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       ;file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)    ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       ;;vc              ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       ;;macos             ; MacOS-specific commands
       (magit +forge)      ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org ;;(org +roam)              ; organize your plain life in plain text
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       (sh +lsp +fish)     ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
       everywhere

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

*** packages.el
#+begin_src emacs-lisp
;; Useful for position M-x (execute-extended-command) window on screen
(package! ivy-posframe)

;; Simpleclip allows access to system clipboard in a reasonable manner
(package! simpleclip)

;; Use org-journal with org-roam to follow Roam Research workflow
(package! org-journal)

;; Use org-roam-server to visualize org-roam links
(package! org-roam-server)

;; single dired buffer and icons
(package! all-the-icons-dired)
(package! dired-single)

(package! fish-completion
  :recipe (:host gitlab :repo "ambrevar/emacs-fish-completion"))

(package! emacas-0x0
  :recipe (:host gitlab :repo "willvaughn/emacs-0x0"))

(package! org-present)
(package! org-appear)

(package! ox-gemtext
  :recipe (:host nil :repo "https://codeberg.org/woozong/ox-gemtext"))

(package! gemini-mode)
(package! org-preview-html)

(package! ox-hugo)
(package! yaml-mode)
(package! ox-gemini)

(package! org-books)

(package! deadgrep)

(package! vertico)
(package! orderless)
(package! marginalia)
(package! embark)

(package! ace-window)

(package! org-bars
  :recipe (:host github :repo "tonyaldon/org-bars"))

(package! consult)

(package! vertico-posframe)

#+end_src

*** config.el
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)

(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 32))

(setq display-line-numbers-type t)

;; CUA type customizations and conveniences=====================================
;; Simpleclip to access system clipboard
(require 'simpleclip)
(setq simpleclip-mode 1)

(map! :gin "C-S-x" #'simpleclip-cut ;Was: C-x chord
      :gin "C-S-c" #'simpleclip-copy ;Was: C-x chord
      :gin "C-S-v" #'clipboard-yank ;freezing on Ubuntu: 'simpleclip-paste ;Was: C-x chord
      :gin "C-z" #'undo ; Was: enable Emacs state
      :gin "C-S-z" #'redo ;Was: C-x chor
      ;; :gin "C-<tab>" #'switch-to-next-buffer ;Was: aya-create snippet
      ;; :gin "C-S-<tab>" #'previous-multiframe-window ;Was: C-x chord
      :gin "C-w" #'kill-buffer ;Was: evil-window-map
      :gin "C-a" #'mark-whole-buffer ;Was: doom/backward-to-bol-or-indent
      )

;; Escape smart-parens after done typing inside
(map! :i "M-;" #'sp-up-sexp) ;Was: comment-dwim

;; Save. Was: isearch-forward
(map! "C-s" #'save-buffer)
;; Save as. Was: nil
(map! "C-S-s" #'write-file)

;; Ctrl shift P like sublime for commands
(map! "C-S-p" #'execute-extended-command)

;; Popup which-key fast
(after! which-key
  (setq which-key-idle-delay 0.1))

;; Org mode related=============================================================
(setq org-directory "~/org/")
(setq org-agenda-files '("~/org/todo.org"))

;; Org files that are refile targets
(setq org-refile-targets (quote (("notes.org" :maxlevel . 1)
                                 ("projects.org" :level . 1)
                                 ("doomNotes.org" :level . 1)
                                 )))

;; Allow text selection by holding down shift key
(setq org-support-shift-select t)

;; Mark when task was completed
(setq org-log-done 'time)

;; Toggle narrow/widen subtree. Was: append-next-kill
(map! "C-M-w" #'org-toggle-narrow-to-subtree)

;; Render modified text only not modifier characters
(setq org-pretty-entities-include-sub-superscripts t)

;; Show images in the org buffers
(setq org-startup-with-inline-images t)

;; Org-roam
(setq org-roam-mode 0)
(setq org-roam-directory "~/org/roam/")
(setq org-roam-buffer "Org-roam Sidebar")
(setq org-roam-buffer-width 0.15)
;;(setq org-roam-buffer-no-delete-other-windows t)
(setq org-roam-link-title-format "∞%s")

;; Org-journal roam integration
;; From @ianjones on doom emacs discord: https://www.ianjones.us/blog/2020-05-05-doom-emacs/#fleeting-notes
(use-package org-journal
      :custom
      (org-journal-dir "~/org/roam/journal/")
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %B %d %Y"))
(setq org-journal-enable-agenda-integration t)
(map! "C-c C-5" #'org-journal-search) ;;was overriding org schedule

(setq org-roam-dailies-capture-templates
      '(("d" "daily" plain #'org-roam-capture--get-point ""
         :immediate-finish t
         :file-name "%<journal/%Y-%m-%d>"
         :head "#+TITLE: %<%Y %B %d, %A>\nTAGS: [[file:dailies.org][∞Dailies]]\n\n*")))

(setq org-roam-capture-templates '(
                                   ("d" "default"
                                    plain
                                    #'org-roam-capture--get-point "%?"
                                    :file-name "%<%Y%m%d>-${slug}"
                                    :head "#+TITLE: ${title}\n"
                                    :unnarrowed t)
                                   ("p" "personal"
                                    plain
                                    #'org-roam-capture--get-point "%?"
                                    :file-name "personal/%<%Y%m%d>-${slug}"
                                    :head "#+TITLE: ${title}\n"
                                    :unnarrowed t)))
;; org-roam-server=====================================
(if (eq system-type 'gnu/linux)
    (use-package org-roam-server
      :ensure t
      :config
      (setq org-roam-server-host "127.0.0.1"
            org-roam-server-port 8008
            org-roam-server-authenticate nil
            org-roam-server-export-inline-images t
            org-roam-server-serve-files nil
            org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
            org-roam-server-network-poll t
            org-roam-server-network-arrows nil
            org-roam-server-network-label-truncate t
            org-roam-server-network-label-truncate-length 60
            org-roam-server-network-label-wrap-length 20))
  )
;; Posframe customization to position popup=====================================
(require 'ivy-posframe)
;; display at `ivy-posframe-style'
(setq ivy-posframe-display-functions-alist
      '((t . ivy-posframe-display)))
(setq ivy-posframe-display-functions-alist
      '((t . ivy-posframe-display-at-frame-center)))
(ivy-posframe-mode t)

;; Use aspell for spell-checking================================================
(setq-default ispell-program-name "aspell")

;; Speed up frame by loading heavy things when daemon starts
(when (daemonp)
  (require 'org)
  (require 'org-roam)
  (require 'ispell)
  (ispell-start-process))

;; dired config from system builder's emacs from scratch #1
(use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

(use-package dired-single
  :ensure t
  :init
  (require 'dired-single))

(use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

;; Magit forge configuration==================================================
(setq auth-sources '("~/.authinfo"))

;; eshell configuration ======================================================
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))

;; vterm configuration========================================================
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (setq vterm-shell "fish")
  (setq vterm-max-scrollback 10000))

;; org-present configuration from https://github.com/daviwil/dotfiles=========
(defun dw/org-present-prepare-slide ()
  (org-overview)
  (org-show-entry)
  ;(org-show-children)
  )

(defun dw/org-present-hook ()
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.5) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  (setq header-line-format " ")
  (org-appear-mode -1)
  (org-display-inline-images)
  (display-line-numbers-mode)
  (dw/org-present-prepare-slide))

(defun dw/org-present-quit-hook ()
  (setq-local face-remapping-alist '((default variable-pitch default)))
  (setq header-line-format nil)
  (org-present-small)
  (org-remove-inline-images)
  (org-appear-mode 1)
  (display-line-numbers-mode))

(defun dw/org-present-prev ()
  (interactive)
  (org-present-prev)
  (dw/org-present-prepare-slide))

(defun dw/org-present-next ()
  (interactive)
  (org-present-next)
  (dw/org-present-prepare-slide))

(use-package org-present
  :after simple
  :after org
  :bind (:map org-present-mode-keymap
         ("C-j" . dw/org-present-next)
         ("C-k" . dw/org-present-prev))
  :hook ((org-present-mode . dw/org-present-hook)
         (org-present-mode-quit . dw/org-present-quit-hook)))

;; Gemini=====================================================================
(require 'ox-gemtext)
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "gmi")
              (gemini-mode +1))))
;; ox-hugo====================================================================
(require 'ox-hugo)
(require 'ox-gemini)

;; Org capture template for Hugo posts
;; https://ox-hugo.scripter.co/doc/org-capture-setup/
(with-eval-after-load 'org-capture
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (concat (format-time-string "%Y%m%d_") (org-hugo-slug title))))
      (mapconcat #'identity
                 `(
                   ,(concat "\n* DRAFT " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":EXPORT_HUGO_MENU:\n:END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (add-to-list 'org-capture-templates
               '("h"                ;`org-capture' binding + h
                 "Hugo post"
                 entry
                 ;; It is assumed that below file is present in `org-directory'
                 ;; and that it has a "Blog Ideas" heading. It can even be a
                 ;; symlink pointing to the actual location of all-posts.org!
                 (file+olp "~/dev/shom.dev/content.org" "Content")
                 (function org-hugo-new-subtree-post-capture-template)
                 :prepend t)))

;; Embark config==============================================================
(use-package embark
  :ensure t
  :bind
  (("C-;" . embark-act)
   ("C-M-;" . embark-dwim)
   ("C-h B" . embark-bindings))

  :init
  (setq prefix-help-command #'embark-prefix-help-command))


;; Org-books==================================================================
(setq org-books-file "~/org/roam/personal/books.org")

;; Vertico ===================================================================
;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Optionally enable cycling for `vertico-next', `vertico-previous',
  ;; `vertico-next-group' and `vertico-previous-group'.
  (setq vertico-cycle t))

;; Optionally use the `orderless' completion style. See
;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
;; dispatcher. Additionally enable `partial-completion' for file path
;; expansion. `partial-completion' is important for wildcard support.
;; Multiple files can be opened at once with `find-file' if you enter a
;; wildcard. You may also give the `initials' completion style a try.
(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))
(orderless-define-completion-style orderless+initialism
  (orderless-matching-styles '(orderless-initialism
                               orderless-literal
                               orderless-regexp)))
(setq completion-category-overrides
      '((command (styles orderless+initialism))
        (symbol (styles orderless+initialism))
        (variable (styles orderless+initialism))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

(use-package consult
  :after vertico)
(map! :gin "C-<tab>" #'consult-buffer
      :gin "C-f" #'consult-ripgrep
      :given "C-i" #'consult-imenu)

;; Window and decoration =====================================================
(set-fringe-mode '(15 . 10))

(use-package ace-window
  :ensure t
  :init
  (global-set-key (kbd "M-q") 'ace-window)
  (setq aw-dispatch-always t)
  (custom-set-faces!
    '(aw-leading-char-face
      :foreground "white" :background "red"
      :weight bold :height 2.5 :box (:line-width 10 :color "red"))))


;; Org-bars configuration ====================================================
(use-package org-bars
  :after org
  :ensure t
  :init
 (defun org-no-ellipsis-in-headlines ()
 "Remove use of ellipsis in headlines.
See `buffer-invisibility-spec'."
  (remove-from-invisibility-spec '(outline . t))
  (add-to-invisibility-spec 'outline))
 (add-hook 'org-mode-hook #'org-bars-mode)
 (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines))

;; ===========================================================================
(after! tramp
  (setq tramp-inline-compress-start-size 1000)
  (setq tramp-copy-size-limit 10000)
  (setq tramp-verbose 1)
  (setq tramp-default-method "scp")
  (setq tramp-use-ssh-controlmaster-options t)
  (setq tramp-verbose 1))

;; ===========================================================================
(use-package vertico-posframe
  :after vertico
  :ensure t
  :init
  (vertico-posframe-mode 1))

#+end_src

** DONE Highland Chewie                                      :art:watercolor:
CLOSED: [2021-11-29 Mon 22:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211129_highland-chewie
:EXPORT_HUGO_MENU:
:END:
I picked up a water color kit for $2 with a brush and eight colors to try something new. I followed along with a [[https://www.instagram.com/paigepayne_creations/channel/][tutorial]] to paint a highland cow and my painting wasn't that great, but it was fun. Afterwards it felt a little like Chewbacca, so l added a bandolier. Here's +Highland Chewie+ Chewvaca:

#+begin_export hugo
{{< figure src="../../20211129_HighlandChewie.jpg" width= "800px" title="Highland Chewie loyal ally" alt="Watercolor drawing of a highland coo with characteristic shaggy fur and pointy horns with a bandolier across its body" align="center" >}}
#+end_export

** DONE Emacs which-key prefix labels :emacs:
CLOSED: [2021-11-22 Mon 00:26]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211122_emacs-which-key-prefix-labels
:EXPORT_HUGO_MENU:
:END:
I've been using =evil-mode= for my Emacs configuration and [[https://github.com/cofi/evil-leader][evil-leader]] makes the key-mapping very straight-forward with the =set-key=. I wanted a few functions to be grouped together. =SPC= is bound as a leader key and there are a few frequent functions bound to single keys, the rest are grouped under other leaders.

However, the secondary leaders show up as =x → +prefix= and it would nice to give the grouping a name. A lot of suggestions make use of the [[https://github.com/noctuid/general.el][General.el]] but at this time I didn't need anything beyond giving the grouping a name. I was not immediately able to find a way to create an empty keymap to put commands under (I did not know that's what I needed to do), like this: ~"e" '("eval" . (keymap))~

#+begin_src emacs-lisp
  (evil-leader/set-key
  "." 'find-file
  "," 'consult-buffer
  "'" 'execute-extended-command

  "e" '("eval" . (keymap))
  "eb" '("buffer" . eval-buffer)
  "er" '("region" . eval-region)

  "g" '("magit" . (keymap))
  "gc" '("commit" . magit-commit)
  "gf" '("fetch" . magit-fetch)
  "gg" '("status" . magit-status)

  "q" '("quit" . (keymap))
  "qb" '("buffer" . kill-this-buffer)
  "qq" '("save&quit" . save-buffers-kill-terminal)

  "h" '("help" . (keymap))
  "hf" '("function" . describe-function)
  "hk" '("key" . describe-key)
  "hv" '("variable" . describe-variable)

  "w" '("window" . (keymap))
  "wd" '("delete" . delete-window)
  "wo" '("delete other" . delete-other-windows)
  "ww" '("ace-window" . aw-show-dispatch-help))
#+end_src

** DONE Emacs custom configuration :emacs:
CLOSED: [2021-11-21 Sun 17:35]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211121_emacs-custom-configuration
:EXPORT_HUGO_MENU:
:END:

I crafted a custom configuration for Emacs and have been using it for the past few weeks. This is something I didn't really see myself doing when I started using Emacs, it seemed "very advanced". This was my journey from a noob to a different kind of noob!

*** Doom
I started my Emacs journey with [[https://github.com/hlissner/doom-emacs/][Doom]] and was learning things along the way. This was a great way to get started by borrowing configuration snippets and blindly copying and pasting, which got me up and running quickly. I did find the vastness of Doom intimidating and knew that I wasn't using all the functionality and wasn't really discovering it given the jam packed key-maps.
*** Vanilla Chocolate Swirl
Around the time when I was understanding how to copy paste configs more, there was some community discussion around making Emacs more inviting to new users. As a new user, I felt qualified to collect my thoughts. In an attempt to help new user on-boarding, I even created a [[https://github.com/shombando/EmacsVanillaChocolateSwirl][literate config]] that others found useful enough to contribute to. I understood things a lot better through that exercise and felt comfortable enough to try packages by myself.
*** Back to Doom
Actually, I never left Doom while doing the above exercise. I did not want to invest the time necessary to learn to make my own config. Also, having all the keybindings already setup and showing up nicely in ~which-key~ was great. This is also before =native-comp= was merged into Emacs 28 master branch so I was having issues with compatibility. The final push was that using Doom with all its modules was not performant on a Windows machine that I don't manage but have to use.
*** Custom Config
[[../20211201_doom-emacs-config-deprecated][During this time]], I kept disabling more and more Doom modules and replacing some of them with other options. There seems to be a lot of excitement about light-weight packages like =vertico=, =consult=, etc. that are more single task focused which I started integrating. I started using =orderless=, =embark= and =ace-window= as well and with those, I felt I had enough to use a custom config and be productive. I'm using [[https://github.com/plexus/chemacs2][Chemacs2]] to have both my Doom config and my [[https://git.sr.ht/~shom/.emacs.custom][custom config]] installed but have been exclusively using the config.

I'll make a few short posts with some of the things I learned in this process with some code snippets as examples.

** DONE Sony A7c initial customization :camera:
CLOSED: [2021-10-27 Wed 00:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211026_sony-a7c-initial-customization
:EXPORT_HUGO_MENU:
:END:
I have been using the Sony A7ii for a long while. It was my first full-frame and mirrorless camera. The A7ii is a great camera and in a lot of ways I have been very spoiled by it. However, when the A7iii came out with fairly significant improvements I resisted the urge to upgrade and decided to wait for the A7iv.

The A7iv was released last week and in many regards is a "perfect" camera. It has made a lot of improvements in an already excellent line-up and is perhaps justifiably is also priced 25% more than it's predecessor. However, most of the advancements were made in the video department (save for the new 33MP sensor) and that is not the feature set I use. Also, given the shortage of electronic parts it is unclear when pre-orders would get into the hands of users. Ultimately, after waiting for an agonizing 3.5 years after the release of the A7iii, I decided not to buy the A7iv.

Instead, I opted for the A7c which was released in 2020 and is essentially an A7iii in a smaller body. It loses the dual SD cards, 2 custom buttons, and a joystick but gains a fully articulating LCD monitor, compactness, and a range-finder look and feel. I decided to get it with the compact (but quite excellent) 28-60 f/4-5.6 kit lens and make this is my "only" camera for both landscape and underwater photography (with a Seafrog case I intend to get).

All of this preface to get to my main point. I have customized a lot of functions of the A7ii that I no longer remember the "how" or the "why" behind those changes. Here are the main changes I made and replicated on the A7c before the first shoot.

Image from first shoot:
#+begin_export hugo
{{< figure src="../../Shom_20211026_McDonaldLake_00015.jpg" width= "800px" title="Lake McDonald" alt="A serene still lake photo with glacial rocks in the foreground and mountains with snowy peaks in the background with sunset hue cloud cover." align="center" >}}
#+end_export


*** Back-button auto-focus
Decoupling auto-focus from the shutter action allows me to focus on a subject and wait for the right moment to click the shutter without worrying about refocusing/losing focus. This is accomplished in two pieces, first the shutter and auto-focus is decoupled and then the auto-focus function is then remapped to a button on the back of the camera.
**** Decouple auto-focus from shutter
The current Sony terminology for decoupling auto-focus from shutter is =AF w/ shutter=. In the A7C it is found in ~Menu - Camera 1 - AF2~ (Page 5).

It is also a good idea to turn off =Pre-AF Off= which moves the focus point based on the scene changes even before auto-focus is actuated (to improve speed).

~NOTE:~ Shutter half-press is not customizable on the A7c (unlike A7ii)
**** Remap auto-focus to another button
I'm choosing to use the default =AF-On= button on the back of the camera for now. But it can be customized to any of the other buttons in ~Menu - Camera 2 - Custom Operation1 - Custom Key~ (Page 9).
*** DRO/Auto HDR
The LCD panel on the camera shows the JPEG preview of the image regardless of whether you're shooting RAW. The Dynamic Range Optimization (DRO) boosts the shadows and that's what shows up in the LCD, which in turn means that the RAW is underexposed. The =DRO/Auto HDR= setting can be turned off in ~Menu - Camera 1 - Color/WB/Img.Processing1~ (Page 11).

This [[https://www.youtube.com/watch?v=21Z7l1-h71E][video from Nick Page]] describes the issue and suggests this fix.
*** Long Exposure NR
By default the camera attempts to do Noise Reduction (NR) when doing long-exposure. While this does create a lower noise image it comes at the expense of "timing out" for the same length of time the original exposure was. This makes sense since the camera takes a "dark" image with the shutter closed as a noise reference and subtracts it from the original exposure to remove that noise. However, this is a major hindrance for doing multiple longer exposure shots especially as the light is fading. Turning the  =Long Exposure NR= feature off is necessary for those scenarios. The option is found in ~Menu - Camera 1 - Quality/Image Size2~ (Page 2).

~NOTE:~ There's a related setting for =High ISO NR=.

~NOTE:~ If attempting proper astrophotography then multiple dark frames are needed anyway for proper post processing.I'll

These are the main features that would have "bit" me if I didn't change them before trying to use the camera. If there are others, I will note them here after they bite me.

** DONE org-bars view for outlining/folding :emacs:
CLOSED: [2021-10-23 Sat 23:37]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211023_org-bars-view-for-outlining-folding
:EXPORT_HUGO_MENU:
:END:
I came across this new [[https://github.com/tonyaldon/org-bars][org-bars]] package that shows folding indicators and lines to indicate the groupings. In a forum discussion I also discovered that there's another package [[https://github.com/legalnonsense/org-visual-outline][org-visual-outline]] but it actually requires configuring two packages so I didn't try it.

However, based on the discussion in the comments it seems that ~org-bars~ supports narrowing of the buffer (and it works great) which visual-outline does not. I discovered a visual bug and filed a [[https://github.com/tonyaldon/org-bars/issues/2][report]], so hopefully it's an easy fix but it's not a breaking issue.

Here's the configuration I'm using based on the recommendations in the documentation.
#+begin_src emacs-lisp
;; Org-bars configuration ====================================================
(use-package org-bars
  :after org
  :ensure t
  :custom
 (defun org-no-ellipsis-in-headlines ()
 "Remove use of ellipsis in headlines.
See `buffer-invisibility-spec'."
  (remove-from-invisibility-spec '(outline . t))
  (add-to-invisibility-spec 'outline))
 (add-hook 'org-mode-hook #'org-bars-mode)
 (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines))
#+end_src

Here's a screenshot of my Hugo content buffer showing ~org-bars~:
#+begin_export hugo
{{< figure src="../../20211023_org-bars.png" width= "800px" title="Org-bars screeshot" alt="Screenshot of this post inside an Emacs buffers with org-bars drawing vertical lines between each hierarchical node" align="center" >}}
#+end_export

** DONE Wine and CrossOver to use Lightroom on Linux :foss:linux:
CLOSED: [2021-10-16 Sat 00:07]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211016_wine-and-crossover-lightroom
:EXPORT_HUGO_MENU:
:END:
I have been using [[https://www.darktable.org/][Darktable]] and transitioning away from Adobe's Lightroom. However, I have almost a decade of edits and experience with Lightroom so doing a cold-turkey switch is proving to be challenging. So I decided to investigate if I could "natively" run Lightroom (without a VM) so I decided to give =wine= a try.

I use =guix= as a package manager on Pop!_OS and guix has =wine= but it did a while to build and install. I needed to download a Lightroom Classic executable but like a lot of software it's an installer that does the downloading and installing. However, Adobe won't allow you to download a Windows installer on Linux, so I had to use [[https://gitlab.com/ntninja/user-agent-switcher][User-Agent Switcher]] on Firefox to Windows to even get the installer... this is part of the frustration of software you lease.

=wine= will ask to install mono installer, which is does by itself and then the same thing with Gecko installer. Overall a pretty smooth process but the Adobe installer failed miserably with a less than helpful error.
#+begin_src shell
Crash Annotation GraphicsCriticalError: |[0][GFX1]: Potential driver version mismatch ignored due to missing DLLs 0.0.0.0 and 0.0.0.0 (t=18.9854
) [GFX1]: Potential driver version mismatch ignored due to missing DLLs 0.0.0.0 and 0.0.0.0
#+end_src

At this point I didn't have high hopes for avoiding the Windows VM route but  wanted to give a quick try to [[https://www.codeweavers.com/crossover][CrossOver]]. I tried one of their supported applications (Notepad++) and that worked great. They also support "unlisted application" but pointing the Adobe installer led to a lot of nothing, the logs were not very helpful either. At this point I decided to abandon this path and go the VM route to make progress on my actual photo editing goals. However, Steam's [[https://protonge.com/][Proton]](updated to link to Proton-GE) could be a option to investigate in the future. Are there any other good solutions?

** DONE Fully automated deployment :emacs:foss:
CLOSED: [2021-10-05 Tue 05:53]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211005_fully-automated-deployment
:EXPORT_HUGO_MENU:
:END:
Up until the last commit, the site was being written in Org Mode, exported using ox-hugo, and Hugo was invoked manually to generate the html all locally. The generated =public= folder was what was being pushed to SourceHut for the deployment. This will be first post which will only commit the actual content in org format only and the full CI/CD will happen on SourceHut.

*** Using org-publish
I'll be following along with the System Crafters' [[https://systemcrafters.net/publishing-websites-with-org-mode/][Publishing Website with Org Mode]] to take full advantage of ~org-publish~ and configure multiple outputs (WWW and Gemini). As of the now the following configuration is invoking the correct export function through org-publish but ox-hugo isn't finding the Hugo sub-trees.
#+begin_src emacs-lisp
(message "\n==== Exporting Hugo markdown ====")
(setq org-publish-project-alist
      (list
       (list "org-site:main"
             :recursive nil
             :base-directory "./"
             :publishing-function '(org-hugo-export-wim-to-md :all-subtrees nil :visible-only nil)
             :publishing-directory "./public"
             ;; :with-author nil           ;; Don't include author name
             ;; :with-creator t            ;; Include Emacs and Org versions in footer
             ;; :with-toc t                ;; Include a table of contents
             ;; :section-numbers nil       ;; Don't include section numbers
             :time-stamp-file nil)))    ;; Don't include time stamp in file

;; Generate the site output
(org-publish-all t)

(message "\n==== Export complete ====")
#+end_src

=RESULTS=
#+begin_src bash
Publishing file /home/shom/dev/shom.dev/content.org using `org-hugo-export-wim-to-md'
[ox-hugo] No valid Hugo post subtrees were found
#+end_src

*** Using hugo-export directly
In order to check sanity and solve the issue, I exported directly with ~org-hugo-export-wim-to-md~ which is straightforward since I've opted for a single org-content file and it worked as expected. So this is the configuration that is currently building the site:
#+begin_src emacs-lisp
(message "\n==== Exporting Hugo markdown ====")
(with-current-buffer (find-file "./content.org")
  (org-hugo-export-wim-to-md :all-subtrees nil :visible-only nil))

(message "\n==== Export complete ====")
#+end_src

I would like to get the ~org-publish~ route sorted out so I can publish to the Hugo site and the Gemini capsule with a single commit.

** DONE Static-site :emacs:gemini:
CLOSED: [2021-09-10 Fri 20:29]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210910_static-site
:EXPORT_HUGO_MENU:
:END:
=This entry and all previous ones are taken verbatim from the gemini capsule.=
*** Establishing a web presence
The gemini capsule has been an interesting experiment. In order to be the change I want to see, I will be creating a personal website/blog and the articles will appear both as html and gemtext. All entries prior to this have been made with Android+Termux+emacs. Going forward, the entries won't strictly be made from Termux.

*** Static site using org-mode
Org-mode has good html export capabilities and using it with SimpleCss [1] provides a pretty decent standalone webpage. However, creating a site that will auto-generate navigation and headers/footers is a bit more involved.

*** Hugo / Ox-gemtext
One option is to write the content in org format, use ox-hugo [2] for content export to enable Hugo for the site generation and use a gemtext exporter for gemini. ox-gemtext [3] does not handle gemtext markup for links properly and the generated TOC and section choices are not quite to my liking. Might need to investigate another option. Better to get started than find a perfect solution.

[1] https://simplecss.org
[2] https://ox-hugo.scripter.co
[3] https://codeberg.org/woozong/ox-gemtext

** DONE Framework :framework:
CLOSED: [2021-09-01 Wed 19:25]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210901_framework-first-impressions
:EXPORT_HUGO_MENU:
:END:
I've decided to cross post any of my content type toots from Mastodon (Fosstodon instance) here. I'm not sure if there's a good way to "tag" something aside from filenames so I can generate a toot vs post section? I'll include that info in the filename and I can investigate automation later.

*** First impression
I just received my frame.work (i5) DIY edition laptop. I haven't installed the RAM and NVMe yet (they need to come out from another machine first) but I'm pretty impressed with the build quality so far. The laptop feels solid and the expansion cards fit flush and tight. I'm excited about the 3:2 display, #modular design, and user #replaceable everything.
If folks are interested I can share my experience as I get it up and running.
 #framework
[[https://fosstodon.org/@shom/106849498535302510][🦣 fosstodon toot]]

*** Quick review
Since there was a decent bit of interest, here's a #framework #laptop update.

**** 1/X:
I opened up the case with the provided multi-tool (T6/phillips reversible bit with a spudger at the other end). The screws on the case are captive, which is great no worries about losing one. 1 of the 5 screws wasn't perfectly aligned but posed no issues, build is solid. The spudger allows the keyboard to be lifted (top view under keyboard shown). The QR codes link to documentation (which has a lot of photos).
**** 2/X:
The top plate is secured in place with magnets (gluing isn't the answer!) and feels very secure and still easy to remove with spudger. Only a single ribbon cable connects the top to the main board and it has plenty of play so working with it was comfortable and easy to detach and reattach.
Installing the components, RAM (which I had) and wifi-card (which I bought from frame.work) was very easy. I'd even say easier than desktop since everything is open and flat. I'll install the NVMe later.
**** 3/X:
They supplied an advisory to put some insulating tape under the touchpad cable to prevent a potential short (similar issue to pre-2012 Macbook SATA cable, could potentially rub over time and short). I appreciated the note and put down some electrical tape, photo attached, it was #righttorepair working in the manufacturer favor. The advisory sheet also had a couple stickers on it, which was cool.
All other hardware looks good and fits well. I'm not a huge fan of the keyboard, a bit mushy.
**** 4/4:
I have it configured with 2 USB-C ports, 1 USB-A, and 1 microSD card reader. Booting up went fine, I installed #pop_os from flash drive to microSD v90, suprisingly fast.
The BIOS (needed to disable secure boot) splash screen doesn't show FN key legend for boot device (F12) / BIOS (? I mashed a lot of FN keys), so that would be a nice touch to add.
Having WiFi issues, will investigate later. But everything else feels snappy and display looks good (3:2 ratio!!).
Happy to answer questions!

[[https://fosstodon.org/@shom/106854632055933583][🦣 fosstodon toot]]

** DONE Video Editing :foss:
CLOSED: [2021-08-08 Sun 16:00]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210808_video-editing
:EXPORT_HUGO_MENU:
:END:
I'm not a video person, I've made an occasional slideshow but even that has been over a decade ago. Recently, I needed to edit a video of an event and splice in the live recording with some pre-recorded segments and stitch it all together with some simple transitions. I didn't know what the "standard" FOSS offering was when it came to video editing. For photography I would go to Dark Table, GIMP for images, but what for video? I knew that Blender was an option but I wanted something with less steep of a learning curve even if that meant it was less featured. Luckily, there are several articles listing and comparing options, Shotcut and KDEnlive seemed to be the two worth investigating.

*** Shotcut
I started with Shotcut because it seemed like the lighther of the two packages. There were ample and good tutorials on YouTube that weren't too out of date, which got me up and running fairly quickly. Though I'm not a video person, I'm familiar with multi track editing and transforms, I just needed to know where the tools were and what they were called.

The interface was fairly intuitive after watching a short tutorial to get familiarized. It did slow down, choke, and crash a few times when working with my 3.5 hour long source video. The timeline zooming in and out (to make precise cuts) were a bit painful until I could cut everything into clips. I quickly learned their keyframe driven actions and also learned how to make a picture-in-picture transform. With all manipulations being filters, configuring transitions was also pretty easy.

However, the problem was stability. It crashed a few more times and then wouldn't preview the transitions at all unless I removed them and re-did them. Finally, it had lots of issues exporting (a big one was it having path issues that likely was more of a guix package manager complication).

*** KDEnlive
I turned to KDEnlive after it was recommended by the System Crafters community [1]. The workflow was very familiar between the two programs. Both of them support rearranging panels to customize the UI, that also helped in coming up to speed. The filters/transforms work a bit differently but there are again plenty of YouTube tutorials. KDEnlive has a lot more functionality it seems but it doesn't force you to use any of it to accomplish your task. It was also noticeably more stable (no crashes even with a 2.25 hour video render) and snappy (the timeline editing and zooming was never laggy or froze up the UI).

All in all, I would say both are good but I personally had a better experience with KDEnlive, even though I much preferred the key framing UI of Shotcut. The stability issues of Shotcut could very well be specific to my machine and environment, so I'm not writing it off and might revisit it. KDEnlive produced a quality video where the editing seems passably professional, which is a testament to the tool and not my skill. It's amazing to have such high quality FOSS software, thank you devs!


[1] [[https://systemcrafters.net/community/][https://systemcrafters.net/community/]]

** DONE Termux + Emacs :emacs:
CLOSED: [2021-08-07 Sat 15:59]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210807_termux-emacs
:EXPORT_HUGO_MENU:
:END:
One of the biggest advantages of Android is that it runs on Linux and Termux [1] is a very capable terminal emulator. Until pine phone (which I own for playing around on) type devices reach daily driver maturity (to use with job related corporate apps etc.) Termux is my only realistic option to run Linux terminal apps on the phone.

This is where being able to use Emacs as a TUI application on Termux is great. I actually run a slightly tweaked version of my desktop config which relies of doom-emacs [1]. I don't do anything complex but the editing experience is as comfortable as most other phone app. The editing experience is helped by evil bindings which are more key-sequence driven rather than key-combo driven. Although modifier keys are supported by Termux and a two row soft keyboard is fully customizable, evil bindings are easier. My config for the softkeys is shown here:

#+begin_src
extra-keys = [ \
    ['ESC','|','/','HOME','UP','END','~','DEL'], \
    ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT',':','<'] \
]
#+end_src

Also swiping over the soft keyboard reveals a text entry field which is a standard Android text field so text auto correct, gesture typing, and other keyboard features work as expected and is a lot more convenient for typing.

In fact this whole gemini capsule and all entries (so far) were created using Termux + Emacs including setting up the CI/CD for sr.ht.

While I use this setup for capturing notes in org mode, for tasks management I use Orgzly. That's another topic but in an even smaller nutshell, the biggest benefit is system notifications.

[1] https://termux.com
[2] https://github.com/hlissner/doom-emacs.

** DONE Latte Art :coffee:
CLOSED: [2021-08-02 Mon 19:11]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210802_latte-art
:EXPORT_HUGO_MENU:
:END:
Getting into home espresso has been fun, it's a rabbit hole like most fun things. And with rabbit holes it's best to decide how far you're willing to fall in before really starting down that hole. For me, it was an used Rancilio Silvia modded with a temperature PID controller and a refurbished Baratza Vario. At this level it's definitely possible to get good espresso and latte art if one tries, gets lucky, and practices... it's a good balance. Making one or maximum of two drinks most days is nearly not enough practice especially considering missed practice due to travel. But today was a lucky day, I got the best pour I've managed and it's exciting to see what's possible at the lower/est end of prosumer equipment.
#+ATTR_ORG: :width 1200

#+begin_export hugo
{{< figure src="../../20210802_LatteArt.jpg" width= "800px" title="Latte Art" alt="A cup of latte with layered heart design sitting on a figured walnut table top" align="center" >}}
#+end_export


** DONE Gemini Capsule :gemini:
CLOSED: [2021-08-02 Mon 19:00]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210802_gemini-capsule
:EXPORT_HUGO_MENU:
:END:
With a certain nostalgia for the early web ever present, a Gemini site (gemite? edit: I've learned it's called a capsule 💊🚀) is a good spiritual successor. Albeit much fewer under construction gifs and red text on black background...

=gemini://gem.shom.dev=

