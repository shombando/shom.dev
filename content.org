#+hugo_base_dir: .
#+hugo_level_offset: 0
#+seq_todo: DRAFT DONE
#+startup: indent

* Content
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu "main"
:END:
*** DONE Highland Chewie :art:
CLOSED: [2021-11-29 Mon 22:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211129_highland-chewie
:EXPORT_HUGO_MENU:
:END:
I picked up a water color kit for $2 with a brush and eight colors to try something new. I followed along with a [[https://www.instagram.com/paigepayne_creations/channel/][tutorial]] to paint a highland cow and my painting wasn't that great, but it was fun. Afterwards it felt a little like Chewbacca, so l added a bandoleer. Here's Higland Chewie:

#+ATTR_ORG: :width 800
[[./static/20211129_HighlandChewie.jpg]]

** DONE Emacs which-key prefix labels :emacs:
CLOSED: [2021-11-22 Mon 00:26]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211122_emacs-which-key-prefix-labels
:EXPORT_HUGO_MENU:
:END:
I've been using =evil-mode= for my Emacs configuration and [[https://github.com/cofi/evil-leader][evil-leader]] makes the key-mapping very straight-forward with the =set-key=. I wanted a few functions to be grouped together. =SPC= is bound as a leader key and there are a few frequent functions bound to single keys, the rest are grouped under other leaders.

However, the secondary leaders show up as =x â†’ +prefix= and it would nice to give the grouping a name. A lot of suggestions make use of the [[https://github.com/noctuid/general.el][General.el]] but at this time I didn't need anything beyond giving the grouping a name. I was not immediately able to find a way to create an empty keymap to put commands under (I did not know that's what I needed to do), like this: ~"e" '("eval" . (keymap))~

#+begin_src emacs-lisp
  (evil-leader/set-key
  "." 'find-file
  "," 'consult-buffer
  "'" 'execute-extended-command

  "e" '("eval" . (keymap))
  "eb" '("buffer" . eval-buffer)
  "er" '("region" . eval-region)

  "g" '("magit" . (keymap))
  "gc" '("commit" . magit-commit)
  "gf" '("fetch" . magit-fetch)
  "gg" '("status" . magit-status)

  "q" '("quit" . (keymap))
  "qb" '("buffer" . kill-this-buffer)
  "qq" '("save&quit" . save-buffers-kill-terminal)

  "h" '("help" . (keymap))
  "hf" '("function" . describe-function)
  "hk" '("key" . describe-key)
  "hv" '("variable" . describe-variable)

  "w" '("window" . (keymap))
  "wd" '("delete" . delete-window)
  "wo" '("delete other" . delete-other-windows)
  "ww" '("ace-window" . aw-show-dispatch-help))
#+end_src

** DONE Emacs custom configuration :emacs:
CLOSED: [2021-11-21 Sun 17:35]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211121_emacs-custom-configuration
:EXPORT_HUGO_MENU:
:END:

I crafted a custom configuration for Emacs and have been using it for the past few weeks. This is something I didn't really see myself doing when I started using Emacs, it seemed "very advanced". This was my journey from a noob to a different kind of noob!

*** Doom 
I started my Emacs journey with [[https://github.com/hlissner/doom-emacs/][Doom]] and was learning things along the way. This was a great way to get started by borrowing configuration snippets and blindly copying and pasting, which got me up and running quickly. I did find the vastness of Doom intimidating and knew that I wasn't using all the functionality and wasn't really discovering it given the jam packed key-maps.
*** Vanilla Chocolate Swirl  
Around the time when I was understanding how to copy paste configs more, there was some community discussion around making Emacs more inviting to new users. As a new user, I felt qualified to collect my thoughts. In an attempt to help new user on-boarding, I even created a [[https://github.com/shombando/EmacsVanillaChocolateSwirl][literate config]] that others found useful enough to contribute to. I understood things a lot better through that exercise and felt comfortable enough to try packages by myself. 
*** Back to Doom
Actually, I never left Doom while doing the above exercise. I did not want to invest the time necessary to learn to make my own config. Also, having all the keybindings already setup and showing up nicely in ~which-key~ was great. This is also before =native-comp= was merged into Emacs 28 master branch so I was having issues with compatibility. The final push was that using Doom with all its modules was not performant on a Windows machine that I don't manage but have to use. 
*** Custom Config
During this time, I kept disabling more and more Doom modules and replacing some of them with other options. There seems to be a lot of excitement about light-weight packages like =vertico=, =consult=, etc. that are more single task focused which I started integrating. I started using =orderless=, =embark= and =ace-window= as well and with those, I felt I had enough to use a custom config and be productive. I'm using [[https://github.com/plexus/chemacs2][Chemacs2]] to have both my Doom config and my [[https://git.sr.ht/~shom/.emacs.custom][custom config]] installed but have been exclusively using the config.

I'll make a few short posts with some of the things I learned in this process with some code snippets as examples.  

** DONE Sony A7c initial customization :camera:
CLOSED: [2021-10-27 Wed 00:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211026_sony-a7c-initial-customization
:EXPORT_HUGO_MENU:
:END:
I have been using the Sony A7ii for a long while. It was my first full-frame and mirrorless camera. The A7ii is a great camera and in a lot of ways I have been very spoiled by it. However, when the A7iii came out with fairly significant improvements I resisted the urge to upgrade and decided to wait for the A7iv.

The A7iv was released last week and in many regards is a "perfect" camera. It has made a lot of improvements in an already excellent line-up and is perhaps justifiably is also priced 25% more than it's predecessor. However, most of the advancements were made in the video department (save for the new 33MP sensor) and that is not the feature set I use. Also, given the shortage of electronic parts it is unclear when pre-orders would get into the hands of users. Ultimately, after waiting for an agonizing 3.5 years after the release of the A7iii, I decided not to buy the A7iv.

Instead, I opted for the A7c which was released in 2020 and is essentially an A7iii in a smaller body. It loses the dual SD cards, 2 custom buttons, and a joystick but gains a fully articulating LCD monitor, compactness, and a range-finder look and feel. I decided to get it with the compact (but quite excellent) 28-60 f/4-5.6 kit lens and make this is my "only" camera for both landscape and underwater photography (with a Seafrog case I intend to get).

All of this preface to get to my main point. I have customized a lot of functions of the A7ii that I no longer remember the "how" or the "why" behind those changes. Here are the main changes I made and replicated on the A7c before the first shoot.

Image from first shoot:
#+ATTR_ORG: :width 800
[[./static/Shom_20211026_McDonaldLake_00015.jpg]]

*** Back-button auto-focus
Decoupling auto-focus from the shutter action allows me to focus on a subject and wait for the right moment to click the shutter without worrying about refocusing/losing focus. This is accomplished in two pieces, first the shutter and auto-focus is decoupled and then the auto-focus function is then remapped to a button on the back of the camera.
**** Decouple auto-focus from shutter
The current Sony terminology for decoupling auto-focus from shutter is =AF w/ shutter=. In the A7C it is found in ~Menu - Camera 1 - AF2~ (Page 5).

It is also a good idea to turn off =Pre-AF Off= which moves the focus point based on the scene changes even before auto-focus is actuated (to improve speed).

~NOTE:~ Shutter half-press is not customizable on the A7c (unlike A7ii)
**** Remap auto-focus to another button
I'm choosing to use the default =AF-On= button on the back of the camera for now. But it can be customized to any of the other buttons in ~Menu - Camera 2 - Custom Operation1 - Custom Key~ (Page 9).
*** DRO/Auto HDR
The LCD panel on the camera shows the JPEG preview of the image regardless of whether you're shooting RAW. The Dynamic Range Optimization (DRO) boosts the shadows and that's what shows up in the LCD, which in turn means that the RAW is underexposed. The =DRO/Auto HDR= setting can be turned off in ~Menu - Camera 1 - Color/WB/Img.Processing1~ (Page 11).

This [[https://www.youtube.com/watch?v=21Z7l1-h71E][video from Nick Page]] describes the issue and suggests this fix.
*** Long Exposure NR
By default the camera attempts to do Noise Reduction (NR) when doing long-exposure. While this does create a lower noise image it comes at the expense of "timing out" for the same length of time the original exposure was. This makes sense since the camera takes a "dark" image with the shutter closed as a noise reference and subtracts it from the original exposure to remove that noise. However, this is a major hindrance for doing multiple longer exposure shots especially as the light is fading. Turning the  =Long Exposure NR= feature off is necessary for those scenarios. The option is found in ~Menu - Camera 1 - Quality/Image Size2~ (Page 2).

~NOTE:~ There's a related setting for =High ISO NR=.

~NOTE:~ If attempting proper astrophotography then multiple dark frames are needed anyway for proper post processing.I'll

These are the main features that would have "bit" me if I didn't change them before trying to use the camera. If there are others, I will note them here after they bite me.

** DRAFT Org-capture template for Hugo
:PROPERTIES:
:EXPORT_FILE_NAME: 20211025_org-capture-template-for-hugo
:EXPORT_HUGO_MENU:
:END:
Need to get the original date of the post as part of the slug title in capture template. This might cause discrepancy if the date of capture isn't the date of publish (which will show up in Hugo metadata), so maybe the slug needs to be updated upon org state change from DRAFT to DONE.
** DONE org-bars view for outlining/folding :emacs:
CLOSED: [2021-10-23 Sat 23:37]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211023_org-bars-view-for-outlining-folding
:EXPORT_HUGO_MENU:
:END:
I came across this new [[https://github.com/tonyaldon/org-bars][org-bars]] package that shows folding indicators and lines to indicate the groupings. In the [[https://www.reddit.com/r/emacs/comments/qdze6g/new_orgbars_add_bars_to_the_virtual_indentation/][reddit]] discussion I also discovered that there's another package [[https://github.com/legalnonsense/org-visual-outline][org-visual-outline]] but it actually requires configuring two packages so I didn't try it.

However, based on the discussion in the comments it seems that ~org-bars~ supports narrowing of the buffer (and it works great) which visual-outline does not. I discovered a visual bug and filed a [[https://github.com/tonyaldon/org-bars/issues/2][report]], so hopefully it's an easy fix but it's not a breaking issue.

Here's the configuration I'm using based on the recommendations in the documentation.
#+begin_src emacs-lisp
;; Org-bars configuration ====================================================
(use-package org-bars
  :after org
  :ensure t
  :custom
 (defun org-no-ellipsis-in-headlines ()
 "Remove use of ellipsis in headlines.
See `buffer-invisibility-spec'."
  (remove-from-invisibility-spec '(outline . t))
  (add-to-invisibility-spec 'outline))
 (add-hook 'org-mode-hook #'org-bars-mode)
 (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines))
#+end_src

Here's a screenshot of my Hugo content buffer showing ~org-bars~:
#+ATTR_ORG: :width 600
[[./static/20211023_org-bars.png]]

** DONE Wine and CrossOver to use Lightroom on Linux :foss:
CLOSED: [2021-10-16 Sat 00:07]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211016_wine-and-crossover-lightroom
:EXPORT_HUGO_MENU:
:END:
I have been using [[https://www.darktable.org/][Darktable]] and transitioning away from Adobe's Lightroom. However, I have almost a decade of edits and experience with Lightroom so doing a cold-turkey switch is proving to be challenging. So I decided to investigate if I could "natively" run Lightroom (without a VM) so I decided to give =wine= a try.

I use =guix= as a package manager on Pop!_OS and guix has =wine= but it did a while to build and install. I needed to download a Lightroom Classic executable but like a lot of software it's an installer that does the downloading and installing. However, Adobe won't allow you to download a Windows installer on Linux, so I had to use [[https://gitlab.com/ntninja/user-agent-switcher][User-Agent Switcher]] on Firefox to Windows to even get the installer... this is part of the frustration of software you lease.

=wine= will ask to install mono installer, which is does by itself and then the same thing with Gecko installer. Overall a pretty smooth process but the Adobe installer failed miserably with a less than helpful error.
#+begin_src shell
Crash Annotation GraphicsCriticalError: |[0][GFX1]: Potential driver version mismatch ignored due to missing DLLs 0.0.0.0 and 0.0.0.0 (t=18.9854
) [GFX1]: Potential driver version mismatch ignored due to missing DLLs 0.0.0.0 and 0.0.0.0
#+end_src

At this point I didn't have high hopes for avoiding the Windows VM route but  wanted to give a quick try to [[https://www.codeweavers.com/crossover][CrossOver]]. I tried one of their supported applications (Notepad++) and that worked great. They also support "unlisted application" but pointing the Adobe installer led to a lot of nothing, the logs were not very helpful either. At this point I decided to abandon this path and go the VM route to make progress on my actual photo editing goals. However, Steam's [[https://www.simpler.website/html/2020/12/steam-play.html][Proton]] could be a option to investigate in the future. Are there any other good solutions?

** DONE Fully automated deployment :emacs:foss:
CLOSED: [2021-10-05 Tue 05:53]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211005_fully-automated-deployment
:EXPORT_HUGO_MENU:
:END:
Up until the last commit, the site was being written in Org Mode, exported using ox-hugo, and Hugo was invoked manually to generate the html all locally. The generated =public= folder was what was being pushed to SourceHut for the deployment. This will be first post which will only commit the actual content in org format only and the full CI/CD will happen on SourceHut.

*** Using org-publish
I'll be following along with the System Crafters' [[https://systemcrafters.net/publishing-websites-with-org-mode/][Publishing Website with Org Mode]] to take full advantage of ~org-publish~ and configure multiple outputs (WWW and Gemini). As of the now the following configuration is invoking the correct export function through org-publish but ox-hugo isn't finding the Hugo sub-trees.
#+begin_src emacs-lisp
(message "\n==== Exporting Hugo markdown ====")
(setq org-publish-project-alist
      (list
       (list "org-site:main"
             :recursive nil
             :base-directory "./"
             :publishing-function '(org-hugo-export-wim-to-md :all-subtrees nil :visible-only nil)
             :publishing-directory "./public"
             ;; :with-author nil           ;; Don't include author name
             ;; :with-creator t            ;; Include Emacs and Org versions in footer
             ;; :with-toc t                ;; Include a table of contents
             ;; :section-numbers nil       ;; Don't include section numbers
             :time-stamp-file nil)))    ;; Don't include time stamp in file

;; Generate the site output
(org-publish-all t)

(message "\n==== Export complete ====")
#+end_src

=RESULTS=
#+begin_src bash
Publishing file /home/shom/dev/shom.dev/content.org using `org-hugo-export-wim-to-md'
[ox-hugo] No valid Hugo post subtrees were found
#+end_src

*** Using hugo-export directly
In order to check sanity and solve the issue, I exported directly with ~org-hugo-export-wim-to-md~ which is straightforward since I've opted for a single org-content file and it worked as expected. So this is the configuration that is currently building the site:
#+begin_src emacs-lisp
(message "\n==== Exporting Hugo markdown ====")
(with-current-buffer (find-file "./content.org")
  (org-hugo-export-wim-to-md :all-subtrees nil :visible-only nil))

(message "\n==== Export complete ====")
#+end_src

I would like to get the ~org-publish~ route sorted out so I can publish to the Hugo site and the Gemini capsule with a single commit.

** DONE Static-site :emacs:gemini:
CLOSED: [2021-09-10 Fri 20:29]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210910_static-site
:EXPORT_HUGO_MENU:
:END:
=This entry and all previous ones are taken verbatim from the gemini capsule.=
*** Establishing a web presence
The gemini capsule has been an interesting experiment. In order to be the change I want to see, I will be creating a personal website/blog and the articles will appear both as html and gemtext. All entries prior to this have been made with Android+Termux+emacs. Going forward, the entries won't strictly be made from Termux.

*** Static site using org-mode
Org-mode has good html export capabilities and using it with SimpleCss [1] provides a pretty decent standalone webpage. However, creating a site that will auto-generate navigation and headers/footers is a bit more involved.

*** Hugo / Ox-gemtext
One option is to write the content in org format, use ox-hugo [2] for content export to enable Hugo for the site generation and use a gemtext exporter for gemini. ox-gemtext [3] does not handle gemtext markup for links properly and the generated TOC and section choices are not quite to my liking. Might need to investigate another option. Better to get started than find a perfect solution.

[1] https://simplecss.org
[2] https://ox-hugo.scripter.co
[3] https://codeberg.org/woozong/ox-gemtext

** DONE Framework :framework:
CLOSED: [2021-09-01 Wed 19:25]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210901_framework-first-impressions
:EXPORT_HUGO_MENU:
:END:
I've decided to cross post any of my content type toots from Mastodon (Fosstodon instance) here. I'm not sure if there's a good way to "tag" something aside from filenames so I can generate a toot vs post section? I'll include that info in the filename and I can investigate automation later.

*** First impression
I just received my frame.work (i5) DIY edition laptop. I haven't installed the RAM and NVMe yet (they need to come out from another machine first) but I'm pretty impressed with the build quality so far. The laptop feels solid and the expansion cards fit flush and tight. I'm excited about the 3:2 display, #modular design, and user #replaceable everything.
If folks are interested I can share my experience as I get it up and running.
 #framework
[[https://fosstodon.org/@shom/106849498535302510][ðŸ¦£ fosstodon toot]]

*** Quick review
Since there was a decent bit of interest, here's a #framework #laptop update.

**** 1/X:
I opened up the case with the provided multi-tool (T6/phillips reversible bit with a spudger at the other end). The screws on the case are captive, which is great no worries about losing one. 1 of the 5 screws wasn't perfectly aligned but posed no issues, build is solid. The spudger allows the keyboard to be lifted (top view under keyboard shown). The QR codes link to documentation (which has a lot of photos).
**** 2/X:
The top plate is secured in place with magnets (gluing isn't the answer!) and feels very secure and still easy to remove with spudger. Only a single ribbon cable connects the top to the main board and it has plenty of play so working with it was comfortable and easy to detach and reattach.
Installing the components, RAM (which I had) and wifi-card (which I bought from frame.work) was very easy. I'd even say easier than desktop since everything is open and flat. I'll install the NVMe later.
**** 3/X:
They supplied an advisory to put some insulating tape under the touchpad cable to prevent a potential short (similar issue to pre-2012 Macbook SATA cable, could potentially rub over time and short). I appreciated the note and put down some electrical tape, photo attached, it was #righttorepair working in the manufacturer favor. The advisory sheet also had a couple stickers on it, which was cool.
All other hardware looks good and fits well. I'm not a huge fan of the keyboard, a bit mushy.
**** 4/4:
I have it configured with 2 USB-C ports, 1 USB-A, and 1 microSD card reader. Booting up went fine, I installed #pop_os from flash drive to microSD v90, suprisingly fast.
The BIOS (needed to disable secure boot) splash screen doesn't show FN key legend for boot device (F12) / BIOS (? I mashed a lot of FN keys), so that would be a nice touch to add.
Having WiFi issues, will investigate later. But everything else feels snappy and display looks good (3:2 ratio!!).
Happy to answer questions!

[[https://fosstodon.org/@shom/106854632055933583][ðŸ¦£ fosstodon toot]]

** DONE Video Editing :foss:
CLOSED: [2021-08-08 Sun 16:00]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210808_video-editing
:EXPORT_HUGO_MENU:
:END:
I'm not a video person, I've made an occasional slideshow but even that has been over a decade ago. Recently, I needed to edit a video of an event and splice in the live recording with some pre-recorded segments and stitch it all together with some simple transitions. I didn't know what the "standard" FOSS offering was when it came to video editing. For photography I would go to Dark Table, GIMP for images, but what for video? I knew that Blender was an option but I wanted something with less steep of a learning curve even if that meant it was less featured. Luckily, there are several articles listing and comparing options, Shotcut and KDEnlive seemed to be the two worth investigating.

*** Shotcut
I started with Shotcut because it seemed like the lighther of the two packages. There were ample and good tutorials on YouTube that weren't too out of date, which got me up and running fairly quickly. Though I'm not a video person, I'm familiar with multi track editing and transforms, I just needed to know where the tools were and what they were called.

The interface was fairly intuitive after watching a short tutorial to get familiarized. It did slow down, choke, and crash a few times when working with my 3.5 hour long source video. The timeline zooming in and out (to make precise cuts) were a bit painful until I could cut everything into clips. I quickly learned their keyframe driven actions and also learned how to make a picture-in-picture transform. With all manipulations being filters, configuring transitions was also pretty easy.

However, the problem was stability. It crashed a few more times and then wouldn't preview the transitions at all unless I removed them and re-did them. Finally, it had lots of issues exporting (a big one was it having path issues that likely was more of a guix package manager complication).

*** KDEnlive
I turned to KDEnlive after it was recommended by the System Crafters community [1]. The workflow was very familiar between the two programs. Both of them support rearranging panels to customize the UI, that also helped in coming up to speed. The filters/transforms work a bit differently but there are again plenty of YouTube tutorials. KDEnlive has a lot more functionality it seems but it doesn't force you to use any of it to accomplish your task. It was also noticeably more stable (no crashes even with a 2.25 hour video render) and snappy (the timeline editing and zooming was never laggy or froze up the UI).

All in all, I would say both are good but I personally had a better experience with KDEnlive, even though I much preferred the key framing UI of Shotcut. The stability issues of Shotcut could very well be specific to my machine and environment, so I'm not writing it off and might revisit it. KDEnlive produced a quality video where the editing seems passably professional, which is a testament to the tool and not my skill. It's amazing to have such high quality FOSS software, thank you devs!


[1] https://wiki.systemcrafters.cc/community/chat-with-us/

** DONE Termux + Emacs :emacs:
CLOSED: [2021-08-07 Sat 15:59]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210807_termux-emacs
:EXPORT_HUGO_MENU:
:END:
One of the biggest advantages of Android is that it runs on Linux and Termux [1] is a very capable terminal emulator. Until pine phone (which I own for playing around on) type devices reach daily driver maturity (to use with job related corporate apps etc.) Termux is my only realistic option to run Linux terminal apps on the phone.

This is where being able to use Emacs as a TUI application on Termux is great. I actually run a slightly tweaked version of my desktop config which relies of doom-emacs [1]. I don't do anything complex but the editing experience is as comfortable as most other phone app. The editing experience is helped by evil bindings which are more key-sequence driven rather than key-combo driven. Although modifier keys are supported by Termux and a two row soft keyboard is fully customizable, evil bindings are easier. My config for the softkeys is shown here:

#+begin_src
extra-keys = [ \
    ['ESC','|','/','HOME','UP','END','~','DEL'], \
    ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT',':','<'] \
]
#+end_src

Also swiping over the soft keyboard reveals a text entry field which is a standard Android text field so text auto correct, gesture typing, and other keyboard features work as expected and is a lot more convenient for typing.

In fact this whole gemini capsule and all entries (so far) were created using Termux + Emacs including setting up the CI/CD for sr.ht.

While I use this setup for capturing notes in org mode, for tasks management I use Orgzly. That's another topic but in an even smaller nutshell, the biggest benefit is system notifications.

[1] https://termux.com
[2] https://github.com/hlissner/doom-emacs.

** DONE Latte Art :coffee:
CLOSED: [2021-08-02 Mon 19:11]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210802_latte-art
:EXPORT_HUGO_MENU:
:END:
Getting into home espresso has been fun, it's a rabbit hole like most fun things. And with rabbit holes it's best to decide how far you're willing to fall in before really starting down that hole. For me, it was an used Rancilio Silvia modded with a temperature PID controller and a refurbished Baratza Vario. At this level it's definitely possible to get good espresso and latte art if one tries, gets lucky, and practices... it's a good balance. Making one or maximum of two drinks most days is nearly not enough practice especially considering missed practice due to travel. But today was a lucky day, I got the best pour I've managed and it's exciting to see what's possible at the lower/est end of prosumer equipment.
#+ATTR_ORG: :width 1200
[[./static/20210802_LatteArt.jpg]]

** DONE Gemini Capsule :gemini:
CLOSED: [2021-08-02 Mon 19:00]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210802_gemini-capsule
:EXPORT_HUGO_MENU:
:END:
With a certain nostalgia for the early web ever present, a Gemini site (gemite? edit: I've learned it's called a capsule ðŸ’ŠðŸš€) is a good spiritual successor. Albeit much fewer under construction gifs and red text on black background...

=gemini://gem.shom.dev=

* Home
:PROPERTIES:
:EXPORT_HUGO_SECTION:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu "main" :weight -2 :title Home
:END:

* Tags
:PROPERTIES:
:EXPORT_HUGO_SECTION: tags 
:EXPORT_HUGO_MENU: :menu "main" :weight -1 :title Tags
:EXPORT_FILE_NAME: _index
:END:

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu "main"
:END:
