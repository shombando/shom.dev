#+hugo_base_dir: .
#+hugo_level_offset: 0
#+seq_todo: DRAFT DONE
#+startup: indent

* Content
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu "main"
:END:
** DONE Markdown anchor linking on Github                        :emacs:foss:
CLOSED: [2022-09-18 Sun 02:11]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 20220917_markdown-anchor-linking-on-github
:EXPORT_HUGO_IMAGES: /posts/20220917_markdown-anchor-linking-on-github/user-anchors-as-p.jpg
:EXPORT_HUGO_MENU:
:END:
I've been using =org-transclusion= for an [[* "Inverse literate" config via org-transclusion]["inverse literate"]] Emacs config and tangling all the config chunks on save and exporting it as a markdown file. This has worked fairly well except for the fact that org-export creates =org-export= regenerates ids for all the headings which creates noise in the git commit history and also in-page anchors can't be reliably linked to a specific part of the document (independent of the git forge's markdown parsing implementation).

In order to remedy that without relying on a full-featured package without additional capabilities, I decided to adapt a snippet of [[https://github.com/alphapapa][@alphapapa]]'s [[https://github.com/alphapapa/unpackaged.el][unpackaged configuration]], which advices the export to create unique anchors that won't change between exports (unless the headings themselves have been changed). However, this is ended being the beginning of the solution and how I discovered GitHub renders markdown internal links to HTML is not consistent with how Sourcehut does it.

#+begin_details
#+begin_summary
I added the following snippet into my =config.org= file's ~after-save-hook~:
#+end_summary
#+begin_src emacs-lisp
  ;;usefulanchors_begin
;; From @alphapapa's unpackaged repo https://github.com/alphapapa/unpackaged.el#export-to-html-with-useful-anchors
(use-package ox
  :config
  (define-minor-mode unpackaged/org-export-html-with-useful-ids-mode
    "Attempt to export Org as HTML with useful link IDs.
Instead of random IDs like \"#orga1b2c3\", use heading titles,
made unique when necessary."
    :global t
    (if unpackaged/org-export-html-with-useful-ids-mode
        (advice-add #'org-export-get-reference :override #'unpackaged/org-export-get-reference)
      (advice-remove #'org-export-get-reference #'unpackaged/org-export-get-reference)))

  (defun unpackaged/org-export-get-reference (datum info)
    "Like `org-export-get-reference', except uses heading titles instead of random numbers."
    (let ((cache (plist-get info :internal-references)))
      (or (car (rassq datum cache))
          (let* ((crossrefs (plist-get info :crossrefs))
                 (cells (org-export-search-cells datum))
                 ;; Preserve any pre-existing association between
                 ;; a search cell and a reference, i.e., when some
                 ;; previously published document referenced a location
                 ;; within current file (see
                 ;; `org-publish-resolve-external-link').
                 ;;
                 ;; However, there is no guarantee that search cells are
                 ;; unique, e.g., there might be duplicate custom ID or
                 ;; two headings with the same title in the file.
                 ;;
                 ;; As a consequence, before re-using any reference to
                 ;; an element or object, we check that it doesn't refer
                 ;; to a previous element or object.
                 (new (or (cl-some
                           (lambda (cell)
                             (let ((stored (cdr (assoc cell crossrefs))))
                               (when stored
                                 (let ((old (org-export-format-reference stored)))
                                   (and (not (assoc old cache)) stored)))))
                           cells)
                          (when (org-element-property :raw-value datum)
                            ;; Heading with a title
                            (unpackaged/org-export-new-title-reference datum cache))
                          ;; NOTE: This probably breaks some Org Export
                          ;; feature, but if it does what I need, fine.
                          (org-export-format-reference
                           (org-export-new-reference cache))))
                 (reference-string new))
            ;; Cache contains both data already associated to
            ;; a reference and in-use internal references, so as to make
            ;; unique references.
            (dolist (cell cells) (push (cons cell new) cache))
            ;; Retain a direct association between reference string and
            ;; DATUM since (1) not every object or element can be given
            ;; a search cell (2) it permits quick lookup.
            (push (cons reference-string datum) cache)
            (plist-put info :internal-references cache)
            reference-string))))

  (defun unpackaged/org-export-new-title-reference (datum cache)
    "Return new reference for DATUM that is unique in CACHE."
    (cl-macrolet ((inc-suffixf (place)
                               `(progn
                                  (string-match (rx bos
                                                    (minimal-match (group (1+ anything)))
                                                    (optional "--" (group (1+ digit)))
                                                    eos)
                                                ,place)
                                  ;; HACK: `s1' instead of a gensym.
                                  (-let* (((s1 suffix) (list (match-string 1 ,place)
                                                             (match-string 2 ,place)))
                                          (suffix (if suffix
                                                      (string-to-number suffix)
                                                    0)))
                                    (setf ,place (format "%s--%s" s1 (cl-incf suffix)))))))
      (let* ((title (org-element-property :raw-value datum))
             (ref (replace-regexp-in-string "%.." "-" (url-hexify-string (substring-no-properties title)))) ;replace all encoded characters with dashes
             (parent (org-element-property :parent datum)))
        (while (--any (equal ref (car it))
                      cache)
          ;; Title not unique: make it so.
          (if parent
              ;; Append ancestor title.
              (setf title (concat (org-element-property :raw-value parent)
                                  "--" title)
                    ref (url-hexify-string (substring-no-properties title))
                    parent (org-element-property :parent parent))
            ;; No more ancestors: add and increment a number.
            (inc-suffixf ref)))
        ref))))
;;usefulanchors_end
#+end_src
#+end_details

#+begin_export hugo
{{< exif src="github-not-linking-hexcoded.png" caption="GitHub's internal linking works but hex coded does not" alt="Screenshot of Readme.md file with source insepctor open in Firefox showing the actual header anchor is GitHub's internal linking and there's separate <p> with the user exported anchor from markdown." showexif="false" >}}
#+end_export
=NOTE:= actual header anchor is GitHub's internal linking and there's separate <p> with the user exported anchor from markdown, just interesting.

Turns out that GitHub won't do anchors with any non-alphanumeric links even if they're properly hex-coded. I had to modify the function which creates the unique slugs because by default it hex encodes the url, which is the "correct/smart" thing to do and Sourcehut happily renders that. But GitHub generates its own slugs which removes all non-alphanumeric characters (which makes the slug less readable, I prefer more readable urls).
#+begin_src emacs-lisp
  (replace-regexp-in-string "%.." "-" (url-hexify-string (substring-no-properties title)))
#+end_src

#+begin_export hugo
{{< exif src="user-anchors-as-p.png" caption="All non-alphanumeric replaced with dashes" alt="Similiar to other screenshot except anchor words are dash separated. Screenshot of Readme.md file with source insepctor open in Firefox showing the actual header anchor is GitHub's internal linking and there's separate <p> with the user exported anchor from markdown." showexif="false" >}}
#+end_export

Another excellent example of how [[/tags/foss][#foss]] enables these customizations by empowering the user. 

** DONE Bonaire Art                                              :art:travel:
CLOSED: [2022-05-30 Mon 11:26]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220530_bonaire-art
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:EXPORT_HUGO_IMAGES: "/posts/20220530_bonaire-art/bonaire.jpg"
:END:
I was privileged to visit Bonaire in the Dutch Caribbean last week. While the whole reason for the trip was scuba diving (the entire island is essentially a dive site, just walk out into ocean in any direction), I also enjoyed the downtown area and found the art very charming. Here are a few pieces that caught my eye:

#+begin_export hugo
{{< exif src="bonaire.jpg" caption="Bonaire" alt="A sign painted on a wall reading Bonaire with a red heart painted between bon and aire. The red heart has the shape of the island inlayed in white." showexif="false" >}}
#+end_export

My favorite mural was definitely this whimsical scene of this mural of a guy vibin' with some chill goats and playing his ukulele. The island has a lot of wild/stray goats and they're definitely quite chill and the baby goats are super cute, kid you not! The [[https://dodiciartproject.com/][artist is Dodici]] and has a very unique style.
#+begin_export hugo
{{< exif src="goats.jpg" caption="Dodici's goats" alt="Street mural of a man wearing a straw hat, red shirt, blue shorts, reclining while playing a ukuele while three goats surround him chewing leaves with funky expressions." showexif="false" >}}
#+end_export

The island is also famous for its flamingos grazing in the salt flats. Bonaire is a sea-salt producing island and there are huge mounds of salt that are stacked before shipping, all of that area is a good hang for flamingos. I was lucky to get to see some flamingos up close while at the Washington Slagbaai National Park. But I think I saw a lot more flamingo art, which was also great.  
#+begin_export hugo
{{< exif src="flamingos.jpg" caption="Wall mural of a flock of flamingos standing and grazing in the salt flats. Only one of them is standing on one leg, the classic pose." showexif="false" >}}
#+end_export

#+begin_export hugo
{{< exif src="saltmounds.jpg" caption="Flamingos take flight over the salt mounds" alt="Wall mural of four flamingos at different distances away from the observer take flight with the salt mounts in the background and the pink salt flats in the foreground." showexif="false" >}}
#+end_export

I enjoyed the simple style of this mermaid and the paint colors effectively capture all the hues of the waters around Bonaire.
#+begin_export hugo
{{< exif src="mermaid.jpg" caption="Mermaid" alt="Outline of a mermaid with the middle filled with shades of blue and green paint." showexif="false" >}}
#+end_export

Dushi means all the things in life that are good and sweet. The artist tag is @kayakorsou but I wasn't able to find an online presence.
#+begin_export hugo
{{< exif src="hummingbird.jpg" caption="Life is dushi in Bonaire" alt="Wall mural of an underwater scene with corals and fish with a mermaid floating and taking the scene in. On the right side there's a layer of stripes with a massive hummingbird seeming to hold up a sign reading 'dushi Bonaire @kaya korsou'" showexif="false" >}}
#+end_export

We can't end without yet another cute flamingo!
#+begin_export hugo
{{< exif src="flamingo.jpg" caption="Cute cartoony flamingo" alt="A flamingo painted on a wall with more of a cartoony style with big pretty eyes and the classic standing on one leg pose." showexif="false" >}}
#+end_export

** DONE From fish on Gnome Terminal to zsh with Starship on Alacritty :foss:linux:
CLOSED: [2022-05-14 Sat 17:01]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220514_from-fish-on-gnome-terminal-to-zsh-with-starship-on-alacritty
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:END:
*** Gnome Terminal and fish
I have been using the default Gnome Terminal with the [[https://fishshell.com/][fish shell]] for a long time and it has served me well. Since =fish= provides a lot of functionality out of the box (including meta information about git repos in the prompt), I have stuck with it for the convenience. However, there is ONE major downside to fish; it is not POSIX compliant.

*** Why ditch fish?
See what had happened was... Non-POSIX compliant wasn't a big problem until I found myself writing a couple helper functions with =fish= syntax. This was a proverbial red-flag since =fish= becomes a hard dependency for all my systems going forward. This coupled with the how =fish= saves aliases (as separate functions when you call ~funcsave aliasname~) which I always found a bit tedious led me to finally think about moving to =zsh=.

*** What would I miss most from fish and Gnome Terminal?
The baseline against which I'm making this list is default =bash= on Ubuntu based systems, which is what I've had the most exposure to. So compared to that experience:
- Right off the bat, I like =fish='s default prompt and never felt the need to customize it because it showed the current path and for git repos shows the current branch.
- Completions! The fish completions are great and the history sub-string search is excellent.
- Syntax highlighting of commands as you type so you can easily spot typos as they happen.
- As for Gnome Terminal, I wouldn't really miss anything assuming I could theme the terminal a bit. What I wouldn't miss is the lack of a configuration file that could be added to my other dotfiles.

While this list serves as the basis for the requirements of the new tool-chain, the top requirement was plain-text based configuration management, which can be placed under version control. The other very soft requirement was tools developed using [[https://www.rust-lang.org/][Rust]]. I've done a few "hello world" things in Rust and want to continue learning more and figured that using more Rust based tools is a good path to learning and contributing. With all that in mind, I landed on [[Prompt: starship]], [[Terminal: Alacritty]], and [[Shell: zsh]].

*** Prompt: starship
I decided to separate the prompt from the shell with [[https://starship.rs/][Starship]]. =starship= is highly customizable but it does everything I want from it out of the box; which is, cleanly and minimally replicate features of the =fish= prompt. There are a lot of "themes" and configurations which I'm sure I'd love to tweak and [[https://www.youtube.com/watch?v=AbSehcT19u0][yak-shave]] someday, but I enjoy the out of box experience. To fully take advantage of the default configuration, you need a nerd font (a font that has been patched with icons that are often used to represent software tools/concepts/applications). I'm a fan of the JetBrains Mono and there is a [[https://github.com/jtbx/jetbrainsmono-nerdfont][patched nerd font variant]].

*** Terminal: Alacritty
I have seen =Alacritty= getting praised for being fast, functional, configurable, and it being cross-platform tool written in Rust was all I needed to land on it. Some of the speed tests are pretty impressive, the configuration is very straight forward, and there are tons of resources so I won't delve into things that have been covered very well everywhere.

One big advantage of Alacritty that I don't see touted often is a very keyboard focused workflow. I especially enjoy the vim-like visual mode (bound to =CTRL= + =SPACE= by default) which allows navigating within the buffer, searching the output, and making text selections and copying from anywhere in the buffer all with the familiar vim keybindings. 

Here's my minimal =Alacritty= configuration: 

#+begin_src yaml
  # Configuration for Alacritty, the GPU enhanced terminal emulator.
  window:
    # Window dimensions (changes require restart)
    padding:
      x: 10
      y: 5
    decorations: none
    opacity: 0.85

  # Font configuration
  font:
    size: 14.0
    normal:
      family: JetBrains Mono Nerd Font
      style: Regular

  # Colors (Nord)
  colors:
    # Default colors
    primary:
      background: '0x2E3440'
      foreground: '0xD8DEE9'

    # Normal colors
    normal:
      black:   '0x3B4252'
      red:     '0xBF616A'
      green:   '0xA3BE8C'
      yellow:  '0xEBCB8B'
      blue:    '0x81A1C1'
      magenta: '0xB48EAD'
      cyan:    '0x88C0D0'
      white:   '0xE5E9F0'

  cursor:
    style:
      shape: Beam
    vi_mode_style: Underline
    thickness: 0.25

  # Live config reload (changes require restart)
  live_config_reload: true

  key_bindings:
    - { key: N,              mods: Shift|Control,                action: SpawnNewInstance      }
    - { key: Space,          mods: Control, mode: ~Search,       action: ToggleViMode          }
    - { key: Return,         mods: Alt,                          action: ToggleFullScreen      }
#+end_src

*** Shell: zsh
This post is getting to be quite long and there's a lot to discuss with =zsh=. I'll hit the highlights here and do a more detailed write-up in the future when I've lived in it for a few weeks/months. I have seen lots of helpful posts on =zsh= and even =fish= to =zsh= migrations but all of the ones I came across use the [[https://ohmyz.sh/][Oh my zsh]] "framework". While =oh my zsh= is great, I wanted to stick to a smaller/leaner configuration that I could understand myself. The great thing is that since =oh my zsh= is a collection of scripts that marshaled, the underlying functionality is available as independent repos which I added as git submodules to my dotfiles repo and got a fairly streamlined experience on my laptop and phone (via Termux).

#+begin_src sh
# Minimal zsh configuration

# Personal functions
fpath=(~/.config/zsh/functions "${fpath[@]}")
autoload -Uz vi
autoload -Uz cat
autoload -Uz ls
autoload -Uz lst

# Aliases
alias gs="git status"
alias ga="git add --all"
alias gd="git diff"
alias gc="git commit -m"
alias gf="git fetch"
alias gF="git pull"
alias gp="git push"

# History
export HISTFILE=~/.config/.zsh_history
export HISTSIZE=100
export SAVEHIST=1000

# Command prompt using starship
eval "$(starship init zsh)"

# All zsh "plugins" are git submodules symlinked to ~/.config/zsh
# Sourced from: https://github.com/orgs/zsh-users/
source ~/.config/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.config/zsh/zsh-ssh-agent/ssh-agent.zsh
source ~/.config/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# History substring matching like fish, load after syntax-highlighting
source ~/.config/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh
#requires keybinds for up and down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

#+end_src
*** Before and After
Yeah, I get it: just show the screenshots.

#+begin_export hugo
{{< exif src="fish-on-gnome-terminal.png" caption="fish shell running on the Gnome Terminal" alt="fish shell shown running in a Gnome Terminal window displaying the output of neofetch" >}}
#+end_export

#+begin_export hugo
{{<exif src="zsh-with-starship-on-alacritty.png" caption="zsh shell running on Alacritty with the starship prompt" alt="Alacritty screenshot with default startship prompt running zsh displaying the output of neofetch">}}
#+end_export

So far I'm pretty happy and comfortable with the new system. The thing I still miss from fish is expanding the commands and sub-commands of CLI apps. I'm sure there are zsh packages for that and I look forward to learning more. If you have [[mailto:fish-to-zsh@shom.dev][any suggestions]], I would love to learn from you.

** DONE QMK caps word                                        :foss:keyboard:
CLOSED: [2022-04-14 Thu 20:59]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220414_qmk-caps-word
:EXPORT_HUGO_MENU:
:END:

I use a [[https://github.com/foostan/crkbd][Corne]] low profile keyboard running the [[https://qmk.fm/][QMK firmware]]. It is a 42 key layout and although it has a sixth column where a lot of folks put the traditional SHIFT and CTRL modifier keys, I've opted to go with the [[https://precondition.github.io/home-row-mods][home row mods]] so that I'm not stretching my fingers and negating some of the ergonomic advantages. The downside is that it is difficult to type full words/phrases in capital letters without switching which hand is holding the modifier. Also, it's not as convenient to  press the capslock button since it's on a layer and most things that I'm typing aren't very long in ALL CAPS, I don't do a lot of yelling online.

This is where the very interesting and awesome [[https://getreuer.info/posts/keyboards/caps-word/index.html#using-caps-word][Caps Word]] feature that I just discovered comes in handy. It temporarily sends out capital letters from the keyboard (importantly, it doesn't turn on CAPSLOCK since it might be mapped to something else. Here's how it works:
#+begin_quote
- Caps Word is activated by pressing the left and right shift keys at the same time.
- Caps Word automatically disables itself at the end of the word.
#+end_quote

I was able to set it up pretty easily on the keyboard, well, once I realized that I had ~MOD_LSFT~ on both halves accidentally and fixed it. It's going to take a bit of getting used to but awkwardly typing in ALL CAPS is a good reminder to use the proper feature.

** DONE Seahorse                                                       :art:
CLOSED: [2022-03-08 Tue 21:53]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220308_seahorse
:EXPORT_FILE_NAME: index 
:EXPORT_HUGO_MENU:
:END:
I still need to figure out how to get ox-hugo to process images that are within shortcodes. Might be a good opportunity to learn the code base a bit and maybe contribute.
[[file:images/20220308_seahorse/20220308_seahorse.jpg]]

Here's the ~figure~ shortcode.
#+begin_export hugo
{{< figure src="20220308_seahorse.jpg" caption="Seahorse" alt="Watercolor painting of a seahorse in yellows browns and reds floating above slight green and pink vegetation" >}}
#+end_export

** DONE Hugo photos with EXIF data                                :foss:hugo:
CLOSED: [2022-01-29 Sat 01:42]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220128_hugo-photos-with-exif-data
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:END:
I have been wanting to transition my photography site to Hugo as well but have not investigated how to utilize Hugo's image processing capabilities. Yesterday I came across [[https://fosstodon.org/@Wivik][Wivik's]] [[https://github.com/Wivik/hugo-shortcodes/tree/master/exif][helpful shortcodes]] that display EXIF information and presents the photo with a frame and a caption. I'm experimenting with it now and might modify it and eventually migrate my photography content.

I ran into =nil pointer evaluating resource.Resource.Resize= error when running the shortcode and tried out the built-in =figure= shortcode with the same path to verify that it wasn't an actual path issue. The answer lies in Hugo's use of *Page Bundles*, essentially standalone directory per post which /bundles/ the text and images in a single folder. Many thanks to [[https://snowgoons.ro/posts/2020-06-04-hugo-automated-image-processing/][Tim Walls' post explicitly helping future sufferers]] of the same error and DuckDuckGo for indexing the page keywords well.

I still have to smooth out the edges for making the page bundle play nice with the short-code within ox-hugo. Kudos to [[https://fosstodon.org/web/@kaushalmodi@mastodon.technology][Kaushal Modi]] for already [[https://ox-hugo.scripter.co/doc/hugo-bundle/][supporting page bundles elegantly]] in ox-hugo. But for this post, I can "cheat" because I need to show the old style rendering anyway for a comparison. By inserting the image directly, ox-hugo will copy the image to the right location so Hugo can do image processing on that page bundle.

The "old" method is just the original image linked directly with no captions or EXIF metadata:
[[file:images/20220128_hugo-photos-with-exif-data/20191016-Howe-Lake.jpg]]


And the "new" method which uses the shortcode to resize the image to save bandwidth (the original image can be viewed at full resolution by clicking it... I'm not thrilled with the compression quality but it's decent) and also shows the EXIF metadata. I plan to do a bit more with the EXIF info but this is a great start thanks to the shortcode, the caption parameter I added (to provide descriptive alts for accessibility independent of the caption) and icons from the [[https://github.com/Remix-Design/remixicon][Remixicon project]] who provide high-quality FOSS icons.

=Update:= Shortcode appears to be working locally when testing with ~hugo server -D~ but failing on sourcehut ci/cd, I'll investigate with fresh eyes tomorrow.

#+begin_export hugo
{{<exif src="20191016-Howe-Lake.jpg" caption="Howe Lake at Glacier National Park" alt="Howe Lake in Glacier National Park reflecting the yellow larch and pink alpine glow of sunset kissing the top of the snow-capped peaks on a perfectly still mirror surface">}}
#+end_export
=Update 2:= Kaushal happened to see my toot and quickly provided a work-around, I'll sing his praises more preemptively so he can do troubleshooting for me without even asking :), more later.

** DONE Corne LP                                              :foss:keyboard:
CLOSED: [2022-01-16 Sun 14:48]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 20220116_corne-lp
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_MENU:
:END:
I fell down the split ergo mechanical keyboard rabbit hole thanks to a dear friend who was kind enough to loan me his [[https://www.gboards.ca/product/gergoplex][Gergoplex]] (despite my incessant teasing about his hipster keyboard). The Gergoplex is on the deeper end of the rabbit-hole with only 36 keys and 12g switches but it demonstrated the value to me. I ended up getting a pre-built [[https://github.com/foostan/crkbd][Corne]] and added the lightest switches I could find at the time: [[https://mechanicalkeyboards.com/shop/index.php?l=product_detail&p=1638][Gateron MX 35g switches]]. I've been pretty happy with the Corne (and it's 3x6 +3 layout) but I very much enjoyed the lower profile and light action of the Gergoplex and wanted to chase it...

So, I got a [[https://boardsource.xyz/store/5f2efc462902de7151495057][Corne LP]] kit but went with an acrylic case (the aluminum case looks really nice but it's quite rich) and got the 25g [[https://boardsource.xyz/store/5fff705f03db380da20f1014][Purpz]] Choc switches.
#+begin_export hugo
{{< exif src="20220126_corne-1.jpg" caption="Corne parts" alt="Split ergonomic keyboard parts, pcb, switches, keycaps" showexif="false">}}
#+end_export

It was fun to assemble the kit and the board looks great:
#+begin_export hugo
{{< exif src="20220126_corne-2.jpg" caption="Corne with purpz" alt="Split ergonomic keyboard with switches installed but no keycaps" showexif="false">}}
#+end_export

I didn't have any Choc keycaps so I had to wait a bit for the [[https://mkultra.click/mbk-choc-keycaps][MK Ultra MBK Choc]] keycaps. I'm very impressed with the keycaps and the homing keys feel great. I'm a big fan of the look and feel and quite happy with the low profile and light touch which I was looking for.

#+begin_export hugo
{{< exif src="20220126_corne-3.jpg" caption="Fully assembled Corne" alt="Split ergonomic keyboard with black and white keys" showexif="false">}}
#+end_export

The keyboard worked "out of the box" but I was able to flash my custom [[https://qmk.fm/][QMK firmware]] and was able to get up and going with my keymap. Now, maybe I'll look into making the kit [[https://nicekeyboards.com/nice-nano/][wireless]]? It never ends.

** DONE OBS, virtual camera, guix                                 :foss:guix:linux:
CLOSED: [2022-01-11 Tue 16:47]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220111_obs-virtual-camera-guix
:EXPORT_HUGO_MENU:
:END:
I've used OBS as a virtual camera input for various reasons (to compose scenes, to control field of view, etc.). I was setting it up on my desktop (Pop_Os! 20.04 with Guix as the package manager) today because Microsoft Teams recognizes my El Gato CamLink 4K but won't show any video. Since I had successfully used virtual camera before I tried setting it up, but ran into some issues.

OBS needs the =v4l2loopback= driver in order to enable the virtual camera functionality.
#+begin_src bash
  guix install obs-studio v4l2loopback-linux-module
#+end_src
Installing OBS and the loopback driver worked but even after a restart OBS would not show the virtual camera option. I decided to see if it was a package/path issue and tried using =apt= but even after restart that didn't work, turns out apt's version of OBS is too old.
#+begin_src bash
  apt install -y obs v4l2loopback-dkms
#+end_src
=NOTE= package names are different

Ultimately, I had to get OBS from guix and the loopback from apt. This mismatch makes me uneasy since it goes directly against a declarative config, so I'm documenting the discrepancy for when it bites me in the future.

** DONE Found Nemo!                                                    :art:
CLOSED: [2022-01-09 Sun 21:05]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220109_found-nemo
:EXPORT_HUGO_MENU:
:END:
First painting with the new paint set. Good paper (140 lbs) and paint make a big difference.
[[./static/20220109_foundnemo.jpg]]
** DONE Water color paint key/legend                                   :art:
CLOSED: [2022-01-08 Sat 17:48]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220108_water-color-paint-key-legend
:EXPORT_HUGO_MENU:
:END:
I got a new water color paint set. Turns out I like painting enough and I was encouraged by a friend with a generous gift of brushes and a marine life water color book. The same friend also clued me in to making a paint key/legend. Well, first I made a poor design decision on how to structure the key and then failed to follow the design (further indicating poor design). I also had to reconcile  my desire for perfection with lack of a ruler, lack of patience, and lack of necessity for the outcome to be perfect. So what I intended to be a relaxing afternoon activity turned out to be a bit frustrating. BUT, I'm glad I persevered and now I have this legend to guide me on what colors to pick when I paint. Now that it's done, it looks pretty to me, not surprising that I also love opera warming up cacophonous sound. 

[[./static/20220108_paintkey.jpg]]

** DONE Setting up Protonmail in Emacs :emacs:linux:
CLOSED: [2022-01-08 Sat 12:04]
:PROPERTIES:
:EXPORT_FILE_NAME: 20220108_setting-up-protonmail-in-emacs
:EXPORT_HUGO_MENU:
:END:
I've used [[https://protonmail.com][Protonmail]] for several years and use the web interface for the most part and used Thunderbird on the desktop to keep offline copies of email. Since Protnmail takes care of the encryption it requires a [[https://protonmail.com/bridge/install][local bridge]] to provide a standard interface like IMAP. Essentially, it is running an IMAP server on the local machine that any compatible client can connect to. Technically, the bridge can be made accessible on a local network so many clients from many machines can connect to it. I might eventually set this up when I have had a chance to get a better handle on vlans and access control.

*** Installing packages
In order to use connect to the local IMAP bridge locally, I will be using =mbsync=. I'm using =guix= for package management, guix (and other package  managers) refer to =mbsync= as =isync=. The =mu= package also includes =mu4e= (at least in version 1.6+ and it's not recommended to mix/match versions).
#+begin_src sh
  guix install isync mu
#+end_src

*** Configuring mbsync
=mbsync= expects a configuration in =~/.mbsyncrc= (does anyone know how to move this to =~/.config=? I'm disheartened by all the home directory clutter). Ideally one would GPG encrypt the password but since Proton Bridge generates it locally and it's is available as clear text to the local machine anyway, I didn't bother. Instead I just put the password from the ProtonBridge application into a text file (ensure no extra characters exist like space or return) and cat that into the ~PassCmd~. 
#+begin_src conf
  IMAPAccount proton
  Host 127.0.0.1
  User user@protonmail.com
  PassCmd "cat ~/.protonBridgePass"
  SSLType NONE
  CertificateFile /etc/ssl/certs/ca-certificates.crt

  IMAPStore proton-remote
  Account proton

  MaildirStore proton-local
  Subfolders Verbatim
  Path ~/mail/proton
  Inbox ~/mail/proton/inbox

  Channel proton
  Far :proton-remote:
  Near :proton-local:
  Patterns *
  Create Both
  SyncState *
#+end_src
Running the sync command gave me an error that sent me on a goose chase:
#+begin_src sh
mbsync -a
#+end_src
=Socket error: secure connect to 127.0.0.1 (127.0.0.1:1143): error:1408F10B:SSL routines:ssl3_get_record:wrong version number=
The issue was the =SSLType NONE= is the proper config as shown above, I originally had it set to =IMAPS=. Once the sync starts it will take a long time depending upon how many emails you have.

*** Configuring mu4e
Configure the ~mu4e-maildir~ location to wherever you want to store the mail directory (remember mail in this folder is stored in clear-text). The ~mu4e-****-folder~ variables need to include the sub-directory in the relative path, in my case =proton=.

#+begin_src emacs-lisp
  (use-package mu4e
    :straight nil
    :defer 20 ; Wait until 20 seconds after startup
    :config

    (setq mu4e-change-filenames-when-moving t ; avoid sync conflicts
	  mu4e-update-interval (* 10 60) ; check mail 10 minutes
	  mu4e-compose-format-flowed t ; re-flow mail so it's not hard wrapped
	  mu4e-get-mail-command "mbsync -a"
	  mu4e-maildir "~/mail/proton")

    (setq mu4e-drafts-folder "/proton/Drafts"
	  mu4e-sent-folder   "/proton/Sent"
	  mu4e-refile-folder "/proton/All Mail"
	  mu4e-trash-folder  "/proton/Trash")

    (setq mu4e-maildir-shortcuts
	  '(("/proton/inbox"     . ?i)
	    ("/proton/Sent"      . ?s)
	    ("/proton/Trash"     . ?t)
	    ("/proton/Drafts"    . ?d)
	    ("/proton/All Mail"  . ?a)))

    (setq message-send-mail-function 'smtpmail-send-it
	  auth-sources '("~/.authinfo") ;need to use gpg version but only local smtp stored for now
	  smtpmail-smtp-server "127.0.0.1"
	  smtpmail-smtp-service 1025
	  smtpmail-stream-type  'ssl))
#+end_src

I'm also configuring ~smtpmail~ in the config section of =mu4e= just to keep mail config together, ~smtpmail~ is part of Emacs core. I'm adding SMTP authentication info to the un-encrypted ~.authinfo~ for the same reason as =.mbsyncrc= explanation above.

#+begin_src conf
machine 127.0.0.1 login user@protonmail.com password ProtonBridgeGeneratedPassword port 1025
#+end_src

*** Using org-mode to compose HTML emails
At this stage plain-text email will work just fine, in order to send email with formatting I'm using =org-msg= which lets you compose with org markup and sends it out as HTML (including in-lining images, tables, etc.)
#+begin_src emacs-lisp
  (use-package org-msg
    :straight t
    :after mu4e
    :config
    (setq mail-user-agent 'mu4e-user-agent)
    (require 'org-msg)
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
	  org-msg-startup "hidestars indent inlineimages"
	  org-msg-default-alternatives '((new		. (text html))
					 (reply-to-html	. (text html))
					 (reply-to-text	. (text)))
	  org-msg-convert-citation t)
    (org-msg-mode))
#+end_src

*** References
Here are a list of references I used to get everything setup and configured:
- https://systemcrafters.net/emacs-mail/
- http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
- https://jherrlin.github.io/posts/emacs-mu4e/

** DONE "Inverse literate" config via org-transclusion                :emacs:
CLOSED: [2021-12-30 Thu 17:32]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211230_inverse-literate-config-via-org-transclusion
:EXPORT_HUGO_MENU:
:END:
I am very intrigued by the whole concept of literate programming. There is a lot of opinions and lots of valid points for and against comments, but ultimately it's always a good idea to understand intent. I wanted to create a literate config but did not want slow down startup with tangling.

I came across an interesting package today called [[https://github.com/nobiot/org-transclusion][org-transclusion]] by @nobiot. The package is very interesting, being able to bring in arbitrary lines of text from multiple documents into a single document (while those documents remain the source of truth) is quite powerful. The package also allows extracting sections based on tags (string match) which makes it a good contender to make an "inverse literate" configuration which I've been curious about ever since David Wilson did a [[https://www.youtube.com/watch?v=50Vsh4qw-E4][System Crafters live stream]].

So I decided to give it a shot and got started with my custom configuration. I added some text comments to divide the configuration into sections:
#+begin_src emacs-lisp
;directory_begin
(setq user-emacs-directory "~/.emacs/.custom/")
;directory_end
#+end_src

Then I'm able to include it in an org file:
#+begin_src emacs-lisp
This line live in my org file, but the content below lives in my init.el file:
#+transclude: [[./init.el::;directory_begin]] :lines 2- :src emacs-lisp :end "directory_end"
#+end_src
Where =org-transclusion= looks for a file =./init.el= and searching for the begin string ~;directory_begin~ and includes everything until it encounters the end string ~;directory_end~ (both strings are arbitrary, I just picked that convention) but doesn't include the actual line containing "directory_end" as specified by the ~:line 2-~ parameter. All of that would produce:
#+begin_src emacs-lisp
This line live in my org file, but the content below lives in my init.el file:
(setq user-emacs-directory "~/.emacs/.custom/")
#+end_src
And in the future if I added anything in =init.el= between the ~;directory_begin~ and ~;directory_end~ comment lines, then it would get included in the org file.

Here's what all of this looks like [[https://git.sr.ht/~shom/.emacs.custom][in my actual configuration repo]] (I haven't finished writing up all the sections yet, but plan to soon™.

Overall, this has worked pretty well. The file =config.org= in my repo contains the "source" and =org-transclusion= directives and is rendered out to =README.md= (markdown is better supported for auto-rendering by more forges currently). I'll eventually automate this process, likely through a git-hook. However, the rendered output is never guaranteed to include all of my config, just the sections that have been manually commented, =init.el= and includes will remain the source of truth.

** DONE Doom Emacs config (deprecated) :emacs:
CLOSED: [2021-12-01 Wed 21:57]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211201_doom-emacs-config--deprecated
:EXPORT_HUGO_MENU:
:END:
I was asked about my Doom config by [[https://fosstodon.org/@Runlevelrobot/107374760764898864][someone on fosstodon]] but it's not a clean repo where I'm not confident that I didn't accidentally commit private information in the past, so I wasn't sure how to share. But this is a good time to put a pin in the config and capture a snapshot here, for reference.

This is quite messy and mixes idioms at random as I learned more about configuration. I also used this config to transition over to my custom config so I disabled some Doom functionality as I went down that path, in short, I was using a lot more packages in =init.el= that the current state below.

*** init.el
#+begin_src emacs-lisp
(doom! :input
       ;;chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ;;ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;pretty-code       ; ligatures or substitute text with pretty symbols
       ;tabs              ; an tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       ;;vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       ;file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)    ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       ;;vc              ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       ;;macos             ; MacOS-specific commands
       (magit +forge)      ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org ;;(org +roam)              ; organize your plain life in plain text
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       (sh +lsp +fish)     ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
       everywhere

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

*** packages.el
#+begin_src emacs-lisp
;; Useful for position M-x (execute-extended-command) window on screen
(package! ivy-posframe)

;; Simpleclip allows access to system clipboard in a reasonable manner
(package! simpleclip)

;; Use org-journal with org-roam to follow Roam Research workflow
(package! org-journal)

;; Use org-roam-server to visualize org-roam links
(package! org-roam-server)

;; single dired buffer and icons
(package! all-the-icons-dired)
(package! dired-single)

(package! fish-completion
  :recipe (:host gitlab :repo "ambrevar/emacs-fish-completion"))

(package! emacas-0x0
  :recipe (:host gitlab :repo "willvaughn/emacs-0x0"))

(package! org-present)
(package! org-appear)

(package! ox-gemtext
  :recipe (:host nil :repo "https://codeberg.org/woozong/ox-gemtext"))

(package! gemini-mode)
(package! org-preview-html)

(package! ox-hugo)
(package! yaml-mode)
(package! ox-gemini)

(package! org-books)

(package! deadgrep)

(package! vertico)
(package! orderless)
(package! marginalia)
(package! embark)

(package! ace-window)

(package! org-bars
  :recipe (:host github :repo "tonyaldon/org-bars"))

(package! consult)

(package! vertico-posframe)

#+end_src

*** config.el
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)

(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 32))

(setq display-line-numbers-type t)

;; CUA type customizations and conveniences=====================================
;; Simpleclip to access system clipboard
(require 'simpleclip)
(setq simpleclip-mode 1)

(map! :gin "C-S-x" #'simpleclip-cut ;Was: C-x chord
      :gin "C-S-c" #'simpleclip-copy ;Was: C-x chord
      :gin "C-S-v" #'clipboard-yank ;freezing on Ubuntu: 'simpleclip-paste ;Was: C-x chord
      :gin "C-z" #'undo ; Was: enable Emacs state
      :gin "C-S-z" #'redo ;Was: C-x chor
      ;; :gin "C-<tab>" #'switch-to-next-buffer ;Was: aya-create snippet
      ;; :gin "C-S-<tab>" #'previous-multiframe-window ;Was: C-x chord
      :gin "C-w" #'kill-buffer ;Was: evil-window-map
      :gin "C-a" #'mark-whole-buffer ;Was: doom/backward-to-bol-or-indent
      )

;; Escape smart-parens after done typing inside
(map! :i "M-;" #'sp-up-sexp) ;Was: comment-dwim

;; Save. Was: isearch-forward
(map! "C-s" #'save-buffer)
;; Save as. Was: nil
(map! "C-S-s" #'write-file)

;; Ctrl shift P like sublime for commands
(map! "C-S-p" #'execute-extended-command)

;; Popup which-key fast
(after! which-key
  (setq which-key-idle-delay 0.1))

;; Org mode related=============================================================
(setq org-directory "~/org/")
(setq org-agenda-files '("~/org/todo.org"))

;; Org files that are refile targets
(setq org-refile-targets (quote (("notes.org" :maxlevel . 1)
                                 ("projects.org" :level . 1)
                                 ("doomNotes.org" :level . 1)
                                 )))

;; Allow text selection by holding down shift key
(setq org-support-shift-select t)

;; Mark when task was completed
(setq org-log-done 'time)

;; Toggle narrow/widen subtree. Was: append-next-kill
(map! "C-M-w" #'org-toggle-narrow-to-subtree)

;; Render modified text only not modifier characters
(setq org-pretty-entities-include-sub-superscripts t)

;; Show images in the org buffers
(setq org-startup-with-inline-images t)

;; Org-roam
(setq org-roam-mode 0)
(setq org-roam-directory "~/org/roam/")
(setq org-roam-buffer "Org-roam Sidebar")
(setq org-roam-buffer-width 0.15)
;;(setq org-roam-buffer-no-delete-other-windows t)
(setq org-roam-link-title-format "∞%s")

;; Org-journal roam integration
;; From @ianjones on doom emacs discord: https://www.ianjones.us/blog/2020-05-05-doom-emacs/#fleeting-notes
(use-package org-journal
      :custom
      (org-journal-dir "~/org/roam/journal/")
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %B %d %Y"))
(setq org-journal-enable-agenda-integration t)
(map! "C-c C-5" #'org-journal-search) ;;was overriding org schedule

(setq org-roam-dailies-capture-templates
      '(("d" "daily" plain #'org-roam-capture--get-point ""
         :immediate-finish t
         :file-name "%<journal/%Y-%m-%d>"
         :head "#+TITLE: %<%Y %B %d, %A>\nTAGS: [[file:dailies.org][∞Dailies]]\n\n*")))

(setq org-roam-capture-templates '(
                                   ("d" "default"
                                    plain
                                    #'org-roam-capture--get-point "%?"
                                    :file-name "%<%Y%m%d>-${slug}"
                                    :head "#+TITLE: ${title}\n"
                                    :unnarrowed t)
                                   ("p" "personal"
                                    plain
                                    #'org-roam-capture--get-point "%?"
                                    :file-name "personal/%<%Y%m%d>-${slug}"
                                    :head "#+TITLE: ${title}\n"
                                    :unnarrowed t)))
;; org-roam-server=====================================
(if (eq system-type 'gnu/linux)
    (use-package org-roam-server
      :ensure t
      :config
      (setq org-roam-server-host "127.0.0.1"
            org-roam-server-port 8008
            org-roam-server-authenticate nil
            org-roam-server-export-inline-images t
            org-roam-server-serve-files nil
            org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
            org-roam-server-network-poll t
            org-roam-server-network-arrows nil
            org-roam-server-network-label-truncate t
            org-roam-server-network-label-truncate-length 60
            org-roam-server-network-label-wrap-length 20))
  )
;; Posframe customization to position popup=====================================
(require 'ivy-posframe)
;; display at `ivy-posframe-style'
(setq ivy-posframe-display-functions-alist
      '((t . ivy-posframe-display)))
(setq ivy-posframe-display-functions-alist
      '((t . ivy-posframe-display-at-frame-center)))
(ivy-posframe-mode t)

;; Use aspell for spell-checking================================================
(setq-default ispell-program-name "aspell")

;; Speed up frame by loading heavy things when daemon starts
(when (daemonp)
  (require 'org)
  (require 'org-roam)
  (require 'ispell)
  (ispell-start-process))

;; dired config from system builder's emacs from scratch #1
(use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

(use-package dired-single
  :ensure t
  :init
  (require 'dired-single))

(use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

;; Magit forge configuration==================================================
(setq auth-sources '("~/.authinfo"))

;; eshell configuration ======================================================
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))

;; vterm configuration========================================================
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (setq vterm-shell "fish")
  (setq vterm-max-scrollback 10000))

;; org-present configuration from https://github.com/daviwil/dotfiles=========
(defun dw/org-present-prepare-slide ()
  (org-overview)
  (org-show-entry)
  ;(org-show-children)
  )

(defun dw/org-present-hook ()
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.5) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  (setq header-line-format " ")
  (org-appear-mode -1)
  (org-display-inline-images)
  (display-line-numbers-mode)
  (dw/org-present-prepare-slide))

(defun dw/org-present-quit-hook ()
  (setq-local face-remapping-alist '((default variable-pitch default)))
  (setq header-line-format nil)
  (org-present-small)
  (org-remove-inline-images)
  (org-appear-mode 1)
  (display-line-numbers-mode))

(defun dw/org-present-prev ()
  (interactive)
  (org-present-prev)
  (dw/org-present-prepare-slide))

(defun dw/org-present-next ()
  (interactive)
  (org-present-next)
  (dw/org-present-prepare-slide))

(use-package org-present
  :after simple
  :after org
  :bind (:map org-present-mode-keymap
         ("C-j" . dw/org-present-next)
         ("C-k" . dw/org-present-prev))
  :hook ((org-present-mode . dw/org-present-hook)
         (org-present-mode-quit . dw/org-present-quit-hook)))

;; Gemini=====================================================================
(require 'ox-gemtext)
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "gmi")
              (gemini-mode +1))))
;; ox-hugo====================================================================
(require 'ox-hugo)
(require 'ox-gemini)

;; Org capture template for Hugo posts
;; https://ox-hugo.scripter.co/doc/org-capture-setup/
(with-eval-after-load 'org-capture
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (concat (format-time-string "%Y%m%d_") (org-hugo-slug title))))
      (mapconcat #'identity
                 `(
                   ,(concat "\n* DRAFT " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":EXPORT_HUGO_MENU:\n:END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (add-to-list 'org-capture-templates
               '("h"                ;`org-capture' binding + h
                 "Hugo post"
                 entry
                 ;; It is assumed that below file is present in `org-directory'
                 ;; and that it has a "Blog Ideas" heading. It can even be a
                 ;; symlink pointing to the actual location of all-posts.org!
                 (file+olp "~/dev/shom.dev/content.org" "Content")
                 (function org-hugo-new-subtree-post-capture-template)
                 :prepend t)))

;; Embark config==============================================================
(use-package embark
  :ensure t
  :bind
  (("C-;" . embark-act)
   ("C-M-;" . embark-dwim)
   ("C-h B" . embark-bindings))

  :init
  (setq prefix-help-command #'embark-prefix-help-command))


;; Org-books==================================================================
(setq org-books-file "~/org/roam/personal/books.org")

;; Vertico ===================================================================
;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Optionally enable cycling for `vertico-next', `vertico-previous',
  ;; `vertico-next-group' and `vertico-previous-group'.
  (setq vertico-cycle t))

;; Optionally use the `orderless' completion style. See
;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
;; dispatcher. Additionally enable `partial-completion' for file path
;; expansion. `partial-completion' is important for wildcard support.
;; Multiple files can be opened at once with `find-file' if you enter a
;; wildcard. You may also give the `initials' completion style a try.
(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))
(orderless-define-completion-style orderless+initialism
  (orderless-matching-styles '(orderless-initialism
                               orderless-literal
                               orderless-regexp)))
(setq completion-category-overrides
      '((command (styles orderless+initialism))
        (symbol (styles orderless+initialism))
        (variable (styles orderless+initialism))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

(use-package consult
  :after vertico)
(map! :gin "C-<tab>" #'consult-buffer
      :gin "C-f" #'consult-ripgrep
      :given "C-i" #'consult-imenu)

;; Window and decoration =====================================================
(set-fringe-mode '(15 . 10))

(use-package ace-window
  :ensure t
  :init
  (global-set-key (kbd "M-q") 'ace-window)
  (setq aw-dispatch-always t)
  (custom-set-faces!
    '(aw-leading-char-face
      :foreground "white" :background "red"
      :weight bold :height 2.5 :box (:line-width 10 :color "red"))))


;; Org-bars configuration ====================================================
(use-package org-bars
  :after org
  :ensure t
  :init
 (defun org-no-ellipsis-in-headlines ()
 "Remove use of ellipsis in headlines.
See `buffer-invisibility-spec'."
  (remove-from-invisibility-spec '(outline . t))
  (add-to-invisibility-spec 'outline))
 (add-hook 'org-mode-hook #'org-bars-mode)
 (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines))

;; ===========================================================================
(after! tramp
  (setq tramp-inline-compress-start-size 1000)
  (setq tramp-copy-size-limit 10000)
  (setq tramp-verbose 1)
  (setq tramp-default-method "scp")
  (setq tramp-use-ssh-controlmaster-options t)
  (setq tramp-verbose 1))

;; ===========================================================================
(use-package vertico-posframe
  :after vertico
  :ensure t
  :init
  (vertico-posframe-mode 1))

#+end_src

** DONE Highland Chewie :art: 
CLOSED: [2021-11-29 Mon 22:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211129_highland-chewie
:EXPORT_HUGO_MENU:
:END:
I picked up a water color kit for $2 with a brush and eight colors to try something new. I followed along with a [[https://www.instagram.com/paigepayne_creations/channel/][tutorial]] to paint a highland cow and my painting wasn't that great, but it was fun. Afterwards it felt a little like Chewbacca, so l added a bandolier. Here's +Highland Chewie+ Chewvaca:

#+ATTR_ORG: :width 800
[[./static/20211129_HighlandChewie.jpg]]

** DONE Emacs which-key prefix labels :emacs:
CLOSED: [2021-11-22 Mon 00:26]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211122_emacs-which-key-prefix-labels
:EXPORT_HUGO_MENU:
:END:
I've been using =evil-mode= for my Emacs configuration and [[https://github.com/cofi/evil-leader][evil-leader]] makes the key-mapping very straight-forward with the =set-key=. I wanted a few functions to be grouped together. =SPC= is bound as a leader key and there are a few frequent functions bound to single keys, the rest are grouped under other leaders.

However, the secondary leaders show up as =x → +prefix= and it would nice to give the grouping a name. A lot of suggestions make use of the [[https://github.com/noctuid/general.el][General.el]] but at this time I didn't need anything beyond giving the grouping a name. I was not immediately able to find a way to create an empty keymap to put commands under (I did not know that's what I needed to do), like this: ~"e" '("eval" . (keymap))~

#+begin_src emacs-lisp
  (evil-leader/set-key
  "." 'find-file
  "," 'consult-buffer
  "'" 'execute-extended-command

  "e" '("eval" . (keymap))
  "eb" '("buffer" . eval-buffer)
  "er" '("region" . eval-region)

  "g" '("magit" . (keymap))
  "gc" '("commit" . magit-commit)
  "gf" '("fetch" . magit-fetch)
  "gg" '("status" . magit-status)

  "q" '("quit" . (keymap))
  "qb" '("buffer" . kill-this-buffer)
  "qq" '("save&quit" . save-buffers-kill-terminal)

  "h" '("help" . (keymap))
  "hf" '("function" . describe-function)
  "hk" '("key" . describe-key)
  "hv" '("variable" . describe-variable)

  "w" '("window" . (keymap))
  "wd" '("delete" . delete-window)
  "wo" '("delete other" . delete-other-windows)
  "ww" '("ace-window" . aw-show-dispatch-help))
#+end_src

** DONE Emacs custom configuration :emacs:
CLOSED: [2021-11-21 Sun 17:35]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211121_emacs-custom-configuration
:EXPORT_HUGO_MENU:
:END:

I crafted a custom configuration for Emacs and have been using it for the past few weeks. This is something I didn't really see myself doing when I started using Emacs, it seemed "very advanced". This was my journey from a noob to a different kind of noob!

*** Doom 
I started my Emacs journey with [[https://github.com/hlissner/doom-emacs/][Doom]] and was learning things along the way. This was a great way to get started by borrowing configuration snippets and blindly copying and pasting, which got me up and running quickly. I did find the vastness of Doom intimidating and knew that I wasn't using all the functionality and wasn't really discovering it given the jam packed key-maps.
*** Vanilla Chocolate Swirl  
Around the time when I was understanding how to copy paste configs more, there was some community discussion around making Emacs more inviting to new users. As a new user, I felt qualified to collect my thoughts. In an attempt to help new user on-boarding, I even created a [[https://github.com/shombando/EmacsVanillaChocolateSwirl][literate config]] that others found useful enough to contribute to. I understood things a lot better through that exercise and felt comfortable enough to try packages by myself. 
*** Back to Doom
Actually, I never left Doom while doing the above exercise. I did not want to invest the time necessary to learn to make my own config. Also, having all the keybindings already setup and showing up nicely in ~which-key~ was great. This is also before =native-comp= was merged into Emacs 28 master branch so I was having issues with compatibility. The final push was that using Doom with all its modules was not performant on a Windows machine that I don't manage but have to use. 
*** Custom Config
[[../20211201_doom-emacs-config-deprecated][During this time]], I kept disabling more and more Doom modules and replacing some of them with other options. There seems to be a lot of excitement about light-weight packages like =vertico=, =consult=, etc. that are more single task focused which I started integrating. I started using =orderless=, =embark= and =ace-window= as well and with those, I felt I had enough to use a custom config and be productive. I'm using [[https://github.com/plexus/chemacs2][Chemacs2]] to have both my Doom config and my [[https://git.sr.ht/~shom/.emacs.custom][custom config]] installed but have been exclusively using the config.

I'll make a few short posts with some of the things I learned in this process with some code snippets as examples.  

** DONE Sony A7c initial customization :camera:
CLOSED: [2021-10-27 Wed 00:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211026_sony-a7c-initial-customization
:EXPORT_HUGO_MENU:
:END:
I have been using the Sony A7ii for a long while. It was my first full-frame and mirrorless camera. The A7ii is a great camera and in a lot of ways I have been very spoiled by it. However, when the A7iii came out with fairly significant improvements I resisted the urge to upgrade and decided to wait for the A7iv.

The A7iv was released last week and in many regards is a "perfect" camera. It has made a lot of improvements in an already excellent line-up and is perhaps justifiably is also priced 25% more than it's predecessor. However, most of the advancements were made in the video department (save for the new 33MP sensor) and that is not the feature set I use. Also, given the shortage of electronic parts it is unclear when pre-orders would get into the hands of users. Ultimately, after waiting for an agonizing 3.5 years after the release of the A7iii, I decided not to buy the A7iv.

Instead, I opted for the A7c which was released in 2020 and is essentially an A7iii in a smaller body. It loses the dual SD cards, 2 custom buttons, and a joystick but gains a fully articulating LCD monitor, compactness, and a range-finder look and feel. I decided to get it with the compact (but quite excellent) 28-60 f/4-5.6 kit lens and make this is my "only" camera for both landscape and underwater photography (with a Seafrog case I intend to get).

All of this preface to get to my main point. I have customized a lot of functions of the A7ii that I no longer remember the "how" or the "why" behind those changes. Here are the main changes I made and replicated on the A7c before the first shoot.

Image from first shoot:
#+ATTR_ORG: :width 800
[[./static/Shom_20211026_McDonaldLake_00015.jpg]]

*** Back-button auto-focus
Decoupling auto-focus from the shutter action allows me to focus on a subject and wait for the right moment to click the shutter without worrying about refocusing/losing focus. This is accomplished in two pieces, first the shutter and auto-focus is decoupled and then the auto-focus function is then remapped to a button on the back of the camera.
**** Decouple auto-focus from shutter
The current Sony terminology for decoupling auto-focus from shutter is =AF w/ shutter=. In the A7C it is found in ~Menu - Camera 1 - AF2~ (Page 5).

It is also a good idea to turn off =Pre-AF Off= which moves the focus point based on the scene changes even before auto-focus is actuated (to improve speed).

~NOTE:~ Shutter half-press is not customizable on the A7c (unlike A7ii)
**** Remap auto-focus to another button
I'm choosing to use the default =AF-On= button on the back of the camera for now. But it can be customized to any of the other buttons in ~Menu - Camera 2 - Custom Operation1 - Custom Key~ (Page 9).
*** DRO/Auto HDR
The LCD panel on the camera shows the JPEG preview of the image regardless of whether you're shooting RAW. The Dynamic Range Optimization (DRO) boosts the shadows and that's what shows up in the LCD, which in turn means that the RAW is underexposed. The =DRO/Auto HDR= setting can be turned off in ~Menu - Camera 1 - Color/WB/Img.Processing1~ (Page 11).

This [[https://www.youtube.com/watch?v=21Z7l1-h71E][video from Nick Page]] describes the issue and suggests this fix.
*** Long Exposure NR
By default the camera attempts to do Noise Reduction (NR) when doing long-exposure. While this does create a lower noise image it comes at the expense of "timing out" for the same length of time the original exposure was. This makes sense since the camera takes a "dark" image with the shutter closed as a noise reference and subtracts it from the original exposure to remove that noise. However, this is a major hindrance for doing multiple longer exposure shots especially as the light is fading. Turning the  =Long Exposure NR= feature off is necessary for those scenarios. The option is found in ~Menu - Camera 1 - Quality/Image Size2~ (Page 2).

~NOTE:~ There's a related setting for =High ISO NR=.

~NOTE:~ If attempting proper astrophotography then multiple dark frames are needed anyway for proper post processing.I'll

These are the main features that would have "bit" me if I didn't change them before trying to use the camera. If there are others, I will note them here after they bite me.

** DRAFT Org-capture template for Hugo
:PROPERTIES:
:EXPORT_FILE_NAME: 20211025_org-capture-template-for-hugo
:EXPORT_HUGO_MENU:
:END:
Need to get the original date of the post as part of the slug title in capture template. This might cause discrepancy if the date of capture isn't the date of publish (which will show up in Hugo metadata), so maybe the slug needs to be updated upon org state change from DRAFT to DONE.
** DONE org-bars view for outlining/folding :emacs:
CLOSED: [2021-10-23 Sat 23:37]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211023_org-bars-view-for-outlining-folding
:EXPORT_HUGO_MENU:
:END:
I came across this new [[https://github.com/tonyaldon/org-bars][org-bars]] package that shows folding indicators and lines to indicate the groupings. In the [[https://www.reddit.com/r/emacs/comments/qdze6g/new_orgbars_add_bars_to_the_virtual_indentation/][reddit]] discussion I also discovered that there's another package [[https://github.com/legalnonsense/org-visual-outline][org-visual-outline]] but it actually requires configuring two packages so I didn't try it.

However, based on the discussion in the comments it seems that ~org-bars~ supports narrowing of the buffer (and it works great) which visual-outline does not. I discovered a visual bug and filed a [[https://github.com/tonyaldon/org-bars/issues/2][report]], so hopefully it's an easy fix but it's not a breaking issue.

Here's the configuration I'm using based on the recommendations in the documentation.
#+begin_src emacs-lisp
;; Org-bars configuration ====================================================
(use-package org-bars
  :after org
  :ensure t
  :custom
 (defun org-no-ellipsis-in-headlines ()
 "Remove use of ellipsis in headlines.
See `buffer-invisibility-spec'."
  (remove-from-invisibility-spec '(outline . t))
  (add-to-invisibility-spec 'outline))
 (add-hook 'org-mode-hook #'org-bars-mode)
 (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines))
#+end_src

Here's a screenshot of my Hugo content buffer showing ~org-bars~:
#+ATTR_ORG: :width 600
[[./static/20211023_org-bars.png]]

** DONE Wine and CrossOver to use Lightroom on Linux :foss:linux:
CLOSED: [2021-10-16 Sat 00:07]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211016_wine-and-crossover-lightroom
:EXPORT_HUGO_MENU:
:END:
I have been using [[https://www.darktable.org/][Darktable]] and transitioning away from Adobe's Lightroom. However, I have almost a decade of edits and experience with Lightroom so doing a cold-turkey switch is proving to be challenging. So I decided to investigate if I could "natively" run Lightroom (without a VM) so I decided to give =wine= a try.

I use =guix= as a package manager on Pop!_OS and guix has =wine= but it did a while to build and install. I needed to download a Lightroom Classic executable but like a lot of software it's an installer that does the downloading and installing. However, Adobe won't allow you to download a Windows installer on Linux, so I had to use [[https://gitlab.com/ntninja/user-agent-switcher][User-Agent Switcher]] on Firefox to Windows to even get the installer... this is part of the frustration of software you lease.

=wine= will ask to install mono installer, which is does by itself and then the same thing with Gecko installer. Overall a pretty smooth process but the Adobe installer failed miserably with a less than helpful error.
#+begin_src shell
Crash Annotation GraphicsCriticalError: |[0][GFX1]: Potential driver version mismatch ignored due to missing DLLs 0.0.0.0 and 0.0.0.0 (t=18.9854
) [GFX1]: Potential driver version mismatch ignored due to missing DLLs 0.0.0.0 and 0.0.0.0
#+end_src

At this point I didn't have high hopes for avoiding the Windows VM route but  wanted to give a quick try to [[https://www.codeweavers.com/crossover][CrossOver]]. I tried one of their supported applications (Notepad++) and that worked great. They also support "unlisted application" but pointing the Adobe installer led to a lot of nothing, the logs were not very helpful either. At this point I decided to abandon this path and go the VM route to make progress on my actual photo editing goals. However, Steam's [[https://www.simpler.website/html/2020/12/steam-play.html][Proton]] could be a option to investigate in the future. Are there any other good solutions?

** DONE Fully automated deployment :emacs:foss:
CLOSED: [2021-10-05 Tue 05:53]
:PROPERTIES:
:EXPORT_FILE_NAME: 20211005_fully-automated-deployment
:EXPORT_HUGO_MENU:
:END:
Up until the last commit, the site was being written in Org Mode, exported using ox-hugo, and Hugo was invoked manually to generate the html all locally. The generated =public= folder was what was being pushed to SourceHut for the deployment. This will be first post which will only commit the actual content in org format only and the full CI/CD will happen on SourceHut.

*** Using org-publish
I'll be following along with the System Crafters' [[https://systemcrafters.net/publishing-websites-with-org-mode/][Publishing Website with Org Mode]] to take full advantage of ~org-publish~ and configure multiple outputs (WWW and Gemini). As of the now the following configuration is invoking the correct export function through org-publish but ox-hugo isn't finding the Hugo sub-trees.
#+begin_src emacs-lisp
(message "\n==== Exporting Hugo markdown ====")
(setq org-publish-project-alist
      (list
       (list "org-site:main"
             :recursive nil
             :base-directory "./"
             :publishing-function '(org-hugo-export-wim-to-md :all-subtrees nil :visible-only nil)
             :publishing-directory "./public"
             ;; :with-author nil           ;; Don't include author name
             ;; :with-creator t            ;; Include Emacs and Org versions in footer
             ;; :with-toc t                ;; Include a table of contents
             ;; :section-numbers nil       ;; Don't include section numbers
             :time-stamp-file nil)))    ;; Don't include time stamp in file

;; Generate the site output
(org-publish-all t)

(message "\n==== Export complete ====")
#+end_src

=RESULTS=
#+begin_src bash
Publishing file /home/shom/dev/shom.dev/content.org using `org-hugo-export-wim-to-md'
[ox-hugo] No valid Hugo post subtrees were found
#+end_src

*** Using hugo-export directly
In order to check sanity and solve the issue, I exported directly with ~org-hugo-export-wim-to-md~ which is straightforward since I've opted for a single org-content file and it worked as expected. So this is the configuration that is currently building the site:
#+begin_src emacs-lisp
(message "\n==== Exporting Hugo markdown ====")
(with-current-buffer (find-file "./content.org")
  (org-hugo-export-wim-to-md :all-subtrees nil :visible-only nil))

(message "\n==== Export complete ====")
#+end_src

I would like to get the ~org-publish~ route sorted out so I can publish to the Hugo site and the Gemini capsule with a single commit.

** DONE Static-site :emacs:gemini:
CLOSED: [2021-09-10 Fri 20:29]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210910_static-site
:EXPORT_HUGO_MENU:
:END:
=This entry and all previous ones are taken verbatim from the gemini capsule.=
*** Establishing a web presence
The gemini capsule has been an interesting experiment. In order to be the change I want to see, I will be creating a personal website/blog and the articles will appear both as html and gemtext. All entries prior to this have been made with Android+Termux+emacs. Going forward, the entries won't strictly be made from Termux.

*** Static site using org-mode
Org-mode has good html export capabilities and using it with SimpleCss [1] provides a pretty decent standalone webpage. However, creating a site that will auto-generate navigation and headers/footers is a bit more involved.

*** Hugo / Ox-gemtext
One option is to write the content in org format, use ox-hugo [2] for content export to enable Hugo for the site generation and use a gemtext exporter for gemini. ox-gemtext [3] does not handle gemtext markup for links properly and the generated TOC and section choices are not quite to my liking. Might need to investigate another option. Better to get started than find a perfect solution.

[1] https://simplecss.org
[2] https://ox-hugo.scripter.co
[3] https://codeberg.org/woozong/ox-gemtext

** DONE Framework :framework:
CLOSED: [2021-09-01 Wed 19:25]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210901_framework-first-impressions
:EXPORT_HUGO_MENU:
:END:
I've decided to cross post any of my content type toots from Mastodon (Fosstodon instance) here. I'm not sure if there's a good way to "tag" something aside from filenames so I can generate a toot vs post section? I'll include that info in the filename and I can investigate automation later.

*** First impression
I just received my frame.work (i5) DIY edition laptop. I haven't installed the RAM and NVMe yet (they need to come out from another machine first) but I'm pretty impressed with the build quality so far. The laptop feels solid and the expansion cards fit flush and tight. I'm excited about the 3:2 display, #modular design, and user #replaceable everything.
If folks are interested I can share my experience as I get it up and running.
 #framework
[[https://fosstodon.org/@shom/106849498535302510][🦣 fosstodon toot]]

*** Quick review
Since there was a decent bit of interest, here's a #framework #laptop update.

**** 1/X:
I opened up the case with the provided multi-tool (T6/phillips reversible bit with a spudger at the other end). The screws on the case are captive, which is great no worries about losing one. 1 of the 5 screws wasn't perfectly aligned but posed no issues, build is solid. The spudger allows the keyboard to be lifted (top view under keyboard shown). The QR codes link to documentation (which has a lot of photos).
**** 2/X:
The top plate is secured in place with magnets (gluing isn't the answer!) and feels very secure and still easy to remove with spudger. Only a single ribbon cable connects the top to the main board and it has plenty of play so working with it was comfortable and easy to detach and reattach.
Installing the components, RAM (which I had) and wifi-card (which I bought from frame.work) was very easy. I'd even say easier than desktop since everything is open and flat. I'll install the NVMe later.
**** 3/X:
They supplied an advisory to put some insulating tape under the touchpad cable to prevent a potential short (similar issue to pre-2012 Macbook SATA cable, could potentially rub over time and short). I appreciated the note and put down some electrical tape, photo attached, it was #righttorepair working in the manufacturer favor. The advisory sheet also had a couple stickers on it, which was cool.
All other hardware looks good and fits well. I'm not a huge fan of the keyboard, a bit mushy.
**** 4/4:
I have it configured with 2 USB-C ports, 1 USB-A, and 1 microSD card reader. Booting up went fine, I installed #pop_os from flash drive to microSD v90, suprisingly fast.
The BIOS (needed to disable secure boot) splash screen doesn't show FN key legend for boot device (F12) / BIOS (? I mashed a lot of FN keys), so that would be a nice touch to add.
Having WiFi issues, will investigate later. But everything else feels snappy and display looks good (3:2 ratio!!).
Happy to answer questions!

[[https://fosstodon.org/@shom/106854632055933583][🦣 fosstodon toot]]

** DONE Video Editing :foss:
CLOSED: [2021-08-08 Sun 16:00]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210808_video-editing
:EXPORT_HUGO_MENU:
:END:
I'm not a video person, I've made an occasional slideshow but even that has been over a decade ago. Recently, I needed to edit a video of an event and splice in the live recording with some pre-recorded segments and stitch it all together with some simple transitions. I didn't know what the "standard" FOSS offering was when it came to video editing. For photography I would go to Dark Table, GIMP for images, but what for video? I knew that Blender was an option but I wanted something with less steep of a learning curve even if that meant it was less featured. Luckily, there are several articles listing and comparing options, Shotcut and KDEnlive seemed to be the two worth investigating.

*** Shotcut
I started with Shotcut because it seemed like the lighther of the two packages. There were ample and good tutorials on YouTube that weren't too out of date, which got me up and running fairly quickly. Though I'm not a video person, I'm familiar with multi track editing and transforms, I just needed to know where the tools were and what they were called.

The interface was fairly intuitive after watching a short tutorial to get familiarized. It did slow down, choke, and crash a few times when working with my 3.5 hour long source video. The timeline zooming in and out (to make precise cuts) were a bit painful until I could cut everything into clips. I quickly learned their keyframe driven actions and also learned how to make a picture-in-picture transform. With all manipulations being filters, configuring transitions was also pretty easy.

However, the problem was stability. It crashed a few more times and then wouldn't preview the transitions at all unless I removed them and re-did them. Finally, it had lots of issues exporting (a big one was it having path issues that likely was more of a guix package manager complication).

*** KDEnlive
I turned to KDEnlive after it was recommended by the System Crafters community [1]. The workflow was very familiar between the two programs. Both of them support rearranging panels to customize the UI, that also helped in coming up to speed. The filters/transforms work a bit differently but there are again plenty of YouTube tutorials. KDEnlive has a lot more functionality it seems but it doesn't force you to use any of it to accomplish your task. It was also noticeably more stable (no crashes even with a 2.25 hour video render) and snappy (the timeline editing and zooming was never laggy or froze up the UI).

All in all, I would say both are good but I personally had a better experience with KDEnlive, even though I much preferred the key framing UI of Shotcut. The stability issues of Shotcut could very well be specific to my machine and environment, so I'm not writing it off and might revisit it. KDEnlive produced a quality video where the editing seems passably professional, which is a testament to the tool and not my skill. It's amazing to have such high quality FOSS software, thank you devs!


[1] https://wiki.systemcrafters.cc/community/chat-with-us/

** DONE Termux + Emacs :emacs:
CLOSED: [2021-08-07 Sat 15:59]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210807_termux-emacs
:EXPORT_HUGO_MENU:
:END:
One of the biggest advantages of Android is that it runs on Linux and Termux [1] is a very capable terminal emulator. Until pine phone (which I own for playing around on) type devices reach daily driver maturity (to use with job related corporate apps etc.) Termux is my only realistic option to run Linux terminal apps on the phone.

This is where being able to use Emacs as a TUI application on Termux is great. I actually run a slightly tweaked version of my desktop config which relies of doom-emacs [1]. I don't do anything complex but the editing experience is as comfortable as most other phone app. The editing experience is helped by evil bindings which are more key-sequence driven rather than key-combo driven. Although modifier keys are supported by Termux and a two row soft keyboard is fully customizable, evil bindings are easier. My config for the softkeys is shown here:

#+begin_src
extra-keys = [ \
    ['ESC','|','/','HOME','UP','END','~','DEL'], \
    ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT',':','<'] \
]
#+end_src

Also swiping over the soft keyboard reveals a text entry field which is a standard Android text field so text auto correct, gesture typing, and other keyboard features work as expected and is a lot more convenient for typing.

In fact this whole gemini capsule and all entries (so far) were created using Termux + Emacs including setting up the CI/CD for sr.ht.

While I use this setup for capturing notes in org mode, for tasks management I use Orgzly. That's another topic but in an even smaller nutshell, the biggest benefit is system notifications.

[1] https://termux.com
[2] https://github.com/hlissner/doom-emacs.

** DONE Latte Art :coffee:
CLOSED: [2021-08-02 Mon 19:11]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210802_latte-art
:EXPORT_HUGO_MENU:
:END:
Getting into home espresso has been fun, it's a rabbit hole like most fun things. And with rabbit holes it's best to decide how far you're willing to fall in before really starting down that hole. For me, it was an used Rancilio Silvia modded with a temperature PID controller and a refurbished Baratza Vario. At this level it's definitely possible to get good espresso and latte art if one tries, gets lucky, and practices... it's a good balance. Making one or maximum of two drinks most days is nearly not enough practice especially considering missed practice due to travel. But today was a lucky day, I got the best pour I've managed and it's exciting to see what's possible at the lower/est end of prosumer equipment.
#+ATTR_ORG: :width 1200
[[./static/20210802_LatteArt.jpg]]

** DONE Gemini Capsule :gemini:
CLOSED: [2021-08-02 Mon 19:00]
:PROPERTIES:
:EXPORT_FILE_NAME: 20210802_gemini-capsule
:EXPORT_HUGO_MENU:
:END:
With a certain nostalgia for the early web ever present, a Gemini site (gemite? edit: I've learned it's called a capsule 💊🚀) is a good spiritual successor. Albeit much fewer under construction gifs and red text on black background...

=gemini://gem.shom.dev=

* Home
:PROPERTIES:
:EXPORT_HUGO_SECTION:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu "main" :weight -2 :title Home
:END:

* Tags
:PROPERTIES:
:EXPORT_HUGO_SECTION: tags 
:EXPORT_HUGO_MENU: :menu "main" :weight -1 :title Tags
:EXPORT_FILE_NAME: _index
:END:

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu "main"
:END:
